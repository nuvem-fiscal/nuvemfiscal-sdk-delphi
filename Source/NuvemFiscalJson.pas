unit NuvemFiscalJson;

interface

uses
  OpenApiJson, 
  NuvemFiscalDtos;

type
  TJsonConverter = class;
  
  TJsonConverter = class(TCustomJsonConverter)
  public
    function TEmpresaEnderecoToJsonValue(Source: TEmpresaEndereco): TJSONValue;
    function TEmpresaEnderecoToJson(Source: TEmpresaEndereco): string;
    function TEmpresaEnderecoFromJsonValue(Source: TJSONValue): TEmpresaEndereco;
    function TEmpresaEnderecoFromJson(Source: string): TEmpresaEndereco;
    function TEmpresaToJsonValue(Source: TEmpresa): TJSONValue;
    function TEmpresaToJson(Source: TEmpresa): string;
    function TEmpresaFromJsonValue(Source: TJSONValue): TEmpresa;
    function TEmpresaFromJson(Source: string): TEmpresa;
    function TEmpresaListToJsonValue(Source: TEmpresaList): TJSONValue;
    function TEmpresaListToJson(Source: TEmpresaList): string;
    function TEmpresaListFromJsonValue(Source: TJSONValue): TEmpresaList;
    function TEmpresaListFromJson(Source: string): TEmpresaList;
    function TEmpresaListagemToJsonValue(Source: TEmpresaListagem): TJSONValue;
    function TEmpresaListagemToJson(Source: TEmpresaListagem): string;
    function TEmpresaListagemFromJsonValue(Source: TJSONValue): TEmpresaListagem;
    function TEmpresaListagemFromJson(Source: string): TEmpresaListagem;
    function TEmpresaPedidoCadastroCertificadoToJsonValue(Source: TEmpresaPedidoCadastroCertificado): TJSONValue;
    function TEmpresaPedidoCadastroCertificadoToJson(Source: TEmpresaPedidoCadastroCertificado): string;
    function TEmpresaPedidoCadastroCertificadoFromJsonValue(Source: TJSONValue): TEmpresaPedidoCadastroCertificado;
    function TEmpresaPedidoCadastroCertificadoFromJson(Source: string): TEmpresaPedidoCadastroCertificado;
    function TEmpresaCertificadoToJsonValue(Source: TEmpresaCertificado): TJSONValue;
    function TEmpresaCertificadoToJson(Source: TEmpresaCertificado): string;
    function TEmpresaCertificadoFromJsonValue(Source: TJSONValue): TEmpresaCertificado;
    function TEmpresaCertificadoFromJson(Source: string): TEmpresaCertificado;
    function TEmpresaConfigNfeToJsonValue(Source: TEmpresaConfigNfe): TJSONValue;
    function TEmpresaConfigNfeToJson(Source: TEmpresaConfigNfe): string;
    function TEmpresaConfigNfeFromJsonValue(Source: TJSONValue): TEmpresaConfigNfe;
    function TEmpresaConfigNfeFromJson(Source: string): TEmpresaConfigNfe;
    function TEmpresaConfigNfceSefazToJsonValue(Source: TEmpresaConfigNfceSefaz): TJSONValue;
    function TEmpresaConfigNfceSefazToJson(Source: TEmpresaConfigNfceSefaz): string;
    function TEmpresaConfigNfceSefazFromJsonValue(Source: TJSONValue): TEmpresaConfigNfceSefaz;
    function TEmpresaConfigNfceSefazFromJson(Source: string): TEmpresaConfigNfceSefaz;
    function TEmpresaConfigNfceToJsonValue(Source: TEmpresaConfigNfce): TJSONValue;
    function TEmpresaConfigNfceToJson(Source: TEmpresaConfigNfce): string;
    function TEmpresaConfigNfceFromJsonValue(Source: TJSONValue): TEmpresaConfigNfce;
    function TEmpresaConfigNfceFromJson(Source: string): TEmpresaConfigNfce;
    function TEmpresaConfigNfseRegTribToJsonValue(Source: TEmpresaConfigNfseRegTrib): TJSONValue;
    function TEmpresaConfigNfseRegTribToJson(Source: TEmpresaConfigNfseRegTrib): string;
    function TEmpresaConfigNfseRegTribFromJsonValue(Source: TJSONValue): TEmpresaConfigNfseRegTrib;
    function TEmpresaConfigNfseRegTribFromJson(Source: string): TEmpresaConfigNfseRegTrib;
    function TEmpresaConfigRpsToJsonValue(Source: TEmpresaConfigRps): TJSONValue;
    function TEmpresaConfigRpsToJson(Source: TEmpresaConfigRps): string;
    function TEmpresaConfigRpsFromJsonValue(Source: TJSONValue): TEmpresaConfigRps;
    function TEmpresaConfigRpsFromJson(Source: string): TEmpresaConfigRps;
    function TEmpresaConfigPrefeituraToJsonValue(Source: TEmpresaConfigPrefeitura): TJSONValue;
    function TEmpresaConfigPrefeituraToJson(Source: TEmpresaConfigPrefeitura): string;
    function TEmpresaConfigPrefeituraFromJsonValue(Source: TJSONValue): TEmpresaConfigPrefeitura;
    function TEmpresaConfigPrefeituraFromJson(Source: string): TEmpresaConfigPrefeitura;
    function TEmpresaConfigNfseToJsonValue(Source: TEmpresaConfigNfse): TJSONValue;
    function TEmpresaConfigNfseToJson(Source: TEmpresaConfigNfse): string;
    function TEmpresaConfigNfseFromJsonValue(Source: TJSONValue): TEmpresaConfigNfse;
    function TEmpresaConfigNfseFromJson(Source: string): TEmpresaConfigNfse;
    function TEmpresaConfigMdfeToJsonValue(Source: TEmpresaConfigMdfe): TJSONValue;
    function TEmpresaConfigMdfeToJson(Source: TEmpresaConfigMdfe): string;
    function TEmpresaConfigMdfeFromJsonValue(Source: TJSONValue): TEmpresaConfigMdfe;
    function TEmpresaConfigMdfeFromJson(Source: string): TEmpresaConfigMdfe;
    function TEmpresaConfigCteToJsonValue(Source: TEmpresaConfigCte): TJSONValue;
    function TEmpresaConfigCteToJson(Source: TEmpresaConfigCte): string;
    function TEmpresaConfigCteFromJsonValue(Source: TJSONValue): TEmpresaConfigCte;
    function TEmpresaConfigCteFromJson(Source: string): TEmpresaConfigCte;
    function TEmpresaConfigNfcomToJsonValue(Source: TEmpresaConfigNfcom): TJSONValue;
    function TEmpresaConfigNfcomToJson(Source: TEmpresaConfigNfcom): string;
    function TEmpresaConfigNfcomFromJsonValue(Source: TJSONValue): TEmpresaConfigNfcom;
    function TEmpresaConfigNfcomFromJson(Source: string): TEmpresaConfigNfcom;
    function TEmpresaConfigDceToJsonValue(Source: TEmpresaConfigDce): TJSONValue;
    function TEmpresaConfigDceToJson(Source: TEmpresaConfigDce): string;
    function TEmpresaConfigDceFromJsonValue(Source: TJSONValue): TEmpresaConfigDce;
    function TEmpresaConfigDceFromJson(Source: string): TEmpresaConfigDce;
    function TEmpresaConfigDistribuicaoNfeToJsonValue(Source: TEmpresaConfigDistribuicaoNfe): TJSONValue;
    function TEmpresaConfigDistribuicaoNfeToJson(Source: TEmpresaConfigDistribuicaoNfe): string;
    function TEmpresaConfigDistribuicaoNfeFromJsonValue(Source: TJSONValue): TEmpresaConfigDistribuicaoNfe;
    function TEmpresaConfigDistribuicaoNfeFromJson(Source: string): TEmpresaConfigDistribuicaoNfe;
    function stringListToJsonValue(Source: stringList): TJSONValue;
    function stringListToJson(Source: stringList): string;
    function stringListFromJsonValue(Source: TJSONValue): stringList;
    function stringListFromJson(Source: string): stringList;
    function TNfseCidadesAtendidasToJsonValue(Source: TNfseCidadesAtendidas): TJSONValue;
    function TNfseCidadesAtendidasToJson(Source: TNfseCidadesAtendidas): string;
    function TNfseCidadesAtendidasFromJsonValue(Source: TJSONValue): TNfseCidadesAtendidas;
    function TNfseCidadesAtendidasFromJson(Source: string): TNfseCidadesAtendidas;
    function TNfseCidadeMetadadosToJsonValue(Source: TNfseCidadeMetadados): TJSONValue;
    function TNfseCidadeMetadadosToJson(Source: TNfseCidadeMetadados): string;
    function TNfseCidadeMetadadosFromJsonValue(Source: TJSONValue): TNfseCidadeMetadados;
    function TNfseCidadeMetadadosFromJson(Source: string): TNfseCidadeMetadados;
    function TRpsIdentificacaoPrestadorToJsonValue(Source: TRpsIdentificacaoPrestador): TJSONValue;
    function TRpsIdentificacaoPrestadorToJson(Source: TRpsIdentificacaoPrestador): string;
    function TRpsIdentificacaoPrestadorFromJsonValue(Source: TJSONValue): TRpsIdentificacaoPrestador;
    function TRpsIdentificacaoPrestadorFromJson(Source: string): TRpsIdentificacaoPrestador;
    function TRpsDadosTomadorEnderecoToJsonValue(Source: TRpsDadosTomadorEndereco): TJSONValue;
    function TRpsDadosTomadorEnderecoToJson(Source: TRpsDadosTomadorEndereco): string;
    function TRpsDadosTomadorEnderecoFromJsonValue(Source: TJSONValue): TRpsDadosTomadorEndereco;
    function TRpsDadosTomadorEnderecoFromJson(Source: string): TRpsDadosTomadorEndereco;
    function TRpsDadosTomadorToJsonValue(Source: TRpsDadosTomador): TJSONValue;
    function TRpsDadosTomadorToJson(Source: TRpsDadosTomador): string;
    function TRpsDadosTomadorFromJsonValue(Source: TJSONValue): TRpsDadosTomador;
    function TRpsDadosTomadorFromJson(Source: string): TRpsDadosTomador;
    function TRpsDadosIntermediarioToJsonValue(Source: TRpsDadosIntermediario): TJSONValue;
    function TRpsDadosIntermediarioToJson(Source: TRpsDadosIntermediario): string;
    function TRpsDadosIntermediarioFromJsonValue(Source: TJSONValue): TRpsDadosIntermediario;
    function TRpsDadosIntermediarioFromJson(Source: string): TRpsDadosIntermediario;
    function TRpsDadosConstrucaoCivilToJsonValue(Source: TRpsDadosConstrucaoCivil): TJSONValue;
    function TRpsDadosConstrucaoCivilToJson(Source: TRpsDadosConstrucaoCivil): string;
    function TRpsDadosConstrucaoCivilFromJsonValue(Source: TJSONValue): TRpsDadosConstrucaoCivil;
    function TRpsDadosConstrucaoCivilFromJson(Source: string): TRpsDadosConstrucaoCivil;
    function TRpsServicoValoresToJsonValue(Source: TRpsServicoValores): TJSONValue;
    function TRpsServicoValoresToJson(Source: TRpsServicoValores): string;
    function TRpsServicoValoresFromJsonValue(Source: TJSONValue): TRpsServicoValores;
    function TRpsServicoValoresFromJson(Source: string): TRpsServicoValores;
    function TRpsDadosServicoToJsonValue(Source: TRpsDadosServico): TJSONValue;
    function TRpsDadosServicoToJson(Source: TRpsDadosServico): string;
    function TRpsDadosServicoFromJsonValue(Source: TJSONValue): TRpsDadosServico;
    function TRpsDadosServicoFromJson(Source: string): TRpsDadosServico;
    function TRpsDadosServicoListToJsonValue(Source: TRpsDadosServicoList): TJSONValue;
    function TRpsDadosServicoListToJson(Source: TRpsDadosServicoList): string;
    function TRpsDadosServicoListFromJsonValue(Source: TJSONValue): TRpsDadosServicoList;
    function TRpsDadosServicoListFromJson(Source: string): TRpsDadosServicoList;
    function TRpsPedidoEmissaoToJsonValue(Source: TRpsPedidoEmissao): TJSONValue;
    function TRpsPedidoEmissaoToJson(Source: TRpsPedidoEmissao): string;
    function TRpsPedidoEmissaoFromJsonValue(Source: TJSONValue): TRpsPedidoEmissao;
    function TRpsPedidoEmissaoFromJson(Source: string): TRpsPedidoEmissao;
    function TRpsPedidoEmissaoListToJsonValue(Source: TRpsPedidoEmissaoList): TJSONValue;
    function TRpsPedidoEmissaoListToJson(Source: TRpsPedidoEmissaoList): string;
    function TRpsPedidoEmissaoListFromJsonValue(Source: TJSONValue): TRpsPedidoEmissaoList;
    function TRpsPedidoEmissaoListFromJson(Source: string): TRpsPedidoEmissaoList;
    function TRpsPedidoEmissaoLoteToJsonValue(Source: TRpsPedidoEmissaoLote): TJSONValue;
    function TRpsPedidoEmissaoLoteToJson(Source: TRpsPedidoEmissaoLote): string;
    function TRpsPedidoEmissaoLoteFromJsonValue(Source: TJSONValue): TRpsPedidoEmissaoLote;
    function TRpsPedidoEmissaoLoteFromJson(Source: string): TRpsPedidoEmissaoLote;
    function TDPSToJsonValue(Source: TDPS): TJSONValue;
    function TDPSToJson(Source: TDPS): string;
    function TDPSFromJsonValue(Source: TJSONValue): TDPS;
    function TDPSFromJson(Source: string): TDPS;
    function TNfseMensagemRetornoToJsonValue(Source: TNfseMensagemRetorno): TJSONValue;
    function TNfseMensagemRetornoToJson(Source: TNfseMensagemRetorno): string;
    function TNfseMensagemRetornoFromJsonValue(Source: TJSONValue): TNfseMensagemRetorno;
    function TNfseMensagemRetornoFromJson(Source: string): TNfseMensagemRetorno;
    function TNfseMensagemRetornoListToJsonValue(Source: TNfseMensagemRetornoList): TJSONValue;
    function TNfseMensagemRetornoListToJson(Source: TNfseMensagemRetornoList): string;
    function TNfseMensagemRetornoListFromJsonValue(Source: TJSONValue): TNfseMensagemRetornoList;
    function TNfseMensagemRetornoListFromJson(Source: string): TNfseMensagemRetornoList;
    function TNfseCancelamentoToJsonValue(Source: TNfseCancelamento): TJSONValue;
    function TNfseCancelamentoToJson(Source: TNfseCancelamento): string;
    function TNfseCancelamentoFromJsonValue(Source: TJSONValue): TNfseCancelamento;
    function TNfseCancelamentoFromJson(Source: string): TNfseCancelamento;
    function TRpsIdentificacaoToJsonValue(Source: TRpsIdentificacao): TJSONValue;
    function TRpsIdentificacaoToJson(Source: TRpsIdentificacao): string;
    function TRpsIdentificacaoFromJsonValue(Source: TJSONValue): TRpsIdentificacao;
    function TRpsIdentificacaoFromJson(Source: string): TRpsIdentificacao;
    function TRpsDadosToJsonValue(Source: TRpsDados): TJSONValue;
    function TRpsDadosToJson(Source: TRpsDados): string;
    function TRpsDadosFromJsonValue(Source: TJSONValue): TRpsDados;
    function TRpsDadosFromJson(Source: string): TRpsDados;
    function TRpsDadosPrestadorToJsonValue(Source: TRpsDadosPrestador): TJSONValue;
    function TRpsDadosPrestadorToJson(Source: TRpsDadosPrestador): string;
    function TRpsDadosPrestadorFromJsonValue(Source: TJSONValue): TRpsDadosPrestador;
    function TRpsDadosPrestadorFromJson(Source: string): TRpsDadosPrestador;
    function TRpsToJsonValue(Source: TRps): TJSONValue;
    function TRpsToJson(Source: TRps): string;
    function TRpsFromJsonValue(Source: TJSONValue): TRps;
    function TRpsFromJson(Source: string): TRps;
    function TNfseToJsonValue(Source: TNfse): TJSONValue;
    function TNfseToJson(Source: TNfse): string;
    function TNfseFromJsonValue(Source: TJSONValue): TNfse;
    function TNfseFromJson(Source: string): TNfse;
    function TNfseListToJsonValue(Source: TNfseList): TJSONValue;
    function TNfseListToJson(Source: TNfseList): string;
    function TNfseListFromJsonValue(Source: TJSONValue): TNfseList;
    function TNfseListFromJson(Source: string): TNfseList;
    function TRpsLoteToJsonValue(Source: TRpsLote): TJSONValue;
    function TRpsLoteToJson(Source: TRpsLote): string;
    function TRpsLoteFromJsonValue(Source: TJSONValue): TRpsLote;
    function TRpsLoteFromJson(Source: string): TRpsLote;
    function TSubstituicaoToJsonValue(Source: TSubstituicao): TJSONValue;
    function TSubstituicaoToJson(Source: TSubstituicao): string;
    function TSubstituicaoFromJsonValue(Source: TJSONValue): TSubstituicao;
    function TSubstituicaoFromJson(Source: string): TSubstituicao;
    function TRegTribToJsonValue(Source: TRegTrib): TJSONValue;
    function TRegTribToJson(Source: TRegTrib): string;
    function TRegTribFromJsonValue(Source: TJSONValue): TRegTrib;
    function TRegTribFromJson(Source: string): TRegTrib;
    function TInfoPrestadorToJsonValue(Source: TInfoPrestador): TJSONValue;
    function TInfoPrestadorToJson(Source: TInfoPrestador): string;
    function TInfoPrestadorFromJsonValue(Source: TJSONValue): TInfoPrestador;
    function TInfoPrestadorFromJson(Source: string): TInfoPrestador;
    function TEnderNacToJsonValue(Source: TEnderNac): TJSONValue;
    function TEnderNacToJson(Source: TEnderNac): string;
    function TEnderNacFromJsonValue(Source: TJSONValue): TEnderNac;
    function TEnderNacFromJson(Source: string): TEnderNac;
    function TEnderExtToJsonValue(Source: TEnderExt): TJSONValue;
    function TEnderExtToJson(Source: TEnderExt): string;
    function TEnderExtFromJsonValue(Source: TJSONValue): TEnderExt;
    function TEnderExtFromJson(Source: string): TEnderExt;
    function TEnderecoToJsonValue(Source: TEndereco): TJSONValue;
    function TEnderecoToJson(Source: TEndereco): string;
    function TEnderecoFromJsonValue(Source: TJSONValue): TEndereco;
    function TEnderecoFromJson(Source: string): TEndereco;
    function TInfoTomadorToJsonValue(Source: TInfoTomador): TJSONValue;
    function TInfoTomadorToJson(Source: TInfoTomador): string;
    function TInfoTomadorFromJsonValue(Source: TJSONValue): TInfoTomador;
    function TInfoTomadorFromJson(Source: string): TInfoTomador;
    function TInfoIntermediarioToJsonValue(Source: TInfoIntermediario): TJSONValue;
    function TInfoIntermediarioToJson(Source: TInfoIntermediario): string;
    function TInfoIntermediarioFromJsonValue(Source: TJSONValue): TInfoIntermediario;
    function TInfoIntermediarioFromJson(Source: string): TInfoIntermediario;
    function TLocPrestToJsonValue(Source: TLocPrest): TJSONValue;
    function TLocPrestToJson(Source: TLocPrest): string;
    function TLocPrestFromJsonValue(Source: TJSONValue): TLocPrest;
    function TLocPrestFromJson(Source: string): TLocPrest;
    function TCServToJsonValue(Source: TCServ): TJSONValue;
    function TCServToJson(Source: TCServ): string;
    function TCServFromJsonValue(Source: TJSONValue): TCServ;
    function TCServFromJson(Source: string): TCServ;
    function TComExteriorToJsonValue(Source: TComExterior): TJSONValue;
    function TComExteriorToJson(Source: TComExterior): string;
    function TComExteriorFromJsonValue(Source: TJSONValue): TComExterior;
    function TComExteriorFromJson(Source: string): TComExterior;
    function TLocacaoSublocacaoToJsonValue(Source: TLocacaoSublocacao): TJSONValue;
    function TLocacaoSublocacaoToJson(Source: TLocacaoSublocacao): string;
    function TLocacaoSublocacaoFromJsonValue(Source: TJSONValue): TLocacaoSublocacao;
    function TLocacaoSublocacaoFromJson(Source: string): TLocacaoSublocacao;
    function TEnderExtSimplesToJsonValue(Source: TEnderExtSimples): TJSONValue;
    function TEnderExtSimplesToJson(Source: TEnderExtSimples): string;
    function TEnderExtSimplesFromJsonValue(Source: TJSONValue): TEnderExtSimples;
    function TEnderExtSimplesFromJson(Source: string): TEnderExtSimples;
    function TEnderecoSimplesToJsonValue(Source: TEnderecoSimples): TJSONValue;
    function TEnderecoSimplesToJson(Source: TEnderecoSimples): string;
    function TEnderecoSimplesFromJsonValue(Source: TJSONValue): TEnderecoSimples;
    function TEnderecoSimplesFromJson(Source: string): TEnderecoSimples;
    function TInfoObraToJsonValue(Source: TInfoObra): TJSONValue;
    function TInfoObraToJson(Source: TInfoObra): string;
    function TInfoObraFromJsonValue(Source: TJSONValue): TInfoObra;
    function TInfoObraFromJson(Source: string): TInfoObra;
    function TAtvEventoToJsonValue(Source: TAtvEvento): TJSONValue;
    function TAtvEventoToJson(Source: TAtvEvento): string;
    function TAtvEventoFromJsonValue(Source: TJSONValue): TAtvEvento;
    function TAtvEventoFromJson(Source: string): TAtvEvento;
    function TExploracaoRodoviariaToJsonValue(Source: TExploracaoRodoviaria): TJSONValue;
    function TExploracaoRodoviariaToJson(Source: TExploracaoRodoviaria): string;
    function TExploracaoRodoviariaFromJsonValue(Source: TJSONValue): TExploracaoRodoviaria;
    function TExploracaoRodoviariaFromJson(Source: string): TExploracaoRodoviaria;
    function TInfoComplToJsonValue(Source: TInfoCompl): TJSONValue;
    function TInfoComplToJson(Source: TInfoCompl): string;
    function TInfoComplFromJsonValue(Source: TJSONValue): TInfoCompl;
    function TInfoComplFromJson(Source: string): TInfoCompl;
    function TServToJsonValue(Source: TServ): TJSONValue;
    function TServToJson(Source: TServ): string;
    function TServFromJsonValue(Source: TJSONValue): TServ;
    function TServFromJson(Source: string): TServ;
    function TVServPrestToJsonValue(Source: TVServPrest): TJSONValue;
    function TVServPrestToJson(Source: TVServPrest): string;
    function TVServPrestFromJsonValue(Source: TJSONValue): TVServPrest;
    function TVServPrestFromJson(Source: string): TVServPrest;
    function TVDescCondIncondToJsonValue(Source: TVDescCondIncond): TJSONValue;
    function TVDescCondIncondToJson(Source: TVDescCondIncond): string;
    function TVDescCondIncondFromJsonValue(Source: TJSONValue): TVDescCondIncond;
    function TVDescCondIncondFromJson(Source: string): TVDescCondIncond;
    function TDocOutNFSeToJsonValue(Source: TDocOutNFSe): TJSONValue;
    function TDocOutNFSeToJson(Source: TDocOutNFSe): string;
    function TDocOutNFSeFromJsonValue(Source: TJSONValue): TDocOutNFSe;
    function TDocOutNFSeFromJson(Source: string): TDocOutNFSe;
    function TDocNFNFSToJsonValue(Source: TDocNFNFS): TJSONValue;
    function TDocNFNFSToJson(Source: TDocNFNFS): string;
    function TDocNFNFSFromJsonValue(Source: TJSONValue): TDocNFNFS;
    function TDocNFNFSFromJson(Source: string): TDocNFNFS;
    function TInfoFornecDocDedRedToJsonValue(Source: TInfoFornecDocDedRed): TJSONValue;
    function TInfoFornecDocDedRedToJson(Source: TInfoFornecDocDedRed): string;
    function TInfoFornecDocDedRedFromJsonValue(Source: TJSONValue): TInfoFornecDocDedRed;
    function TInfoFornecDocDedRedFromJson(Source: string): TInfoFornecDocDedRed;
    function TDocDedRedToJsonValue(Source: TDocDedRed): TJSONValue;
    function TDocDedRedToJson(Source: TDocDedRed): string;
    function TDocDedRedFromJsonValue(Source: TJSONValue): TDocDedRed;
    function TDocDedRedFromJson(Source: string): TDocDedRed;
    function TDocDedRedListToJsonValue(Source: TDocDedRedList): TJSONValue;
    function TDocDedRedListToJson(Source: TDocDedRedList): string;
    function TDocDedRedListFromJsonValue(Source: TJSONValue): TDocDedRedList;
    function TDocDedRedListFromJson(Source: string): TDocDedRedList;
    function TListaDocDedRedToJsonValue(Source: TListaDocDedRed): TJSONValue;
    function TListaDocDedRedToJson(Source: TListaDocDedRed): string;
    function TListaDocDedRedFromJsonValue(Source: TJSONValue): TListaDocDedRed;
    function TListaDocDedRedFromJson(Source: string): TListaDocDedRed;
    function TInfoDedRedToJsonValue(Source: TInfoDedRed): TJSONValue;
    function TInfoDedRedToJson(Source: TInfoDedRed): string;
    function TInfoDedRedFromJsonValue(Source: TJSONValue): TInfoDedRed;
    function TInfoDedRedFromJson(Source: string): TInfoDedRed;
    function TBeneficioMunicipalToJsonValue(Source: TBeneficioMunicipal): TJSONValue;
    function TBeneficioMunicipalToJson(Source: TBeneficioMunicipal): string;
    function TBeneficioMunicipalFromJsonValue(Source: TJSONValue): TBeneficioMunicipal;
    function TBeneficioMunicipalFromJson(Source: string): TBeneficioMunicipal;
    function TExigSuspensaToJsonValue(Source: TExigSuspensa): TJSONValue;
    function TExigSuspensaToJson(Source: TExigSuspensa): string;
    function TExigSuspensaFromJsonValue(Source: TJSONValue): TExigSuspensa;
    function TExigSuspensaFromJson(Source: string): TExigSuspensa;
    function TTribMunicipalToJsonValue(Source: TTribMunicipal): TJSONValue;
    function TTribMunicipalToJson(Source: TTribMunicipal): string;
    function TTribMunicipalFromJsonValue(Source: TJSONValue): TTribMunicipal;
    function TTribMunicipalFromJson(Source: string): TTribMunicipal;
    function TTribOutrosPisCofinsToJsonValue(Source: TTribOutrosPisCofins): TJSONValue;
    function TTribOutrosPisCofinsToJson(Source: TTribOutrosPisCofins): string;
    function TTribOutrosPisCofinsFromJsonValue(Source: TJSONValue): TTribOutrosPisCofins;
    function TTribOutrosPisCofinsFromJson(Source: string): TTribOutrosPisCofins;
    function TTribFederalToJsonValue(Source: TTribFederal): TJSONValue;
    function TTribFederalToJson(Source: TTribFederal): string;
    function TTribFederalFromJsonValue(Source: TJSONValue): TTribFederal;
    function TTribFederalFromJson(Source: string): TTribFederal;
    function TTribTotalMonetToJsonValue(Source: TTribTotalMonet): TJSONValue;
    function TTribTotalMonetToJson(Source: TTribTotalMonet): string;
    function TTribTotalMonetFromJsonValue(Source: TJSONValue): TTribTotalMonet;
    function TTribTotalMonetFromJson(Source: string): TTribTotalMonet;
    function TTribTotalPercentToJsonValue(Source: TTribTotalPercent): TJSONValue;
    function TTribTotalPercentToJson(Source: TTribTotalPercent): string;
    function TTribTotalPercentFromJsonValue(Source: TJSONValue): TTribTotalPercent;
    function TTribTotalPercentFromJson(Source: string): TTribTotalPercent;
    function TTribTotalToJsonValue(Source: TTribTotal): TJSONValue;
    function TTribTotalToJson(Source: TTribTotal): string;
    function TTribTotalFromJsonValue(Source: TJSONValue): TTribTotal;
    function TTribTotalFromJson(Source: string): TTribTotal;
    function TInfoTributacaoToJsonValue(Source: TInfoTributacao): TJSONValue;
    function TInfoTributacaoToJson(Source: TInfoTributacao): string;
    function TInfoTributacaoFromJsonValue(Source: TJSONValue): TInfoTributacao;
    function TInfoTributacaoFromJson(Source: string): TInfoTributacao;
    function TInfoValoresToJsonValue(Source: TInfoValores): TJSONValue;
    function TInfoValoresToJson(Source: TInfoValores): string;
    function TInfoValoresFromJsonValue(Source: TJSONValue): TInfoValores;
    function TInfoValoresFromJson(Source: string): TInfoValores;
    function TInfDPSToJsonValue(Source: TInfDPS): TJSONValue;
    function TInfDPSToJson(Source: TInfDPS): string;
    function TInfDPSFromJsonValue(Source: TJSONValue): TInfDPS;
    function TInfDPSFromJson(Source: string): TInfDPS;
    function TNfseDpsPedidoEmissaoToJsonValue(Source: TNfseDpsPedidoEmissao): TJSONValue;
    function TNfseDpsPedidoEmissaoToJson(Source: TNfseDpsPedidoEmissao): string;
    function TNfseDpsPedidoEmissaoFromJsonValue(Source: TJSONValue): TNfseDpsPedidoEmissao;
    function TNfseDpsPedidoEmissaoFromJson(Source: string): TNfseDpsPedidoEmissao;
    function TNfseDpsPedidoEmissaoListToJsonValue(Source: TNfseDpsPedidoEmissaoList): TJSONValue;
    function TNfseDpsPedidoEmissaoListToJson(Source: TNfseDpsPedidoEmissaoList): string;
    function TNfseDpsPedidoEmissaoListFromJsonValue(Source: TJSONValue): TNfseDpsPedidoEmissaoList;
    function TNfseDpsPedidoEmissaoListFromJson(Source: string): TNfseDpsPedidoEmissaoList;
    function TNfseLoteDpsPedidoEmissaoToJsonValue(Source: TNfseLoteDpsPedidoEmissao): TJSONValue;
    function TNfseLoteDpsPedidoEmissaoToJson(Source: TNfseLoteDpsPedidoEmissao): string;
    function TNfseLoteDpsPedidoEmissaoFromJsonValue(Source: TJSONValue): TNfseLoteDpsPedidoEmissao;
    function TNfseLoteDpsPedidoEmissaoFromJson(Source: string): TNfseLoteDpsPedidoEmissao;
    function TRpsLoteListToJsonValue(Source: TRpsLoteList): TJSONValue;
    function TRpsLoteListToJson(Source: TRpsLoteList): string;
    function TRpsLoteListFromJsonValue(Source: TJSONValue): TRpsLoteList;
    function TRpsLoteListFromJson(Source: string): TRpsLoteList;
    function TRpsLoteListagemToJsonValue(Source: TRpsLoteListagem): TJSONValue;
    function TRpsLoteListagemToJson(Source: TRpsLoteListagem): string;
    function TRpsLoteListagemFromJsonValue(Source: TJSONValue): TRpsLoteListagem;
    function TRpsLoteListagemFromJson(Source: string): TRpsLoteListagem;
    function TNfsePedidoEmissaoToJsonValue(Source: TNfsePedidoEmissao): TJSONValue;
    function TNfsePedidoEmissaoToJson(Source: TNfsePedidoEmissao): string;
    function TNfsePedidoEmissaoFromJsonValue(Source: TJSONValue): TNfsePedidoEmissao;
    function TNfsePedidoEmissaoFromJson(Source: string): TNfsePedidoEmissao;
    function TNfseListagemToJsonValue(Source: TNfseListagem): TJSONValue;
    function TNfseListagemToJson(Source: TNfseListagem): string;
    function TNfseListagemFromJsonValue(Source: TJSONValue): TNfseListagem;
    function TNfseListagemFromJson(Source: string): TNfseListagem;
    function TNfsePedidoCancelamentoToJsonValue(Source: TNfsePedidoCancelamento): TJSONValue;
    function TNfsePedidoCancelamentoToJson(Source: TNfsePedidoCancelamento): string;
    function TNfsePedidoCancelamentoFromJsonValue(Source: TJSONValue): TNfsePedidoCancelamento;
    function TNfsePedidoCancelamentoFromJson(Source: string): TNfsePedidoCancelamento;
    function TNfsePedidoSincronizacaoToJsonValue(Source: TNfsePedidoSincronizacao): TJSONValue;
    function TNfsePedidoSincronizacaoToJson(Source: TNfsePedidoSincronizacao): string;
    function TNfsePedidoSincronizacaoFromJsonValue(Source: TJSONValue): TNfsePedidoSincronizacao;
    function TNfsePedidoSincronizacaoFromJson(Source: string): TNfsePedidoSincronizacao;
    function TNfseSincronizacaoToJsonValue(Source: TNfseSincronizacao): TJSONValue;
    function TNfseSincronizacaoToJson(Source: TNfseSincronizacao): string;
    function TNfseSincronizacaoFromJsonValue(Source: TJSONValue): TNfseSincronizacao;
    function TNfseSincronizacaoFromJson(Source: string): TNfseSincronizacao;
    function THttpRequestDebugToJsonValue(Source: THttpRequestDebug): TJSONValue;
    function THttpRequestDebugToJson(Source: THttpRequestDebug): string;
    function THttpRequestDebugFromJsonValue(Source: TJSONValue): THttpRequestDebug;
    function THttpRequestDebugFromJson(Source: string): THttpRequestDebug;
    function TDfeRequisicaoDebugToJsonValue(Source: TDfeRequisicaoDebug): TJSONValue;
    function TDfeRequisicaoDebugToJson(Source: TDfeRequisicaoDebug): string;
    function TDfeRequisicaoDebugFromJsonValue(Source: TJSONValue): TDfeRequisicaoDebug;
    function TDfeRequisicaoDebugFromJson(Source: string): TDfeRequisicaoDebug;
    function TDfeRequisicaoDebugListToJsonValue(Source: TDfeRequisicaoDebugList): TJSONValue;
    function TDfeRequisicaoDebugListToJson(Source: TDfeRequisicaoDebugList): string;
    function TDfeRequisicaoDebugListFromJsonValue(Source: TJSONValue): TDfeRequisicaoDebugList;
    function TDfeRequisicaoDebugListFromJson(Source: string): TDfeRequisicaoDebugList;
    function TDfeDebugToJsonValue(Source: TDfeDebug): TJSONValue;
    function TDfeDebugToJson(Source: TDfeDebug): string;
    function TDfeDebugFromJsonValue(Source: TJSONValue): TDfeDebug;
    function TDfeDebugFromJson(Source: string): TDfeDebug;
    function TDfeSefazStatusToJsonValue(Source: TDfeSefazStatus): TJSONValue;
    function TDfeSefazStatusToJson(Source: TDfeSefazStatus): string;
    function TDfeSefazStatusFromJsonValue(Source: TJSONValue): TDfeSefazStatus;
    function TDfeSefazStatusFromJson(Source: string): TDfeSefazStatus;
    function TDceSefazIdeToJsonValue(Source: TDceSefazIde): TJSONValue;
    function TDceSefazIdeToJson(Source: TDceSefazIde): string;
    function TDceSefazIdeFromJsonValue(Source: TJSONValue): TDceSefazIde;
    function TDceSefazIdeFromJson(Source: string): TDceSefazIde;
    function TDceSefazEndeEmiToJsonValue(Source: TDceSefazEndeEmi): TJSONValue;
    function TDceSefazEndeEmiToJson(Source: TDceSefazEndeEmi): string;
    function TDceSefazEndeEmiFromJsonValue(Source: TJSONValue): TDceSefazEndeEmi;
    function TDceSefazEndeEmiFromJson(Source: string): TDceSefazEndeEmi;
    function TDceSefazEmitToJsonValue(Source: TDceSefazEmit): TJSONValue;
    function TDceSefazEmitToJson(Source: TDceSefazEmit): string;
    function TDceSefazEmitFromJsonValue(Source: TJSONValue): TDceSefazEmit;
    function TDceSefazEmitFromJson(Source: string): TDceSefazEmit;
    function TDceSefazFiscoToJsonValue(Source: TDceSefazFisco): TJSONValue;
    function TDceSefazFiscoToJson(Source: TDceSefazFisco): string;
    function TDceSefazFiscoFromJsonValue(Source: TJSONValue): TDceSefazFisco;
    function TDceSefazFiscoFromJson(Source: string): TDceSefazFisco;
    function TDceSefazMarketplaceToJsonValue(Source: TDceSefazMarketplace): TJSONValue;
    function TDceSefazMarketplaceToJson(Source: TDceSefazMarketplace): string;
    function TDceSefazMarketplaceFromJsonValue(Source: TJSONValue): TDceSefazMarketplace;
    function TDceSefazMarketplaceFromJson(Source: string): TDceSefazMarketplace;
    function TDceSefazTransportadoraToJsonValue(Source: TDceSefazTransportadora): TJSONValue;
    function TDceSefazTransportadoraToJson(Source: TDceSefazTransportadora): string;
    function TDceSefazTransportadoraFromJsonValue(Source: TJSONValue): TDceSefazTransportadora;
    function TDceSefazTransportadoraFromJson(Source: string): TDceSefazTransportadora;
    function TDceSefazECTToJsonValue(Source: TDceSefazECT): TJSONValue;
    function TDceSefazECTToJson(Source: TDceSefazECT): string;
    function TDceSefazECTFromJsonValue(Source: TJSONValue): TDceSefazECT;
    function TDceSefazECTFromJson(Source: string): TDceSefazECT;
    function TDceSefazEndeDestToJsonValue(Source: TDceSefazEndeDest): TJSONValue;
    function TDceSefazEndeDestToJson(Source: TDceSefazEndeDest): string;
    function TDceSefazEndeDestFromJsonValue(Source: TJSONValue): TDceSefazEndeDest;
    function TDceSefazEndeDestFromJson(Source: string): TDceSefazEndeDest;
    function TDceSefazDestToJsonValue(Source: TDceSefazDest): TJSONValue;
    function TDceSefazDestToJson(Source: TDceSefazDest): string;
    function TDceSefazDestFromJsonValue(Source: TJSONValue): TDceSefazDest;
    function TDceSefazDestFromJson(Source: string): TDceSefazDest;
    function TDceSefazAutXMLToJsonValue(Source: TDceSefazAutXML): TJSONValue;
    function TDceSefazAutXMLToJson(Source: TDceSefazAutXML): string;
    function TDceSefazAutXMLFromJsonValue(Source: TJSONValue): TDceSefazAutXML;
    function TDceSefazAutXMLFromJson(Source: string): TDceSefazAutXML;
    function TDceSefazAutXMLListToJsonValue(Source: TDceSefazAutXMLList): TJSONValue;
    function TDceSefazAutXMLListToJson(Source: TDceSefazAutXMLList): string;
    function TDceSefazAutXMLListFromJsonValue(Source: TJSONValue): TDceSefazAutXMLList;
    function TDceSefazAutXMLListFromJson(Source: string): TDceSefazAutXMLList;
    function TDceSefazProdToJsonValue(Source: TDceSefazProd): TJSONValue;
    function TDceSefazProdToJson(Source: TDceSefazProd): string;
    function TDceSefazProdFromJsonValue(Source: TJSONValue): TDceSefazProd;
    function TDceSefazProdFromJson(Source: string): TDceSefazProd;
    function TDceSefazDetToJsonValue(Source: TDceSefazDet): TJSONValue;
    function TDceSefazDetToJson(Source: TDceSefazDet): string;
    function TDceSefazDetFromJsonValue(Source: TJSONValue): TDceSefazDet;
    function TDceSefazDetFromJson(Source: string): TDceSefazDet;
    function TDceSefazDetListToJsonValue(Source: TDceSefazDetList): TJSONValue;
    function TDceSefazDetListToJson(Source: TDceSefazDetList): string;
    function TDceSefazDetListFromJsonValue(Source: TJSONValue): TDceSefazDetList;
    function TDceSefazDetListFromJson(Source: string): TDceSefazDetList;
    function TDceSefazTotalToJsonValue(Source: TDceSefazTotal): TJSONValue;
    function TDceSefazTotalToJson(Source: TDceSefazTotal): string;
    function TDceSefazTotalFromJsonValue(Source: TJSONValue): TDceSefazTotal;
    function TDceSefazTotalFromJson(Source: string): TDceSefazTotal;
    function TDceSefazTranspToJsonValue(Source: TDceSefazTransp): TJSONValue;
    function TDceSefazTranspToJson(Source: TDceSefazTransp): string;
    function TDceSefazTranspFromJsonValue(Source: TJSONValue): TDceSefazTransp;
    function TDceSefazTranspFromJson(Source: string): TDceSefazTransp;
    function TDceSefazObsEmitToJsonValue(Source: TDceSefazObsEmit): TJSONValue;
    function TDceSefazObsEmitToJson(Source: TDceSefazObsEmit): string;
    function TDceSefazObsEmitFromJsonValue(Source: TJSONValue): TDceSefazObsEmit;
    function TDceSefazObsEmitFromJson(Source: string): TDceSefazObsEmit;
    function TDceSefazObsEmitListToJsonValue(Source: TDceSefazObsEmitList): TJSONValue;
    function TDceSefazObsEmitListToJson(Source: TDceSefazObsEmitList): string;
    function TDceSefazObsEmitListFromJsonValue(Source: TJSONValue): TDceSefazObsEmitList;
    function TDceSefazObsEmitListFromJson(Source: string): TDceSefazObsEmitList;
    function TDceSefazObsFiscoToJsonValue(Source: TDceSefazObsFisco): TJSONValue;
    function TDceSefazObsFiscoToJson(Source: TDceSefazObsFisco): string;
    function TDceSefazObsFiscoFromJsonValue(Source: TJSONValue): TDceSefazObsFisco;
    function TDceSefazObsFiscoFromJson(Source: string): TDceSefazObsFisco;
    function TDceSefazObsFiscoListToJsonValue(Source: TDceSefazObsFiscoList): TJSONValue;
    function TDceSefazObsFiscoListToJson(Source: TDceSefazObsFiscoList): string;
    function TDceSefazObsFiscoListFromJsonValue(Source: TJSONValue): TDceSefazObsFiscoList;
    function TDceSefazObsFiscoListFromJson(Source: string): TDceSefazObsFiscoList;
    function TDceSefazObsMarketplaceToJsonValue(Source: TDceSefazObsMarketplace): TJSONValue;
    function TDceSefazObsMarketplaceToJson(Source: TDceSefazObsMarketplace): string;
    function TDceSefazObsMarketplaceFromJsonValue(Source: TJSONValue): TDceSefazObsMarketplace;
    function TDceSefazObsMarketplaceFromJson(Source: string): TDceSefazObsMarketplace;
    function TDceSefazObsMarketplaceListToJsonValue(Source: TDceSefazObsMarketplaceList): TJSONValue;
    function TDceSefazObsMarketplaceListToJson(Source: TDceSefazObsMarketplaceList): string;
    function TDceSefazObsMarketplaceListFromJsonValue(Source: TJSONValue): TDceSefazObsMarketplaceList;
    function TDceSefazObsMarketplaceListFromJson(Source: string): TDceSefazObsMarketplaceList;
    function TDceSefazObsECTToJsonValue(Source: TDceSefazObsECT): TJSONValue;
    function TDceSefazObsECTToJson(Source: TDceSefazObsECT): string;
    function TDceSefazObsECTFromJsonValue(Source: TJSONValue): TDceSefazObsECT;
    function TDceSefazObsECTFromJson(Source: string): TDceSefazObsECT;
    function TDceSefazObsECTListToJsonValue(Source: TDceSefazObsECTList): TJSONValue;
    function TDceSefazObsECTListToJson(Source: TDceSefazObsECTList): string;
    function TDceSefazObsECTListFromJsonValue(Source: TJSONValue): TDceSefazObsECTList;
    function TDceSefazObsECTListFromJson(Source: string): TDceSefazObsECTList;
    function TDceSefazInfAdicToJsonValue(Source: TDceSefazInfAdic): TJSONValue;
    function TDceSefazInfAdicToJson(Source: TDceSefazInfAdic): string;
    function TDceSefazInfAdicFromJsonValue(Source: TJSONValue): TDceSefazInfAdic;
    function TDceSefazInfAdicFromJson(Source: string): TDceSefazInfAdic;
    function TDceSefazInfDecToJsonValue(Source: TDceSefazInfDec): TJSONValue;
    function TDceSefazInfDecToJson(Source: TDceSefazInfDec): string;
    function TDceSefazInfDecFromJsonValue(Source: TJSONValue): TDceSefazInfDec;
    function TDceSefazInfDecFromJson(Source: string): TDceSefazInfDec;
    function TDceSefazInfDCeToJsonValue(Source: TDceSefazInfDCe): TJSONValue;
    function TDceSefazInfDCeToJson(Source: TDceSefazInfDCe): string;
    function TDceSefazInfDCeFromJsonValue(Source: TJSONValue): TDceSefazInfDCe;
    function TDceSefazInfDCeFromJson(Source: string): TDceSefazInfDCe;
    function TDceSefazInfSolicDCeToJsonValue(Source: TDceSefazInfSolicDCe): TJSONValue;
    function TDceSefazInfSolicDCeToJson(Source: TDceSefazInfSolicDCe): string;
    function TDceSefazInfSolicDCeFromJsonValue(Source: TJSONValue): TDceSefazInfSolicDCe;
    function TDceSefazInfSolicDCeFromJson(Source: string): TDceSefazInfSolicDCe;
    function TDcePedidoEmissaoToJsonValue(Source: TDcePedidoEmissao): TJSONValue;
    function TDcePedidoEmissaoToJson(Source: TDcePedidoEmissao): string;
    function TDcePedidoEmissaoFromJsonValue(Source: TJSONValue): TDcePedidoEmissao;
    function TDcePedidoEmissaoFromJson(Source: string): TDcePedidoEmissao;
    function TDfeAutorEventoToJsonValue(Source: TDfeAutorEvento): TJSONValue;
    function TDfeAutorEventoToJson(Source: TDfeAutorEvento): string;
    function TDfeAutorEventoFromJsonValue(Source: TJSONValue): TDfeAutorEvento;
    function TDfeAutorEventoFromJson(Source: string): TDfeAutorEvento;
    function TDfeAutorizacaoToJsonValue(Source: TDfeAutorizacao): TJSONValue;
    function TDfeAutorizacaoToJson(Source: TDfeAutorizacao): string;
    function TDfeAutorizacaoFromJsonValue(Source: TJSONValue): TDfeAutorizacao;
    function TDfeAutorizacaoFromJson(Source: string): TDfeAutorizacao;
    function TDfeToJsonValue(Source: TDfe): TJSONValue;
    function TDfeToJson(Source: TDfe): string;
    function TDfeFromJsonValue(Source: TJSONValue): TDfe;
    function TDfeFromJson(Source: string): TDfe;
    function TDfeListToJsonValue(Source: TDfeList): TJSONValue;
    function TDfeListToJson(Source: TDfeList): string;
    function TDfeListFromJsonValue(Source: TJSONValue): TDfeList;
    function TDfeListFromJson(Source: string): TDfeList;
    function TDfeListagemToJsonValue(Source: TDfeListagem): TJSONValue;
    function TDfeListagemToJson(Source: TDfeListagem): string;
    function TDfeListagemFromJsonValue(Source: TJSONValue): TDfeListagem;
    function TDfeListagemFromJson(Source: string): TDfeListagem;
    function TDcePedidoCancelamentoToJsonValue(Source: TDcePedidoCancelamento): TJSONValue;
    function TDcePedidoCancelamentoToJson(Source: TDcePedidoCancelamento): string;
    function TDcePedidoCancelamentoFromJsonValue(Source: TJSONValue): TDcePedidoCancelamento;
    function TDcePedidoCancelamentoFromJson(Source: string): TDcePedidoCancelamento;
    function TDfeCancelamentoToJsonValue(Source: TDfeCancelamento): TJSONValue;
    function TDfeCancelamentoToJson(Source: TDfeCancelamento): string;
    function TDfeCancelamentoFromJsonValue(Source: TJSONValue): TDfeCancelamento;
    function TDfeCancelamentoFromJson(Source: string): TDfeCancelamento;
    function TEmailResumoToJsonValue(Source: TEmailResumo): TJSONValue;
    function TEmailResumoToJson(Source: TEmailResumo): string;
    function TEmailResumoFromJsonValue(Source: TJSONValue): TEmailResumo;
    function TEmailResumoFromJson(Source: string): TEmailResumo;
    function TEmailResumoListToJsonValue(Source: TEmailResumoList): TJSONValue;
    function TEmailResumoListToJson(Source: TEmailResumoList): string;
    function TEmailResumoListFromJsonValue(Source: TJSONValue): TEmailResumoList;
    function TEmailResumoListFromJson(Source: string): TEmailResumoList;
    function TEmailListagemToJsonValue(Source: TEmailListagem): TJSONValue;
    function TEmailListagemToJson(Source: TEmailListagem): string;
    function TEmailListagemFromJsonValue(Source: TJSONValue): TEmailListagem;
    function TEmailListagemFromJson(Source: string): TEmailListagem;
    function TEmailAttachmentToJsonValue(Source: TEmailAttachment): TJSONValue;
    function TEmailAttachmentToJson(Source: TEmailAttachment): string;
    function TEmailAttachmentFromJsonValue(Source: TJSONValue): TEmailAttachment;
    function TEmailAttachmentFromJson(Source: string): TEmailAttachment;
    function TEmailAttachmentListToJsonValue(Source: TEmailAttachmentList): TJSONValue;
    function TEmailAttachmentListToJson(Source: TEmailAttachmentList): string;
    function TEmailAttachmentListFromJsonValue(Source: TJSONValue): TEmailAttachmentList;
    function TEmailAttachmentListFromJson(Source: string): TEmailAttachmentList;
    function TEmailEventToJsonValue(Source: TEmailEvent): TJSONValue;
    function TEmailEventToJson(Source: TEmailEvent): string;
    function TEmailEventFromJsonValue(Source: TJSONValue): TEmailEvent;
    function TEmailEventFromJson(Source: string): TEmailEvent;
    function TEmailEventListToJsonValue(Source: TEmailEventList): TJSONValue;
    function TEmailEventListToJson(Source: TEmailEventList): string;
    function TEmailEventListFromJsonValue(Source: TJSONValue): TEmailEventList;
    function TEmailEventListFromJson(Source: string): TEmailEventList;
    function TEmailToJsonValue(Source: TEmail): TJSONValue;
    function TEmailToJson(Source: TEmail): string;
    function TEmailFromJsonValue(Source: TJSONValue): TEmail;
    function TEmailFromJson(Source: string): TEmail;
    function TDistribuicaoNfeDocumentoToJsonValue(Source: TDistribuicaoNfeDocumento): TJSONValue;
    function TDistribuicaoNfeDocumentoToJson(Source: TDistribuicaoNfeDocumento): string;
    function TDistribuicaoNfeDocumentoFromJsonValue(Source: TJSONValue): TDistribuicaoNfeDocumento;
    function TDistribuicaoNfeDocumentoFromJson(Source: string): TDistribuicaoNfeDocumento;
    function TDistribuicaoNfeDocumentoListToJsonValue(Source: TDistribuicaoNfeDocumentoList): TJSONValue;
    function TDistribuicaoNfeDocumentoListToJson(Source: TDistribuicaoNfeDocumentoList): string;
    function TDistribuicaoNfeDocumentoListFromJsonValue(Source: TJSONValue): TDistribuicaoNfeDocumentoList;
    function TDistribuicaoNfeDocumentoListFromJson(Source: string): TDistribuicaoNfeDocumentoList;
    function TDistribuicaoNfeToJsonValue(Source: TDistribuicaoNfe): TJSONValue;
    function TDistribuicaoNfeToJson(Source: TDistribuicaoNfe): string;
    function TDistribuicaoNfeFromJsonValue(Source: TJSONValue): TDistribuicaoNfe;
    function TDistribuicaoNfeFromJson(Source: string): TDistribuicaoNfe;
    function TDistribuicaoNfeListToJsonValue(Source: TDistribuicaoNfeList): TJSONValue;
    function TDistribuicaoNfeListToJson(Source: TDistribuicaoNfeList): string;
    function TDistribuicaoNfeListFromJsonValue(Source: TJSONValue): TDistribuicaoNfeList;
    function TDistribuicaoNfeListFromJson(Source: string): TDistribuicaoNfeList;
    function TDistribuicaoNfeListagemToJsonValue(Source: TDistribuicaoNfeListagem): TJSONValue;
    function TDistribuicaoNfeListagemToJson(Source: TDistribuicaoNfeListagem): string;
    function TDistribuicaoNfeListagemFromJsonValue(Source: TJSONValue): TDistribuicaoNfeListagem;
    function TDistribuicaoNfeListagemFromJson(Source: string): TDistribuicaoNfeListagem;
    function TDistribuicaoNfePedidoToJsonValue(Source: TDistribuicaoNfePedido): TJSONValue;
    function TDistribuicaoNfePedidoToJson(Source: TDistribuicaoNfePedido): string;
    function TDistribuicaoNfePedidoFromJsonValue(Source: TJSONValue): TDistribuicaoNfePedido;
    function TDistribuicaoNfePedidoFromJson(Source: string): TDistribuicaoNfePedido;
    function TDistribuicaoNfeDocumentoListagemToJsonValue(Source: TDistribuicaoNfeDocumentoListagem): TJSONValue;
    function TDistribuicaoNfeDocumentoListagemToJson(Source: TDistribuicaoNfeDocumentoListagem): string;
    function TDistribuicaoNfeDocumentoListagemFromJsonValue(Source: TJSONValue): TDistribuicaoNfeDocumentoListagem;
    function TDistribuicaoNfeDocumentoListagemFromJson(Source: string): TDistribuicaoNfeDocumentoListagem;
    function TDistribuicaoNfeNotaToJsonValue(Source: TDistribuicaoNfeNota): TJSONValue;
    function TDistribuicaoNfeNotaToJson(Source: TDistribuicaoNfeNota): string;
    function TDistribuicaoNfeNotaFromJsonValue(Source: TJSONValue): TDistribuicaoNfeNota;
    function TDistribuicaoNfeNotaFromJson(Source: string): TDistribuicaoNfeNota;
    function TDistribuicaoNfeNotaListToJsonValue(Source: TDistribuicaoNfeNotaList): TJSONValue;
    function TDistribuicaoNfeNotaListToJson(Source: TDistribuicaoNfeNotaList): string;
    function TDistribuicaoNfeNotaListFromJsonValue(Source: TJSONValue): TDistribuicaoNfeNotaList;
    function TDistribuicaoNfeNotaListFromJson(Source: string): TDistribuicaoNfeNotaList;
    function TDistribuicaoNfeNotaListagemToJsonValue(Source: TDistribuicaoNfeNotaListagem): TJSONValue;
    function TDistribuicaoNfeNotaListagemToJson(Source: TDistribuicaoNfeNotaListagem): string;
    function TDistribuicaoNfeNotaListagemFromJsonValue(Source: TJSONValue): TDistribuicaoNfeNotaListagem;
    function TDistribuicaoNfeNotaListagemFromJson(Source: string): TDistribuicaoNfeNotaListagem;
    function TDistribuicaoNfeEventoToJsonValue(Source: TDistribuicaoNfeEvento): TJSONValue;
    function TDistribuicaoNfeEventoToJson(Source: TDistribuicaoNfeEvento): string;
    function TDistribuicaoNfeEventoFromJsonValue(Source: TJSONValue): TDistribuicaoNfeEvento;
    function TDistribuicaoNfeEventoFromJson(Source: string): TDistribuicaoNfeEvento;
    function TDistribuicaoNfeEventoListToJsonValue(Source: TDistribuicaoNfeEventoList): TJSONValue;
    function TDistribuicaoNfeEventoListToJson(Source: TDistribuicaoNfeEventoList): string;
    function TDistribuicaoNfeEventoListFromJsonValue(Source: TJSONValue): TDistribuicaoNfeEventoList;
    function TDistribuicaoNfeEventoListFromJson(Source: string): TDistribuicaoNfeEventoList;
    function TManifestacaoNfeListagemToJsonValue(Source: TManifestacaoNfeListagem): TJSONValue;
    function TManifestacaoNfeListagemToJson(Source: TManifestacaoNfeListagem): string;
    function TManifestacaoNfeListagemFromJsonValue(Source: TJSONValue): TManifestacaoNfeListagem;
    function TManifestacaoNfeListagemFromJson(Source: string): TManifestacaoNfeListagem;
    function TDistribuicaoNfePedidoManifestacaoToJsonValue(Source: TDistribuicaoNfePedidoManifestacao): TJSONValue;
    function TDistribuicaoNfePedidoManifestacaoToJson(Source: TDistribuicaoNfePedidoManifestacao): string;
    function TDistribuicaoNfePedidoManifestacaoFromJsonValue(Source: TJSONValue): TDistribuicaoNfePedidoManifestacao;
    function TDistribuicaoNfePedidoManifestacaoFromJson(Source: string): TDistribuicaoNfePedidoManifestacao;
    function TNfcomSefazIdeToJsonValue(Source: TNfcomSefazIde): TJSONValue;
    function TNfcomSefazIdeToJson(Source: TNfcomSefazIde): string;
    function TNfcomSefazIdeFromJsonValue(Source: TJSONValue): TNfcomSefazIde;
    function TNfcomSefazIdeFromJson(Source: string): TNfcomSefazIde;
    function TNfcomSefazEndeEmiToJsonValue(Source: TNfcomSefazEndeEmi): TJSONValue;
    function TNfcomSefazEndeEmiToJson(Source: TNfcomSefazEndeEmi): string;
    function TNfcomSefazEndeEmiFromJsonValue(Source: TJSONValue): TNfcomSefazEndeEmi;
    function TNfcomSefazEndeEmiFromJson(Source: string): TNfcomSefazEndeEmi;
    function TNfcomSefazEmitToJsonValue(Source: TNfcomSefazEmit): TJSONValue;
    function TNfcomSefazEmitToJson(Source: TNfcomSefazEmit): string;
    function TNfcomSefazEmitFromJsonValue(Source: TJSONValue): TNfcomSefazEmit;
    function TNfcomSefazEmitFromJson(Source: string): TNfcomSefazEmit;
    function TNfcomSefazEndeDestToJsonValue(Source: TNfcomSefazEndeDest): TJSONValue;
    function TNfcomSefazEndeDestToJson(Source: TNfcomSefazEndeDest): string;
    function TNfcomSefazEndeDestFromJsonValue(Source: TJSONValue): TNfcomSefazEndeDest;
    function TNfcomSefazEndeDestFromJson(Source: string): TNfcomSefazEndeDest;
    function TNfcomSefazDestToJsonValue(Source: TNfcomSefazDest): TJSONValue;
    function TNfcomSefazDestToJson(Source: TNfcomSefazDest): string;
    function TNfcomSefazDestFromJsonValue(Source: TJSONValue): TNfcomSefazDest;
    function TNfcomSefazDestFromJson(Source: string): TNfcomSefazDest;
    function TNfcomSefazAssinanteToJsonValue(Source: TNfcomSefazAssinante): TJSONValue;
    function TNfcomSefazAssinanteToJson(Source: TNfcomSefazAssinante): string;
    function TNfcomSefazAssinanteFromJsonValue(Source: TJSONValue): TNfcomSefazAssinante;
    function TNfcomSefazAssinanteFromJson(Source: string): TNfcomSefazAssinante;
    function TNfcomSefazGNFToJsonValue(Source: TNfcomSefazGNF): TJSONValue;
    function TNfcomSefazGNFToJson(Source: TNfcomSefazGNF): string;
    function TNfcomSefazGNFFromJsonValue(Source: TJSONValue): TNfcomSefazGNF;
    function TNfcomSefazGNFFromJson(Source: string): TNfcomSefazGNF;
    function TNfcomSefazGSubToJsonValue(Source: TNfcomSefazGSub): TJSONValue;
    function TNfcomSefazGSubToJson(Source: TNfcomSefazGSub): string;
    function TNfcomSefazGSubFromJsonValue(Source: TJSONValue): TNfcomSefazGSub;
    function TNfcomSefazGSubFromJson(Source: string): TNfcomSefazGSub;
    function TNfcomSefazGCofatGNFToJsonValue(Source: TNfcomSefazGCofatGNF): TJSONValue;
    function TNfcomSefazGCofatGNFToJson(Source: TNfcomSefazGCofatGNF): string;
    function TNfcomSefazGCofatGNFFromJsonValue(Source: TJSONValue): TNfcomSefazGCofatGNF;
    function TNfcomSefazGCofatGNFFromJson(Source: string): TNfcomSefazGCofatGNF;
    function TNfcomSefazGCofatToJsonValue(Source: TNfcomSefazGCofat): TJSONValue;
    function TNfcomSefazGCofatToJson(Source: TNfcomSefazGCofat): string;
    function TNfcomSefazGCofatFromJsonValue(Source: TJSONValue): TNfcomSefazGCofat;
    function TNfcomSefazGCofatFromJson(Source: string): TNfcomSefazGCofat;
    function TNfcomSefazProdToJsonValue(Source: TNfcomSefazProd): TJSONValue;
    function TNfcomSefazProdToJson(Source: TNfcomSefazProd): string;
    function TNfcomSefazProdFromJsonValue(Source: TJSONValue): TNfcomSefazProd;
    function TNfcomSefazProdFromJson(Source: string): TNfcomSefazProd;
    function TNfcomSefazICMS00ToJsonValue(Source: TNfcomSefazICMS00): TJSONValue;
    function TNfcomSefazICMS00ToJson(Source: TNfcomSefazICMS00): string;
    function TNfcomSefazICMS00FromJsonValue(Source: TJSONValue): TNfcomSefazICMS00;
    function TNfcomSefazICMS00FromJson(Source: string): TNfcomSefazICMS00;
    function TNfcomSefazICMS20ToJsonValue(Source: TNfcomSefazICMS20): TJSONValue;
    function TNfcomSefazICMS20ToJson(Source: TNfcomSefazICMS20): string;
    function TNfcomSefazICMS20FromJsonValue(Source: TJSONValue): TNfcomSefazICMS20;
    function TNfcomSefazICMS20FromJson(Source: string): TNfcomSefazICMS20;
    function TNfcomSefazICMS40ToJsonValue(Source: TNfcomSefazICMS40): TJSONValue;
    function TNfcomSefazICMS40ToJson(Source: TNfcomSefazICMS40): string;
    function TNfcomSefazICMS40FromJsonValue(Source: TJSONValue): TNfcomSefazICMS40;
    function TNfcomSefazICMS40FromJson(Source: string): TNfcomSefazICMS40;
    function TNfcomSefazICMS51ToJsonValue(Source: TNfcomSefazICMS51): TJSONValue;
    function TNfcomSefazICMS51ToJson(Source: TNfcomSefazICMS51): string;
    function TNfcomSefazICMS51FromJsonValue(Source: TJSONValue): TNfcomSefazICMS51;
    function TNfcomSefazICMS51FromJson(Source: string): TNfcomSefazICMS51;
    function TNfcomSefazICMS90ToJsonValue(Source: TNfcomSefazICMS90): TJSONValue;
    function TNfcomSefazICMS90ToJson(Source: TNfcomSefazICMS90): string;
    function TNfcomSefazICMS90FromJsonValue(Source: TJSONValue): TNfcomSefazICMS90;
    function TNfcomSefazICMS90FromJson(Source: string): TNfcomSefazICMS90;
    function TNfcomSefazICMSSNToJsonValue(Source: TNfcomSefazICMSSN): TJSONValue;
    function TNfcomSefazICMSSNToJson(Source: TNfcomSefazICMSSN): string;
    function TNfcomSefazICMSSNFromJsonValue(Source: TJSONValue): TNfcomSefazICMSSN;
    function TNfcomSefazICMSSNFromJson(Source: string): TNfcomSefazICMSSN;
    function TNfcomSefazICMSUFDestToJsonValue(Source: TNfcomSefazICMSUFDest): TJSONValue;
    function TNfcomSefazICMSUFDestToJson(Source: TNfcomSefazICMSUFDest): string;
    function TNfcomSefazICMSUFDestFromJsonValue(Source: TJSONValue): TNfcomSefazICMSUFDest;
    function TNfcomSefazICMSUFDestFromJson(Source: string): TNfcomSefazICMSUFDest;
    function TNfcomSefazICMSUFDestListToJsonValue(Source: TNfcomSefazICMSUFDestList): TJSONValue;
    function TNfcomSefazICMSUFDestListToJson(Source: TNfcomSefazICMSUFDestList): string;
    function TNfcomSefazICMSUFDestListFromJsonValue(Source: TJSONValue): TNfcomSefazICMSUFDestList;
    function TNfcomSefazICMSUFDestListFromJson(Source: string): TNfcomSefazICMSUFDestList;
    function TNfcomSefazPISToJsonValue(Source: TNfcomSefazPIS): TJSONValue;
    function TNfcomSefazPISToJson(Source: TNfcomSefazPIS): string;
    function TNfcomSefazPISFromJsonValue(Source: TJSONValue): TNfcomSefazPIS;
    function TNfcomSefazPISFromJson(Source: string): TNfcomSefazPIS;
    function TNfcomSefazCOFINSToJsonValue(Source: TNfcomSefazCOFINS): TJSONValue;
    function TNfcomSefazCOFINSToJson(Source: TNfcomSefazCOFINS): string;
    function TNfcomSefazCOFINSFromJsonValue(Source: TJSONValue): TNfcomSefazCOFINS;
    function TNfcomSefazCOFINSFromJson(Source: string): TNfcomSefazCOFINS;
    function TNfcomSefazFUSTToJsonValue(Source: TNfcomSefazFUST): TJSONValue;
    function TNfcomSefazFUSTToJson(Source: TNfcomSefazFUST): string;
    function TNfcomSefazFUSTFromJsonValue(Source: TJSONValue): TNfcomSefazFUST;
    function TNfcomSefazFUSTFromJson(Source: string): TNfcomSefazFUST;
    function TNfcomSefazFUNTTELToJsonValue(Source: TNfcomSefazFUNTTEL): TJSONValue;
    function TNfcomSefazFUNTTELToJson(Source: TNfcomSefazFUNTTEL): string;
    function TNfcomSefazFUNTTELFromJsonValue(Source: TJSONValue): TNfcomSefazFUNTTEL;
    function TNfcomSefazFUNTTELFromJson(Source: string): TNfcomSefazFUNTTEL;
    function TNfcomSefazRetTribToJsonValue(Source: TNfcomSefazRetTrib): TJSONValue;
    function TNfcomSefazRetTribToJson(Source: TNfcomSefazRetTrib): string;
    function TNfcomSefazRetTribFromJsonValue(Source: TJSONValue): TNfcomSefazRetTrib;
    function TNfcomSefazRetTribFromJson(Source: string): TNfcomSefazRetTrib;
    function TNfcomSefazImpostoToJsonValue(Source: TNfcomSefazImposto): TJSONValue;
    function TNfcomSefazImpostoToJson(Source: TNfcomSefazImposto): string;
    function TNfcomSefazImpostoFromJsonValue(Source: TJSONValue): TNfcomSefazImposto;
    function TNfcomSefazImpostoFromJson(Source: string): TNfcomSefazImposto;
    function TNfcomSefazGProcToJsonValue(Source: TNfcomSefazGProc): TJSONValue;
    function TNfcomSefazGProcToJson(Source: TNfcomSefazGProc): string;
    function TNfcomSefazGProcFromJsonValue(Source: TJSONValue): TNfcomSefazGProc;
    function TNfcomSefazGProcFromJson(Source: string): TNfcomSefazGProc;
    function TNfcomSefazGProcListToJsonValue(Source: TNfcomSefazGProcList): TJSONValue;
    function TNfcomSefazGProcListToJson(Source: TNfcomSefazGProcList): string;
    function TNfcomSefazGProcListFromJsonValue(Source: TJSONValue): TNfcomSefazGProcList;
    function TNfcomSefazGProcListFromJson(Source: string): TNfcomSefazGProcList;
    function TNfcomSefazGProcRefToJsonValue(Source: TNfcomSefazGProcRef): TJSONValue;
    function TNfcomSefazGProcRefToJson(Source: TNfcomSefazGProcRef): string;
    function TNfcomSefazGProcRefFromJsonValue(Source: TJSONValue): TNfcomSefazGProcRef;
    function TNfcomSefazGProcRefFromJson(Source: string): TNfcomSefazGProcRef;
    function TNfcomSefazGRessarcToJsonValue(Source: TNfcomSefazGRessarc): TJSONValue;
    function TNfcomSefazGRessarcToJson(Source: TNfcomSefazGRessarc): string;
    function TNfcomSefazGRessarcFromJsonValue(Source: TJSONValue): TNfcomSefazGRessarc;
    function TNfcomSefazGRessarcFromJson(Source: string): TNfcomSefazGRessarc;
    function TNfcomSefazDetToJsonValue(Source: TNfcomSefazDet): TJSONValue;
    function TNfcomSefazDetToJson(Source: TNfcomSefazDet): string;
    function TNfcomSefazDetFromJsonValue(Source: TJSONValue): TNfcomSefazDet;
    function TNfcomSefazDetFromJson(Source: string): TNfcomSefazDet;
    function TNfcomSefazDetListToJsonValue(Source: TNfcomSefazDetList): TJSONValue;
    function TNfcomSefazDetListToJson(Source: TNfcomSefazDetList): string;
    function TNfcomSefazDetListFromJsonValue(Source: TJSONValue): TNfcomSefazDetList;
    function TNfcomSefazDetListFromJson(Source: string): TNfcomSefazDetList;
    function TNfcomSefazICMSTotToJsonValue(Source: TNfcomSefazICMSTot): TJSONValue;
    function TNfcomSefazICMSTotToJson(Source: TNfcomSefazICMSTot): string;
    function TNfcomSefazICMSTotFromJsonValue(Source: TJSONValue): TNfcomSefazICMSTot;
    function TNfcomSefazICMSTotFromJson(Source: string): TNfcomSefazICMSTot;
    function TNfcomSefazVRetTribTotToJsonValue(Source: TNfcomSefazVRetTribTot): TJSONValue;
    function TNfcomSefazVRetTribTotToJson(Source: TNfcomSefazVRetTribTot): string;
    function TNfcomSefazVRetTribTotFromJsonValue(Source: TJSONValue): TNfcomSefazVRetTribTot;
    function TNfcomSefazVRetTribTotFromJson(Source: string): TNfcomSefazVRetTribTot;
    function TNfcomSefazTotalToJsonValue(Source: TNfcomSefazTotal): TJSONValue;
    function TNfcomSefazTotalToJson(Source: TNfcomSefazTotal): string;
    function TNfcomSefazTotalFromJsonValue(Source: TJSONValue): TNfcomSefazTotal;
    function TNfcomSefazTotalFromJson(Source: string): TNfcomSefazTotal;
    function TNfcomSefazGFidelidadeToJsonValue(Source: TNfcomSefazGFidelidade): TJSONValue;
    function TNfcomSefazGFidelidadeToJson(Source: TNfcomSefazGFidelidade): string;
    function TNfcomSefazGFidelidadeFromJsonValue(Source: TJSONValue): TNfcomSefazGFidelidade;
    function TNfcomSefazGFidelidadeFromJson(Source: string): TNfcomSefazGFidelidade;
    function TNfcomSefazGPIXToJsonValue(Source: TNfcomSefazGPIX): TJSONValue;
    function TNfcomSefazGPIXToJson(Source: TNfcomSefazGPIX): string;
    function TNfcomSefazGPIXFromJsonValue(Source: TJSONValue): TNfcomSefazGPIX;
    function TNfcomSefazGPIXFromJson(Source: string): TNfcomSefazGPIX;
    function TNfcomSefazGFatToJsonValue(Source: TNfcomSefazGFat): TJSONValue;
    function TNfcomSefazGFatToJson(Source: TNfcomSefazGFat): string;
    function TNfcomSefazGFatFromJsonValue(Source: TJSONValue): TNfcomSefazGFat;
    function TNfcomSefazGFatFromJson(Source: string): TNfcomSefazGFat;
    function TNfcomSefazGFatCentralToJsonValue(Source: TNfcomSefazGFatCentral): TJSONValue;
    function TNfcomSefazGFatCentralToJson(Source: TNfcomSefazGFatCentral): string;
    function TNfcomSefazGFatCentralFromJsonValue(Source: TJSONValue): TNfcomSefazGFatCentral;
    function TNfcomSefazGFatCentralFromJson(Source: string): TNfcomSefazGFatCentral;
    function TNfcomSefazAutXMLToJsonValue(Source: TNfcomSefazAutXML): TJSONValue;
    function TNfcomSefazAutXMLToJson(Source: TNfcomSefazAutXML): string;
    function TNfcomSefazAutXMLFromJsonValue(Source: TJSONValue): TNfcomSefazAutXML;
    function TNfcomSefazAutXMLFromJson(Source: string): TNfcomSefazAutXML;
    function TNfcomSefazAutXMLListToJsonValue(Source: TNfcomSefazAutXMLList): TJSONValue;
    function TNfcomSefazAutXMLListToJson(Source: TNfcomSefazAutXMLList): string;
    function TNfcomSefazAutXMLListFromJsonValue(Source: TJSONValue): TNfcomSefazAutXMLList;
    function TNfcomSefazAutXMLListFromJson(Source: string): TNfcomSefazAutXMLList;
    function TNfcomSefazInfAdicToJsonValue(Source: TNfcomSefazInfAdic): TJSONValue;
    function TNfcomSefazInfAdicToJson(Source: TNfcomSefazInfAdic): string;
    function TNfcomSefazInfAdicFromJsonValue(Source: TJSONValue): TNfcomSefazInfAdic;
    function TNfcomSefazInfAdicFromJson(Source: string): TNfcomSefazInfAdic;
    function TNfcomSefazRespTecToJsonValue(Source: TNfcomSefazRespTec): TJSONValue;
    function TNfcomSefazRespTecToJson(Source: TNfcomSefazRespTec): string;
    function TNfcomSefazRespTecFromJsonValue(Source: TJSONValue): TNfcomSefazRespTec;
    function TNfcomSefazRespTecFromJson(Source: string): TNfcomSefazRespTec;
    function TNfcomSefazInfNFComToJsonValue(Source: TNfcomSefazInfNFCom): TJSONValue;
    function TNfcomSefazInfNFComToJson(Source: TNfcomSefazInfNFCom): string;
    function TNfcomSefazInfNFComFromJsonValue(Source: TJSONValue): TNfcomSefazInfNFCom;
    function TNfcomSefazInfNFComFromJson(Source: string): TNfcomSefazInfNFCom;
    function TNfcomPedidoEmissaoToJsonValue(Source: TNfcomPedidoEmissao): TJSONValue;
    function TNfcomPedidoEmissaoToJson(Source: TNfcomPedidoEmissao): string;
    function TNfcomPedidoEmissaoFromJsonValue(Source: TJSONValue): TNfcomPedidoEmissao;
    function TNfcomPedidoEmissaoFromJson(Source: string): TNfcomPedidoEmissao;
    function TNfcomPedidoCancelamentoToJsonValue(Source: TNfcomPedidoCancelamento): TJSONValue;
    function TNfcomPedidoCancelamentoToJson(Source: TNfcomPedidoCancelamento): string;
    function TNfcomPedidoCancelamentoFromJsonValue(Source: TJSONValue): TNfcomPedidoCancelamento;
    function TNfcomPedidoCancelamentoFromJson(Source: string): TNfcomPedidoCancelamento;
    function TContaCotaToJsonValue(Source: TContaCota): TJSONValue;
    function TContaCotaToJson(Source: TContaCota): string;
    function TContaCotaFromJsonValue(Source: TJSONValue): TContaCota;
    function TContaCotaFromJson(Source: string): TContaCota;
    function TContaCotaListToJsonValue(Source: TContaCotaList): TJSONValue;
    function TContaCotaListToJson(Source: TContaCotaList): string;
    function TContaCotaListFromJsonValue(Source: TJSONValue): TContaCotaList;
    function TContaCotaListFromJson(Source: string): TContaCotaList;
    function TContaCotaListagemToJsonValue(Source: TContaCotaListagem): TJSONValue;
    function TContaCotaListagemToJson(Source: TContaCotaListagem): string;
    function TContaCotaListagemFromJsonValue(Source: TJSONValue): TContaCotaListagem;
    function TContaCotaListagemFromJson(Source: string): TContaCotaListagem;
    function TCteSefazToma3ToJsonValue(Source: TCteSefazToma3): TJSONValue;
    function TCteSefazToma3ToJson(Source: TCteSefazToma3): string;
    function TCteSefazToma3FromJsonValue(Source: TJSONValue): TCteSefazToma3;
    function TCteSefazToma3FromJson(Source: string): TCteSefazToma3;
    function TCteSefazEnderecoToJsonValue(Source: TCteSefazEndereco): TJSONValue;
    function TCteSefazEnderecoToJson(Source: TCteSefazEndereco): string;
    function TCteSefazEnderecoFromJsonValue(Source: TJSONValue): TCteSefazEndereco;
    function TCteSefazEnderecoFromJson(Source: string): TCteSefazEndereco;
    function TCteSefazToma4ToJsonValue(Source: TCteSefazToma4): TJSONValue;
    function TCteSefazToma4ToJson(Source: TCteSefazToma4): string;
    function TCteSefazToma4FromJsonValue(Source: TJSONValue): TCteSefazToma4;
    function TCteSefazToma4FromJson(Source: string): TCteSefazToma4;
    function TCteSefazIdeToJsonValue(Source: TCteSefazIde): TJSONValue;
    function TCteSefazIdeToJson(Source: TCteSefazIde): string;
    function TCteSefazIdeFromJsonValue(Source: TJSONValue): TCteSefazIde;
    function TCteSefazIdeFromJson(Source: string): TCteSefazIde;
    function TCteSefazPassToJsonValue(Source: TCteSefazPass): TJSONValue;
    function TCteSefazPassToJson(Source: TCteSefazPass): string;
    function TCteSefazPassFromJsonValue(Source: TJSONValue): TCteSefazPass;
    function TCteSefazPassFromJson(Source: string): TCteSefazPass;
    function TCteSefazPassListToJsonValue(Source: TCteSefazPassList): TJSONValue;
    function TCteSefazPassListToJson(Source: TCteSefazPassList): string;
    function TCteSefazPassListFromJsonValue(Source: TJSONValue): TCteSefazPassList;
    function TCteSefazPassListFromJson(Source: string): TCteSefazPassList;
    function TCteSefazFluxoToJsonValue(Source: TCteSefazFluxo): TJSONValue;
    function TCteSefazFluxoToJson(Source: TCteSefazFluxo): string;
    function TCteSefazFluxoFromJsonValue(Source: TJSONValue): TCteSefazFluxo;
    function TCteSefazFluxoFromJson(Source: string): TCteSefazFluxo;
    function TCteSefazSemDataToJsonValue(Source: TCteSefazSemData): TJSONValue;
    function TCteSefazSemDataToJson(Source: TCteSefazSemData): string;
    function TCteSefazSemDataFromJsonValue(Source: TJSONValue): TCteSefazSemData;
    function TCteSefazSemDataFromJson(Source: string): TCteSefazSemData;
    function TCteSefazComDataToJsonValue(Source: TCteSefazComData): TJSONValue;
    function TCteSefazComDataToJson(Source: TCteSefazComData): string;
    function TCteSefazComDataFromJsonValue(Source: TJSONValue): TCteSefazComData;
    function TCteSefazComDataFromJson(Source: string): TCteSefazComData;
    function TCteSefazNoPeriodoToJsonValue(Source: TCteSefazNoPeriodo): TJSONValue;
    function TCteSefazNoPeriodoToJson(Source: TCteSefazNoPeriodo): string;
    function TCteSefazNoPeriodoFromJsonValue(Source: TJSONValue): TCteSefazNoPeriodo;
    function TCteSefazNoPeriodoFromJson(Source: string): TCteSefazNoPeriodo;
    function TCteSefazSemHoraToJsonValue(Source: TCteSefazSemHora): TJSONValue;
    function TCteSefazSemHoraToJson(Source: TCteSefazSemHora): string;
    function TCteSefazSemHoraFromJsonValue(Source: TJSONValue): TCteSefazSemHora;
    function TCteSefazSemHoraFromJson(Source: string): TCteSefazSemHora;
    function TCteSefazComHoraToJsonValue(Source: TCteSefazComHora): TJSONValue;
    function TCteSefazComHoraToJson(Source: TCteSefazComHora): string;
    function TCteSefazComHoraFromJsonValue(Source: TJSONValue): TCteSefazComHora;
    function TCteSefazComHoraFromJson(Source: string): TCteSefazComHora;
    function TCteSefazNoInterToJsonValue(Source: TCteSefazNoInter): TJSONValue;
    function TCteSefazNoInterToJson(Source: TCteSefazNoInter): string;
    function TCteSefazNoInterFromJsonValue(Source: TJSONValue): TCteSefazNoInter;
    function TCteSefazNoInterFromJson(Source: string): TCteSefazNoInter;
    function TCteSefazEntregaToJsonValue(Source: TCteSefazEntrega): TJSONValue;
    function TCteSefazEntregaToJson(Source: TCteSefazEntrega): string;
    function TCteSefazEntregaFromJsonValue(Source: TJSONValue): TCteSefazEntrega;
    function TCteSefazEntregaFromJson(Source: string): TCteSefazEntrega;
    function TCteSefazObsContToJsonValue(Source: TCteSefazObsCont): TJSONValue;
    function TCteSefazObsContToJson(Source: TCteSefazObsCont): string;
    function TCteSefazObsContFromJsonValue(Source: TJSONValue): TCteSefazObsCont;
    function TCteSefazObsContFromJson(Source: string): TCteSefazObsCont;
    function TCteSefazObsContListToJsonValue(Source: TCteSefazObsContList): TJSONValue;
    function TCteSefazObsContListToJson(Source: TCteSefazObsContList): string;
    function TCteSefazObsContListFromJsonValue(Source: TJSONValue): TCteSefazObsContList;
    function TCteSefazObsContListFromJson(Source: string): TCteSefazObsContList;
    function TCteSefazObsFiscoToJsonValue(Source: TCteSefazObsFisco): TJSONValue;
    function TCteSefazObsFiscoToJson(Source: TCteSefazObsFisco): string;
    function TCteSefazObsFiscoFromJsonValue(Source: TJSONValue): TCteSefazObsFisco;
    function TCteSefazObsFiscoFromJson(Source: string): TCteSefazObsFisco;
    function TCteSefazObsFiscoListToJsonValue(Source: TCteSefazObsFiscoList): TJSONValue;
    function TCteSefazObsFiscoListToJson(Source: TCteSefazObsFiscoList): string;
    function TCteSefazObsFiscoListFromJsonValue(Source: TJSONValue): TCteSefazObsFiscoList;
    function TCteSefazObsFiscoListFromJson(Source: string): TCteSefazObsFiscoList;
    function TCteSefazComplToJsonValue(Source: TCteSefazCompl): TJSONValue;
    function TCteSefazComplToJson(Source: TCteSefazCompl): string;
    function TCteSefazComplFromJsonValue(Source: TJSONValue): TCteSefazCompl;
    function TCteSefazComplFromJson(Source: string): TCteSefazCompl;
    function TCteSefazEndeEmiToJsonValue(Source: TCteSefazEndeEmi): TJSONValue;
    function TCteSefazEndeEmiToJson(Source: TCteSefazEndeEmi): string;
    function TCteSefazEndeEmiFromJsonValue(Source: TJSONValue): TCteSefazEndeEmi;
    function TCteSefazEndeEmiFromJson(Source: string): TCteSefazEndeEmi;
    function TCteSefazEmitToJsonValue(Source: TCteSefazEmit): TJSONValue;
    function TCteSefazEmitToJson(Source: TCteSefazEmit): string;
    function TCteSefazEmitFromJsonValue(Source: TJSONValue): TCteSefazEmit;
    function TCteSefazEmitFromJson(Source: string): TCteSefazEmit;
    function TCteSefazRemToJsonValue(Source: TCteSefazRem): TJSONValue;
    function TCteSefazRemToJson(Source: TCteSefazRem): string;
    function TCteSefazRemFromJsonValue(Source: TJSONValue): TCteSefazRem;
    function TCteSefazRemFromJson(Source: string): TCteSefazRem;
    function TCteSefazExpedToJsonValue(Source: TCteSefazExped): TJSONValue;
    function TCteSefazExpedToJson(Source: TCteSefazExped): string;
    function TCteSefazExpedFromJsonValue(Source: TJSONValue): TCteSefazExped;
    function TCteSefazExpedFromJson(Source: string): TCteSefazExped;
    function TCteSefazRecebToJsonValue(Source: TCteSefazReceb): TJSONValue;
    function TCteSefazRecebToJson(Source: TCteSefazReceb): string;
    function TCteSefazRecebFromJsonValue(Source: TJSONValue): TCteSefazReceb;
    function TCteSefazRecebFromJson(Source: string): TCteSefazReceb;
    function TCteSefazDestToJsonValue(Source: TCteSefazDest): TJSONValue;
    function TCteSefazDestToJson(Source: TCteSefazDest): string;
    function TCteSefazDestFromJsonValue(Source: TJSONValue): TCteSefazDest;
    function TCteSefazDestFromJson(Source: string): TCteSefazDest;
    function TCteSefazCompToJsonValue(Source: TCteSefazComp): TJSONValue;
    function TCteSefazCompToJson(Source: TCteSefazComp): string;
    function TCteSefazCompFromJsonValue(Source: TJSONValue): TCteSefazComp;
    function TCteSefazCompFromJson(Source: string): TCteSefazComp;
    function TCteSefazCompListToJsonValue(Source: TCteSefazCompList): TJSONValue;
    function TCteSefazCompListToJson(Source: TCteSefazCompList): string;
    function TCteSefazCompListFromJsonValue(Source: TJSONValue): TCteSefazCompList;
    function TCteSefazCompListFromJson(Source: string): TCteSefazCompList;
    function TCteSefazVPrestToJsonValue(Source: TCteSefazVPrest): TJSONValue;
    function TCteSefazVPrestToJson(Source: TCteSefazVPrest): string;
    function TCteSefazVPrestFromJsonValue(Source: TJSONValue): TCteSefazVPrest;
    function TCteSefazVPrestFromJson(Source: string): TCteSefazVPrest;
    function TCteSefazICMS00ToJsonValue(Source: TCteSefazICMS00): TJSONValue;
    function TCteSefazICMS00ToJson(Source: TCteSefazICMS00): string;
    function TCteSefazICMS00FromJsonValue(Source: TJSONValue): TCteSefazICMS00;
    function TCteSefazICMS00FromJson(Source: string): TCteSefazICMS00;
    function TCteSefazICMS20ToJsonValue(Source: TCteSefazICMS20): TJSONValue;
    function TCteSefazICMS20ToJson(Source: TCteSefazICMS20): string;
    function TCteSefazICMS20FromJsonValue(Source: TJSONValue): TCteSefazICMS20;
    function TCteSefazICMS20FromJson(Source: string): TCteSefazICMS20;
    function TCteSefazICMS45ToJsonValue(Source: TCteSefazICMS45): TJSONValue;
    function TCteSefazICMS45ToJson(Source: TCteSefazICMS45): string;
    function TCteSefazICMS45FromJsonValue(Source: TJSONValue): TCteSefazICMS45;
    function TCteSefazICMS45FromJson(Source: string): TCteSefazICMS45;
    function TCteSefazICMS60ToJsonValue(Source: TCteSefazICMS60): TJSONValue;
    function TCteSefazICMS60ToJson(Source: TCteSefazICMS60): string;
    function TCteSefazICMS60FromJsonValue(Source: TJSONValue): TCteSefazICMS60;
    function TCteSefazICMS60FromJson(Source: string): TCteSefazICMS60;
    function TCteSefazICMS90ToJsonValue(Source: TCteSefazICMS90): TJSONValue;
    function TCteSefazICMS90ToJson(Source: TCteSefazICMS90): string;
    function TCteSefazICMS90FromJsonValue(Source: TJSONValue): TCteSefazICMS90;
    function TCteSefazICMS90FromJson(Source: string): TCteSefazICMS90;
    function TCteSefazICMSOutraUFToJsonValue(Source: TCteSefazICMSOutraUF): TJSONValue;
    function TCteSefazICMSOutraUFToJson(Source: TCteSefazICMSOutraUF): string;
    function TCteSefazICMSOutraUFFromJsonValue(Source: TJSONValue): TCteSefazICMSOutraUF;
    function TCteSefazICMSOutraUFFromJson(Source: string): TCteSefazICMSOutraUF;
    function TCteSefazICMSSNToJsonValue(Source: TCteSefazICMSSN): TJSONValue;
    function TCteSefazICMSSNToJson(Source: TCteSefazICMSSN): string;
    function TCteSefazICMSSNFromJsonValue(Source: TJSONValue): TCteSefazICMSSN;
    function TCteSefazICMSSNFromJson(Source: string): TCteSefazICMSSN;
    function TCteSefazImpToJsonValue(Source: TCteSefazImp): TJSONValue;
    function TCteSefazImpToJson(Source: TCteSefazImp): string;
    function TCteSefazImpFromJsonValue(Source: TJSONValue): TCteSefazImp;
    function TCteSefazImpFromJson(Source: string): TCteSefazImp;
    function TCteSefazICMSUFFimToJsonValue(Source: TCteSefazICMSUFFim): TJSONValue;
    function TCteSefazICMSUFFimToJson(Source: TCteSefazICMSUFFim): string;
    function TCteSefazICMSUFFimFromJsonValue(Source: TJSONValue): TCteSefazICMSUFFim;
    function TCteSefazICMSUFFimFromJson(Source: string): TCteSefazICMSUFFim;
    function TCteSefazInfCteImpToJsonValue(Source: TCteSefazInfCteImp): TJSONValue;
    function TCteSefazInfCteImpToJson(Source: TCteSefazInfCteImp): string;
    function TCteSefazInfCteImpFromJsonValue(Source: TJSONValue): TCteSefazInfCteImp;
    function TCteSefazInfCteImpFromJson(Source: string): TCteSefazInfCteImp;
    function TCteSefazInfQToJsonValue(Source: TCteSefazInfQ): TJSONValue;
    function TCteSefazInfQToJson(Source: TCteSefazInfQ): string;
    function TCteSefazInfQFromJsonValue(Source: TJSONValue): TCteSefazInfQ;
    function TCteSefazInfQFromJson(Source: string): TCteSefazInfQ;
    function TCteSefazInfQListToJsonValue(Source: TCteSefazInfQList): TJSONValue;
    function TCteSefazInfQListToJson(Source: TCteSefazInfQList): string;
    function TCteSefazInfQListFromJsonValue(Source: TJSONValue): TCteSefazInfQList;
    function TCteSefazInfQListFromJson(Source: string): TCteSefazInfQList;
    function TCteSefazInfCargaToJsonValue(Source: TCteSefazInfCarga): TJSONValue;
    function TCteSefazInfCargaToJson(Source: TCteSefazInfCarga): string;
    function TCteSefazInfCargaFromJsonValue(Source: TJSONValue): TCteSefazInfCarga;
    function TCteSefazInfCargaFromJson(Source: string): TCteSefazInfCarga;
    function TCteSefazLacUnidCargaToJsonValue(Source: TCteSefazLacUnidCarga): TJSONValue;
    function TCteSefazLacUnidCargaToJson(Source: TCteSefazLacUnidCarga): string;
    function TCteSefazLacUnidCargaFromJsonValue(Source: TJSONValue): TCteSefazLacUnidCarga;
    function TCteSefazLacUnidCargaFromJson(Source: string): TCteSefazLacUnidCarga;
    function TCteSefazLacUnidCargaListToJsonValue(Source: TCteSefazLacUnidCargaList): TJSONValue;
    function TCteSefazLacUnidCargaListToJson(Source: TCteSefazLacUnidCargaList): string;
    function TCteSefazLacUnidCargaListFromJsonValue(Source: TJSONValue): TCteSefazLacUnidCargaList;
    function TCteSefazLacUnidCargaListFromJson(Source: string): TCteSefazLacUnidCargaList;
    function TCteSefazUnidCargaToJsonValue(Source: TCteSefazUnidCarga): TJSONValue;
    function TCteSefazUnidCargaToJson(Source: TCteSefazUnidCarga): string;
    function TCteSefazUnidCargaFromJsonValue(Source: TJSONValue): TCteSefazUnidCarga;
    function TCteSefazUnidCargaFromJson(Source: string): TCteSefazUnidCarga;
    function TCteSefazUnidCargaListToJsonValue(Source: TCteSefazUnidCargaList): TJSONValue;
    function TCteSefazUnidCargaListToJson(Source: TCteSefazUnidCargaList): string;
    function TCteSefazUnidCargaListFromJsonValue(Source: TJSONValue): TCteSefazUnidCargaList;
    function TCteSefazUnidCargaListFromJson(Source: string): TCteSefazUnidCargaList;
    function TCteSefazLacUnidTranspToJsonValue(Source: TCteSefazLacUnidTransp): TJSONValue;
    function TCteSefazLacUnidTranspToJson(Source: TCteSefazLacUnidTransp): string;
    function TCteSefazLacUnidTranspFromJsonValue(Source: TJSONValue): TCteSefazLacUnidTransp;
    function TCteSefazLacUnidTranspFromJson(Source: string): TCteSefazLacUnidTransp;
    function TCteSefazLacUnidTranspListToJsonValue(Source: TCteSefazLacUnidTranspList): TJSONValue;
    function TCteSefazLacUnidTranspListToJson(Source: TCteSefazLacUnidTranspList): string;
    function TCteSefazLacUnidTranspListFromJsonValue(Source: TJSONValue): TCteSefazLacUnidTranspList;
    function TCteSefazLacUnidTranspListFromJson(Source: string): TCteSefazLacUnidTranspList;
    function TCteSefazUnidadeTranspToJsonValue(Source: TCteSefazUnidadeTransp): TJSONValue;
    function TCteSefazUnidadeTranspToJson(Source: TCteSefazUnidadeTransp): string;
    function TCteSefazUnidadeTranspFromJsonValue(Source: TJSONValue): TCteSefazUnidadeTransp;
    function TCteSefazUnidadeTranspFromJson(Source: string): TCteSefazUnidadeTransp;
    function TCteSefazUnidadeTranspListToJsonValue(Source: TCteSefazUnidadeTranspList): TJSONValue;
    function TCteSefazUnidadeTranspListToJson(Source: TCteSefazUnidadeTranspList): string;
    function TCteSefazUnidadeTranspListFromJsonValue(Source: TJSONValue): TCteSefazUnidadeTranspList;
    function TCteSefazUnidadeTranspListFromJson(Source: string): TCteSefazUnidadeTranspList;
    function TCteSefazInfNFToJsonValue(Source: TCteSefazInfNF): TJSONValue;
    function TCteSefazInfNFToJson(Source: TCteSefazInfNF): string;
    function TCteSefazInfNFFromJsonValue(Source: TJSONValue): TCteSefazInfNF;
    function TCteSefazInfNFFromJson(Source: string): TCteSefazInfNF;
    function TCteSefazInfNFListToJsonValue(Source: TCteSefazInfNFList): TJSONValue;
    function TCteSefazInfNFListToJson(Source: TCteSefazInfNFList): string;
    function TCteSefazInfNFListFromJsonValue(Source: TJSONValue): TCteSefazInfNFList;
    function TCteSefazInfNFListFromJson(Source: string): TCteSefazInfNFList;
    function TCteSefazInfNFeToJsonValue(Source: TCteSefazInfNFe): TJSONValue;
    function TCteSefazInfNFeToJson(Source: TCteSefazInfNFe): string;
    function TCteSefazInfNFeFromJsonValue(Source: TJSONValue): TCteSefazInfNFe;
    function TCteSefazInfNFeFromJson(Source: string): TCteSefazInfNFe;
    function TCteSefazInfNFeListToJsonValue(Source: TCteSefazInfNFeList): TJSONValue;
    function TCteSefazInfNFeListToJson(Source: TCteSefazInfNFeList): string;
    function TCteSefazInfNFeListFromJsonValue(Source: TJSONValue): TCteSefazInfNFeList;
    function TCteSefazInfNFeListFromJson(Source: string): TCteSefazInfNFeList;
    function TCteSefazInfOutrosToJsonValue(Source: TCteSefazInfOutros): TJSONValue;
    function TCteSefazInfOutrosToJson(Source: TCteSefazInfOutros): string;
    function TCteSefazInfOutrosFromJsonValue(Source: TJSONValue): TCteSefazInfOutros;
    function TCteSefazInfOutrosFromJson(Source: string): TCteSefazInfOutros;
    function TCteSefazInfOutrosListToJsonValue(Source: TCteSefazInfOutrosList): TJSONValue;
    function TCteSefazInfOutrosListToJson(Source: TCteSefazInfOutrosList): string;
    function TCteSefazInfOutrosListFromJsonValue(Source: TJSONValue): TCteSefazInfOutrosList;
    function TCteSefazInfOutrosListFromJson(Source: string): TCteSefazInfOutrosList;
    function TCteSefazInfDocToJsonValue(Source: TCteSefazInfDoc): TJSONValue;
    function TCteSefazInfDocToJson(Source: TCteSefazInfDoc): string;
    function TCteSefazInfDocFromJsonValue(Source: TJSONValue): TCteSefazInfDoc;
    function TCteSefazInfDocFromJson(Source: string): TCteSefazInfDoc;
    function TCteSefazIdDocAntPapToJsonValue(Source: TCteSefazIdDocAntPap): TJSONValue;
    function TCteSefazIdDocAntPapToJson(Source: TCteSefazIdDocAntPap): string;
    function TCteSefazIdDocAntPapFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntPap;
    function TCteSefazIdDocAntPapFromJson(Source: string): TCteSefazIdDocAntPap;
    function TCteSefazIdDocAntPapListToJsonValue(Source: TCteSefazIdDocAntPapList): TJSONValue;
    function TCteSefazIdDocAntPapListToJson(Source: TCteSefazIdDocAntPapList): string;
    function TCteSefazIdDocAntPapListFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntPapList;
    function TCteSefazIdDocAntPapListFromJson(Source: string): TCteSefazIdDocAntPapList;
    function TCteSefazIdDocAntEleToJsonValue(Source: TCteSefazIdDocAntEle): TJSONValue;
    function TCteSefazIdDocAntEleToJson(Source: TCteSefazIdDocAntEle): string;
    function TCteSefazIdDocAntEleFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntEle;
    function TCteSefazIdDocAntEleFromJson(Source: string): TCteSefazIdDocAntEle;
    function TCteSefazIdDocAntEleListToJsonValue(Source: TCteSefazIdDocAntEleList): TJSONValue;
    function TCteSefazIdDocAntEleListToJson(Source: TCteSefazIdDocAntEleList): string;
    function TCteSefazIdDocAntEleListFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntEleList;
    function TCteSefazIdDocAntEleListFromJson(Source: string): TCteSefazIdDocAntEleList;
    function TCteSefazIdDocAntToJsonValue(Source: TCteSefazIdDocAnt): TJSONValue;
    function TCteSefazIdDocAntToJson(Source: TCteSefazIdDocAnt): string;
    function TCteSefazIdDocAntFromJsonValue(Source: TJSONValue): TCteSefazIdDocAnt;
    function TCteSefazIdDocAntFromJson(Source: string): TCteSefazIdDocAnt;
    function TCteSefazIdDocAntListToJsonValue(Source: TCteSefazIdDocAntList): TJSONValue;
    function TCteSefazIdDocAntListToJson(Source: TCteSefazIdDocAntList): string;
    function TCteSefazIdDocAntListFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntList;
    function TCteSefazIdDocAntListFromJson(Source: string): TCteSefazIdDocAntList;
    function TCteSefazEmiDocAntToJsonValue(Source: TCteSefazEmiDocAnt): TJSONValue;
    function TCteSefazEmiDocAntToJson(Source: TCteSefazEmiDocAnt): string;
    function TCteSefazEmiDocAntFromJsonValue(Source: TJSONValue): TCteSefazEmiDocAnt;
    function TCteSefazEmiDocAntFromJson(Source: string): TCteSefazEmiDocAnt;
    function TCteSefazEmiDocAntListToJsonValue(Source: TCteSefazEmiDocAntList): TJSONValue;
    function TCteSefazEmiDocAntListToJson(Source: TCteSefazEmiDocAntList): string;
    function TCteSefazEmiDocAntListFromJsonValue(Source: TJSONValue): TCteSefazEmiDocAntList;
    function TCteSefazEmiDocAntListFromJson(Source: string): TCteSefazEmiDocAntList;
    function TCteSefazDocAntToJsonValue(Source: TCteSefazDocAnt): TJSONValue;
    function TCteSefazDocAntToJson(Source: TCteSefazDocAnt): string;
    function TCteSefazDocAntFromJsonValue(Source: TJSONValue): TCteSefazDocAnt;
    function TCteSefazDocAntFromJson(Source: string): TCteSefazDocAnt;
    function TCteSefazEmiOccToJsonValue(Source: TCteSefazEmiOcc): TJSONValue;
    function TCteSefazEmiOccToJson(Source: TCteSefazEmiOcc): string;
    function TCteSefazEmiOccFromJsonValue(Source: TJSONValue): TCteSefazEmiOcc;
    function TCteSefazEmiOccFromJson(Source: string): TCteSefazEmiOcc;
    function TCteSefazOccToJsonValue(Source: TCteSefazOcc): TJSONValue;
    function TCteSefazOccToJson(Source: TCteSefazOcc): string;
    function TCteSefazOccFromJsonValue(Source: TJSONValue): TCteSefazOcc;
    function TCteSefazOccFromJson(Source: string): TCteSefazOcc;
    function TCteSefazOccListToJsonValue(Source: TCteSefazOccList): TJSONValue;
    function TCteSefazOccListToJson(Source: TCteSefazOccList): string;
    function TCteSefazOccListFromJsonValue(Source: TJSONValue): TCteSefazOccList;
    function TCteSefazOccListFromJson(Source: string): TCteSefazOccList;
    function TCteSefazRodoToJsonValue(Source: TCteSefazRodo): TJSONValue;
    function TCteSefazRodoToJson(Source: TCteSefazRodo): string;
    function TCteSefazRodoFromJsonValue(Source: TJSONValue): TCteSefazRodo;
    function TCteSefazRodoFromJson(Source: string): TCteSefazRodo;
    function TCteSefazNatCargaToJsonValue(Source: TCteSefazNatCarga): TJSONValue;
    function TCteSefazNatCargaToJson(Source: TCteSefazNatCarga): string;
    function TCteSefazNatCargaFromJsonValue(Source: TJSONValue): TCteSefazNatCarga;
    function TCteSefazNatCargaFromJson(Source: string): TCteSefazNatCarga;
    function TCteSefazTarifaToJsonValue(Source: TCteSefazTarifa): TJSONValue;
    function TCteSefazTarifaToJson(Source: TCteSefazTarifa): string;
    function TCteSefazTarifaFromJsonValue(Source: TJSONValue): TCteSefazTarifa;
    function TCteSefazTarifaFromJson(Source: string): TCteSefazTarifa;
    function TCteSefazInfTotAPToJsonValue(Source: TCteSefazInfTotAP): TJSONValue;
    function TCteSefazInfTotAPToJson(Source: TCteSefazInfTotAP): string;
    function TCteSefazInfTotAPFromJsonValue(Source: TJSONValue): TCteSefazInfTotAP;
    function TCteSefazInfTotAPFromJson(Source: string): TCteSefazInfTotAP;
    function TCteSefazPeriToJsonValue(Source: TCteSefazPeri): TJSONValue;
    function TCteSefazPeriToJson(Source: TCteSefazPeri): string;
    function TCteSefazPeriFromJsonValue(Source: TJSONValue): TCteSefazPeri;
    function TCteSefazPeriFromJson(Source: string): TCteSefazPeri;
    function TCteSefazPeriListToJsonValue(Source: TCteSefazPeriList): TJSONValue;
    function TCteSefazPeriListToJson(Source: TCteSefazPeriList): string;
    function TCteSefazPeriListFromJsonValue(Source: TJSONValue): TCteSefazPeriList;
    function TCteSefazPeriListFromJson(Source: string): TCteSefazPeriList;
    function TCteSefazAereoToJsonValue(Source: TCteSefazAereo): TJSONValue;
    function TCteSefazAereoToJson(Source: TCteSefazAereo): string;
    function TCteSefazAereoFromJsonValue(Source: TJSONValue): TCteSefazAereo;
    function TCteSefazAereoFromJson(Source: string): TCteSefazAereo;
    function TCteSefazEnderFerToJsonValue(Source: TCteSefazEnderFer): TJSONValue;
    function TCteSefazEnderFerToJson(Source: TCteSefazEnderFer): string;
    function TCteSefazEnderFerFromJsonValue(Source: TJSONValue): TCteSefazEnderFer;
    function TCteSefazEnderFerFromJson(Source: string): TCteSefazEnderFer;
    function TCteSefazFerroEnvToJsonValue(Source: TCteSefazFerroEnv): TJSONValue;
    function TCteSefazFerroEnvToJson(Source: TCteSefazFerroEnv): string;
    function TCteSefazFerroEnvFromJsonValue(Source: TJSONValue): TCteSefazFerroEnv;
    function TCteSefazFerroEnvFromJson(Source: string): TCteSefazFerroEnv;
    function TCteSefazFerroEnvListToJsonValue(Source: TCteSefazFerroEnvList): TJSONValue;
    function TCteSefazFerroEnvListToJson(Source: TCteSefazFerroEnvList): string;
    function TCteSefazFerroEnvListFromJsonValue(Source: TJSONValue): TCteSefazFerroEnvList;
    function TCteSefazFerroEnvListFromJson(Source: string): TCteSefazFerroEnvList;
    function TCteSefazTrafMutToJsonValue(Source: TCteSefazTrafMut): TJSONValue;
    function TCteSefazTrafMutToJson(Source: TCteSefazTrafMut): string;
    function TCteSefazTrafMutFromJsonValue(Source: TJSONValue): TCteSefazTrafMut;
    function TCteSefazTrafMutFromJson(Source: string): TCteSefazTrafMut;
    function TCteSefazFerrovToJsonValue(Source: TCteSefazFerrov): TJSONValue;
    function TCteSefazFerrovToJson(Source: TCteSefazFerrov): string;
    function TCteSefazFerrovFromJsonValue(Source: TJSONValue): TCteSefazFerrov;
    function TCteSefazFerrovFromJson(Source: string): TCteSefazFerrov;
    function TCteSefazBalsaToJsonValue(Source: TCteSefazBalsa): TJSONValue;
    function TCteSefazBalsaToJson(Source: TCteSefazBalsa): string;
    function TCteSefazBalsaFromJsonValue(Source: TJSONValue): TCteSefazBalsa;
    function TCteSefazBalsaFromJson(Source: string): TCteSefazBalsa;
    function TCteSefazBalsaListToJsonValue(Source: TCteSefazBalsaList): TJSONValue;
    function TCteSefazBalsaListToJson(Source: TCteSefazBalsaList): string;
    function TCteSefazBalsaListFromJsonValue(Source: TJSONValue): TCteSefazBalsaList;
    function TCteSefazBalsaListFromJson(Source: string): TCteSefazBalsaList;
    function TCteSefazLacreToJsonValue(Source: TCteSefazLacre): TJSONValue;
    function TCteSefazLacreToJson(Source: TCteSefazLacre): string;
    function TCteSefazLacreFromJsonValue(Source: TJSONValue): TCteSefazLacre;
    function TCteSefazLacreFromJson(Source: string): TCteSefazLacre;
    function TCteSefazLacreListToJsonValue(Source: TCteSefazLacreList): TJSONValue;
    function TCteSefazLacreListToJson(Source: TCteSefazLacreList): string;
    function TCteSefazLacreListFromJsonValue(Source: TJSONValue): TCteSefazLacreList;
    function TCteSefazLacreListFromJson(Source: string): TCteSefazLacreList;
    function TCteSefazDetContInfDocInfNFToJsonValue(Source: TCteSefazDetContInfDocInfNF): TJSONValue;
    function TCteSefazDetContInfDocInfNFToJson(Source: TCteSefazDetContInfDocInfNF): string;
    function TCteSefazDetContInfDocInfNFFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDocInfNF;
    function TCteSefazDetContInfDocInfNFFromJson(Source: string): TCteSefazDetContInfDocInfNF;
    function TCteSefazDetContInfDocInfNFListToJsonValue(Source: TCteSefazDetContInfDocInfNFList): TJSONValue;
    function TCteSefazDetContInfDocInfNFListToJson(Source: TCteSefazDetContInfDocInfNFList): string;
    function TCteSefazDetContInfDocInfNFListFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDocInfNFList;
    function TCteSefazDetContInfDocInfNFListFromJson(Source: string): TCteSefazDetContInfDocInfNFList;
    function TCteSefazDetContInfDocInfNFeToJsonValue(Source: TCteSefazDetContInfDocInfNFe): TJSONValue;
    function TCteSefazDetContInfDocInfNFeToJson(Source: TCteSefazDetContInfDocInfNFe): string;
    function TCteSefazDetContInfDocInfNFeFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDocInfNFe;
    function TCteSefazDetContInfDocInfNFeFromJson(Source: string): TCteSefazDetContInfDocInfNFe;
    function TCteSefazDetContInfDocInfNFeListToJsonValue(Source: TCteSefazDetContInfDocInfNFeList): TJSONValue;
    function TCteSefazDetContInfDocInfNFeListToJson(Source: TCteSefazDetContInfDocInfNFeList): string;
    function TCteSefazDetContInfDocInfNFeListFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDocInfNFeList;
    function TCteSefazDetContInfDocInfNFeListFromJson(Source: string): TCteSefazDetContInfDocInfNFeList;
    function TCteSefazDetContInfDocToJsonValue(Source: TCteSefazDetContInfDoc): TJSONValue;
    function TCteSefazDetContInfDocToJson(Source: TCteSefazDetContInfDoc): string;
    function TCteSefazDetContInfDocFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDoc;
    function TCteSefazDetContInfDocFromJson(Source: string): TCteSefazDetContInfDoc;
    function TCteSefazDetContToJsonValue(Source: TCteSefazDetCont): TJSONValue;
    function TCteSefazDetContToJson(Source: TCteSefazDetCont): string;
    function TCteSefazDetContFromJsonValue(Source: TJSONValue): TCteSefazDetCont;
    function TCteSefazDetContFromJson(Source: string): TCteSefazDetCont;
    function TCteSefazDetContListToJsonValue(Source: TCteSefazDetContList): TJSONValue;
    function TCteSefazDetContListToJson(Source: TCteSefazDetContList): string;
    function TCteSefazDetContListFromJsonValue(Source: TJSONValue): TCteSefazDetContList;
    function TCteSefazDetContListFromJson(Source: string): TCteSefazDetContList;
    function TCteSefazAquavToJsonValue(Source: TCteSefazAquav): TJSONValue;
    function TCteSefazAquavToJson(Source: TCteSefazAquav): string;
    function TCteSefazAquavFromJsonValue(Source: TJSONValue): TCteSefazAquav;
    function TCteSefazAquavFromJson(Source: string): TCteSefazAquav;
    function TCteSefazDutoToJsonValue(Source: TCteSefazDuto): TJSONValue;
    function TCteSefazDutoToJson(Source: TCteSefazDuto): string;
    function TCteSefazDutoFromJsonValue(Source: TJSONValue): TCteSefazDuto;
    function TCteSefazDutoFromJson(Source: string): TCteSefazDuto;
    function TCteSefazInfSegToJsonValue(Source: TCteSefazInfSeg): TJSONValue;
    function TCteSefazInfSegToJson(Source: TCteSefazInfSeg): string;
    function TCteSefazInfSegFromJsonValue(Source: TJSONValue): TCteSefazInfSeg;
    function TCteSefazInfSegFromJson(Source: string): TCteSefazInfSeg;
    function TCteSefazSegToJsonValue(Source: TCteSefazSeg): TJSONValue;
    function TCteSefazSegToJson(Source: TCteSefazSeg): string;
    function TCteSefazSegFromJsonValue(Source: TJSONValue): TCteSefazSeg;
    function TCteSefazSegFromJson(Source: string): TCteSefazSeg;
    function TCteSefazMultimodalToJsonValue(Source: TCteSefazMultimodal): TJSONValue;
    function TCteSefazMultimodalToJson(Source: TCteSefazMultimodal): string;
    function TCteSefazMultimodalFromJsonValue(Source: TJSONValue): TCteSefazMultimodal;
    function TCteSefazMultimodalFromJson(Source: string): TCteSefazMultimodal;
    function TCteSefazInfModalToJsonValue(Source: TCteSefazInfModal): TJSONValue;
    function TCteSefazInfModalToJson(Source: TCteSefazInfModal): string;
    function TCteSefazInfModalFromJsonValue(Source: TJSONValue): TCteSefazInfModal;
    function TCteSefazInfModalFromJson(Source: string): TCteSefazInfModal;
    function TCteSefazVeicNovosToJsonValue(Source: TCteSefazVeicNovos): TJSONValue;
    function TCteSefazVeicNovosToJson(Source: TCteSefazVeicNovos): string;
    function TCteSefazVeicNovosFromJsonValue(Source: TJSONValue): TCteSefazVeicNovos;
    function TCteSefazVeicNovosFromJson(Source: string): TCteSefazVeicNovos;
    function TCteSefazVeicNovosListToJsonValue(Source: TCteSefazVeicNovosList): TJSONValue;
    function TCteSefazVeicNovosListToJson(Source: TCteSefazVeicNovosList): string;
    function TCteSefazVeicNovosListFromJsonValue(Source: TJSONValue): TCteSefazVeicNovosList;
    function TCteSefazVeicNovosListFromJson(Source: string): TCteSefazVeicNovosList;
    function TCteSefazFatToJsonValue(Source: TCteSefazFat): TJSONValue;
    function TCteSefazFatToJson(Source: TCteSefazFat): string;
    function TCteSefazFatFromJsonValue(Source: TJSONValue): TCteSefazFat;
    function TCteSefazFatFromJson(Source: string): TCteSefazFat;
    function TCteSefazDupToJsonValue(Source: TCteSefazDup): TJSONValue;
    function TCteSefazDupToJson(Source: TCteSefazDup): string;
    function TCteSefazDupFromJsonValue(Source: TJSONValue): TCteSefazDup;
    function TCteSefazDupFromJson(Source: string): TCteSefazDup;
    function TCteSefazDupListToJsonValue(Source: TCteSefazDupList): TJSONValue;
    function TCteSefazDupListToJson(Source: TCteSefazDupList): string;
    function TCteSefazDupListFromJsonValue(Source: TJSONValue): TCteSefazDupList;
    function TCteSefazDupListFromJson(Source: string): TCteSefazDupList;
    function TCteSefazCobrToJsonValue(Source: TCteSefazCobr): TJSONValue;
    function TCteSefazCobrToJson(Source: TCteSefazCobr): string;
    function TCteSefazCobrFromJsonValue(Source: TJSONValue): TCteSefazCobr;
    function TCteSefazCobrFromJson(Source: string): TCteSefazCobr;
    function TCteSefazInfCteSubToJsonValue(Source: TCteSefazInfCteSub): TJSONValue;
    function TCteSefazInfCteSubToJson(Source: TCteSefazInfCteSub): string;
    function TCteSefazInfCteSubFromJsonValue(Source: TJSONValue): TCteSefazInfCteSub;
    function TCteSefazInfCteSubFromJson(Source: string): TCteSefazInfCteSub;
    function TCteSefazInfGlobalizadoToJsonValue(Source: TCteSefazInfGlobalizado): TJSONValue;
    function TCteSefazInfGlobalizadoToJson(Source: TCteSefazInfGlobalizado): string;
    function TCteSefazInfGlobalizadoFromJsonValue(Source: TJSONValue): TCteSefazInfGlobalizado;
    function TCteSefazInfGlobalizadoFromJson(Source: string): TCteSefazInfGlobalizado;
    function TCteSefazInfCTeMultimodalToJsonValue(Source: TCteSefazInfCTeMultimodal): TJSONValue;
    function TCteSefazInfCTeMultimodalToJson(Source: TCteSefazInfCTeMultimodal): string;
    function TCteSefazInfCTeMultimodalFromJsonValue(Source: TJSONValue): TCteSefazInfCTeMultimodal;
    function TCteSefazInfCTeMultimodalFromJson(Source: string): TCteSefazInfCTeMultimodal;
    function TCteSefazInfCTeMultimodalListToJsonValue(Source: TCteSefazInfCTeMultimodalList): TJSONValue;
    function TCteSefazInfCTeMultimodalListToJson(Source: TCteSefazInfCTeMultimodalList): string;
    function TCteSefazInfCTeMultimodalListFromJsonValue(Source: TJSONValue): TCteSefazInfCTeMultimodalList;
    function TCteSefazInfCTeMultimodalListFromJson(Source: string): TCteSefazInfCTeMultimodalList;
    function TCteSefazInfServVincToJsonValue(Source: TCteSefazInfServVinc): TJSONValue;
    function TCteSefazInfServVincToJson(Source: TCteSefazInfServVinc): string;
    function TCteSefazInfServVincFromJsonValue(Source: TJSONValue): TCteSefazInfServVinc;
    function TCteSefazInfServVincFromJson(Source: string): TCteSefazInfServVinc;
    function TCteSefazInfCTeNormToJsonValue(Source: TCteSefazInfCTeNorm): TJSONValue;
    function TCteSefazInfCTeNormToJson(Source: TCteSefazInfCTeNorm): string;
    function TCteSefazInfCTeNormFromJsonValue(Source: TJSONValue): TCteSefazInfCTeNorm;
    function TCteSefazInfCTeNormFromJson(Source: string): TCteSefazInfCTeNorm;
    function TCteSefazInfCteCompToJsonValue(Source: TCteSefazInfCteComp): TJSONValue;
    function TCteSefazInfCteCompToJson(Source: TCteSefazInfCteComp): string;
    function TCteSefazInfCteCompFromJsonValue(Source: TJSONValue): TCteSefazInfCteComp;
    function TCteSefazInfCteCompFromJson(Source: string): TCteSefazInfCteComp;
    function TCteSefazInfCteCompListToJsonValue(Source: TCteSefazInfCteCompList): TJSONValue;
    function TCteSefazInfCteCompListToJson(Source: TCteSefazInfCteCompList): string;
    function TCteSefazInfCteCompListFromJsonValue(Source: TJSONValue): TCteSefazInfCteCompList;
    function TCteSefazInfCteCompListFromJson(Source: string): TCteSefazInfCteCompList;
    function TCteSefazAutXMLToJsonValue(Source: TCteSefazAutXML): TJSONValue;
    function TCteSefazAutXMLToJson(Source: TCteSefazAutXML): string;
    function TCteSefazAutXMLFromJsonValue(Source: TJSONValue): TCteSefazAutXML;
    function TCteSefazAutXMLFromJson(Source: string): TCteSefazAutXML;
    function TCteSefazAutXMLListToJsonValue(Source: TCteSefazAutXMLList): TJSONValue;
    function TCteSefazAutXMLListToJson(Source: TCteSefazAutXMLList): string;
    function TCteSefazAutXMLListFromJsonValue(Source: TJSONValue): TCteSefazAutXMLList;
    function TCteSefazAutXMLListFromJson(Source: string): TCteSefazAutXMLList;
    function TCteSefazRespTecToJsonValue(Source: TCteSefazRespTec): TJSONValue;
    function TCteSefazRespTecToJson(Source: TCteSefazRespTec): string;
    function TCteSefazRespTecFromJsonValue(Source: TJSONValue): TCteSefazRespTec;
    function TCteSefazRespTecFromJson(Source: string): TCteSefazRespTec;
    function TCteSefazInfSolicNFFToJsonValue(Source: TCteSefazInfSolicNFF): TJSONValue;
    function TCteSefazInfSolicNFFToJson(Source: TCteSefazInfSolicNFF): string;
    function TCteSefazInfSolicNFFFromJsonValue(Source: TJSONValue): TCteSefazInfSolicNFF;
    function TCteSefazInfSolicNFFFromJson(Source: string): TCteSefazInfSolicNFF;
    function TCteSefazInfCteToJsonValue(Source: TCteSefazInfCte): TJSONValue;
    function TCteSefazInfCteToJson(Source: TCteSefazInfCte): string;
    function TCteSefazInfCteFromJsonValue(Source: TJSONValue): TCteSefazInfCte;
    function TCteSefazInfCteFromJson(Source: string): TCteSefazInfCte;
    function TCteSefazInfCTeSuplToJsonValue(Source: TCteSefazInfCTeSupl): TJSONValue;
    function TCteSefazInfCTeSuplToJson(Source: TCteSefazInfCTeSupl): string;
    function TCteSefazInfCTeSuplFromJsonValue(Source: TJSONValue): TCteSefazInfCTeSupl;
    function TCteSefazInfCTeSuplFromJson(Source: string): TCteSefazInfCTeSupl;
    function TCtePedidoEmissaoToJsonValue(Source: TCtePedidoEmissao): TJSONValue;
    function TCtePedidoEmissaoToJson(Source: TCtePedidoEmissao): string;
    function TCtePedidoEmissaoFromJsonValue(Source: TJSONValue): TCtePedidoEmissao;
    function TCtePedidoEmissaoFromJson(Source: string): TCtePedidoEmissao;
    function TCtePedidoCancelamentoToJsonValue(Source: TCtePedidoCancelamento): TJSONValue;
    function TCtePedidoCancelamentoToJson(Source: TCtePedidoCancelamento): string;
    function TCtePedidoCancelamentoFromJsonValue(Source: TJSONValue): TCtePedidoCancelamento;
    function TCtePedidoCancelamentoFromJson(Source: string): TCtePedidoCancelamento;
    function TCteInfCorrecaoToJsonValue(Source: TCteInfCorrecao): TJSONValue;
    function TCteInfCorrecaoToJson(Source: TCteInfCorrecao): string;
    function TCteInfCorrecaoFromJsonValue(Source: TJSONValue): TCteInfCorrecao;
    function TCteInfCorrecaoFromJson(Source: string): TCteInfCorrecao;
    function TCteInfCorrecaoListToJsonValue(Source: TCteInfCorrecaoList): TJSONValue;
    function TCteInfCorrecaoListToJson(Source: TCteInfCorrecaoList): string;
    function TCteInfCorrecaoListFromJsonValue(Source: TJSONValue): TCteInfCorrecaoList;
    function TCteInfCorrecaoListFromJson(Source: string): TCteInfCorrecaoList;
    function TCtePedidoCartaCorrecaoToJsonValue(Source: TCtePedidoCartaCorrecao): TJSONValue;
    function TCtePedidoCartaCorrecaoToJson(Source: TCtePedidoCartaCorrecao): string;
    function TCtePedidoCartaCorrecaoFromJsonValue(Source: TJSONValue): TCtePedidoCartaCorrecao;
    function TCtePedidoCartaCorrecaoFromJson(Source: string): TCtePedidoCartaCorrecao;
    function TCteCartaCorrecaoToJsonValue(Source: TCteCartaCorrecao): TJSONValue;
    function TCteCartaCorrecaoToJson(Source: TCteCartaCorrecao): string;
    function TCteCartaCorrecaoFromJsonValue(Source: TJSONValue): TCteCartaCorrecao;
    function TCteCartaCorrecaoFromJson(Source: string): TCteCartaCorrecao;
    function TDfeEventoToJsonValue(Source: TDfeEvento): TJSONValue;
    function TDfeEventoToJson(Source: TDfeEvento): string;
    function TDfeEventoFromJsonValue(Source: TJSONValue): TDfeEvento;
    function TDfeEventoFromJson(Source: string): TDfeEvento;
    function TDfeSincronizacaoToJsonValue(Source: TDfeSincronizacao): TJSONValue;
    function TDfeSincronizacaoToJson(Source: TDfeSincronizacao): string;
    function TDfeSincronizacaoFromJsonValue(Source: TJSONValue): TDfeSincronizacao;
    function TDfeSincronizacaoFromJson(Source: string): TDfeSincronizacao;
    function TMdfeNaoEncerradoToJsonValue(Source: TMdfeNaoEncerrado): TJSONValue;
    function TMdfeNaoEncerradoToJson(Source: TMdfeNaoEncerrado): string;
    function TMdfeNaoEncerradoFromJsonValue(Source: TJSONValue): TMdfeNaoEncerrado;
    function TMdfeNaoEncerradoFromJson(Source: string): TMdfeNaoEncerrado;
    function TMdfeNaoEncerradoListToJsonValue(Source: TMdfeNaoEncerradoList): TJSONValue;
    function TMdfeNaoEncerradoListToJson(Source: TMdfeNaoEncerradoList): string;
    function TMdfeNaoEncerradoListFromJsonValue(Source: TJSONValue): TMdfeNaoEncerradoList;
    function TMdfeNaoEncerradoListFromJson(Source: string): TMdfeNaoEncerradoList;
    function TMdfeNaoEncerradosToJsonValue(Source: TMdfeNaoEncerrados): TJSONValue;
    function TMdfeNaoEncerradosToJson(Source: TMdfeNaoEncerrados): string;
    function TMdfeNaoEncerradosFromJsonValue(Source: TJSONValue): TMdfeNaoEncerrados;
    function TMdfeNaoEncerradosFromJson(Source: string): TMdfeNaoEncerrados;
    function TMdfeSefazInfMunCarregaToJsonValue(Source: TMdfeSefazInfMunCarrega): TJSONValue;
    function TMdfeSefazInfMunCarregaToJson(Source: TMdfeSefazInfMunCarrega): string;
    function TMdfeSefazInfMunCarregaFromJsonValue(Source: TJSONValue): TMdfeSefazInfMunCarrega;
    function TMdfeSefazInfMunCarregaFromJson(Source: string): TMdfeSefazInfMunCarrega;
    function TMdfeSefazInfMunCarregaListToJsonValue(Source: TMdfeSefazInfMunCarregaList): TJSONValue;
    function TMdfeSefazInfMunCarregaListToJson(Source: TMdfeSefazInfMunCarregaList): string;
    function TMdfeSefazInfMunCarregaListFromJsonValue(Source: TJSONValue): TMdfeSefazInfMunCarregaList;
    function TMdfeSefazInfMunCarregaListFromJson(Source: string): TMdfeSefazInfMunCarregaList;
    function TMdfeSefazInfPercursoToJsonValue(Source: TMdfeSefazInfPercurso): TJSONValue;
    function TMdfeSefazInfPercursoToJson(Source: TMdfeSefazInfPercurso): string;
    function TMdfeSefazInfPercursoFromJsonValue(Source: TJSONValue): TMdfeSefazInfPercurso;
    function TMdfeSefazInfPercursoFromJson(Source: string): TMdfeSefazInfPercurso;
    function TMdfeSefazInfPercursoListToJsonValue(Source: TMdfeSefazInfPercursoList): TJSONValue;
    function TMdfeSefazInfPercursoListToJson(Source: TMdfeSefazInfPercursoList): string;
    function TMdfeSefazInfPercursoListFromJsonValue(Source: TJSONValue): TMdfeSefazInfPercursoList;
    function TMdfeSefazInfPercursoListFromJson(Source: string): TMdfeSefazInfPercursoList;
    function TMdfeSefazIdeToJsonValue(Source: TMdfeSefazIde): TJSONValue;
    function TMdfeSefazIdeToJson(Source: TMdfeSefazIde): string;
    function TMdfeSefazIdeFromJsonValue(Source: TJSONValue): TMdfeSefazIde;
    function TMdfeSefazIdeFromJson(Source: string): TMdfeSefazIde;
    function TMdfeSefazEndeEmiToJsonValue(Source: TMdfeSefazEndeEmi): TJSONValue;
    function TMdfeSefazEndeEmiToJson(Source: TMdfeSefazEndeEmi): string;
    function TMdfeSefazEndeEmiFromJsonValue(Source: TJSONValue): TMdfeSefazEndeEmi;
    function TMdfeSefazEndeEmiFromJson(Source: string): TMdfeSefazEndeEmi;
    function TMdfeSefazEmitToJsonValue(Source: TMdfeSefazEmit): TJSONValue;
    function TMdfeSefazEmitToJson(Source: TMdfeSefazEmit): string;
    function TMdfeSefazEmitFromJsonValue(Source: TJSONValue): TMdfeSefazEmit;
    function TMdfeSefazEmitFromJson(Source: string): TMdfeSefazEmit;
    function TMdfeSefazAereoToJsonValue(Source: TMdfeSefazAereo): TJSONValue;
    function TMdfeSefazAereoToJson(Source: TMdfeSefazAereo): string;
    function TMdfeSefazAereoFromJsonValue(Source: TJSONValue): TMdfeSefazAereo;
    function TMdfeSefazAereoFromJson(Source: string): TMdfeSefazAereo;
    function TMdfeSefazInfCIOTToJsonValue(Source: TMdfeSefazInfCIOT): TJSONValue;
    function TMdfeSefazInfCIOTToJson(Source: TMdfeSefazInfCIOT): string;
    function TMdfeSefazInfCIOTFromJsonValue(Source: TJSONValue): TMdfeSefazInfCIOT;
    function TMdfeSefazInfCIOTFromJson(Source: string): TMdfeSefazInfCIOT;
    function TMdfeSefazInfCIOTListToJsonValue(Source: TMdfeSefazInfCIOTList): TJSONValue;
    function TMdfeSefazInfCIOTListToJson(Source: TMdfeSefazInfCIOTList): string;
    function TMdfeSefazInfCIOTListFromJsonValue(Source: TJSONValue): TMdfeSefazInfCIOTList;
    function TMdfeSefazInfCIOTListFromJson(Source: string): TMdfeSefazInfCIOTList;
    function TMdfeSefazDispToJsonValue(Source: TMdfeSefazDisp): TJSONValue;
    function TMdfeSefazDispToJson(Source: TMdfeSefazDisp): string;
    function TMdfeSefazDispFromJsonValue(Source: TJSONValue): TMdfeSefazDisp;
    function TMdfeSefazDispFromJson(Source: string): TMdfeSefazDisp;
    function TMdfeSefazDispListToJsonValue(Source: TMdfeSefazDispList): TJSONValue;
    function TMdfeSefazDispListToJson(Source: TMdfeSefazDispList): string;
    function TMdfeSefazDispListFromJsonValue(Source: TJSONValue): TMdfeSefazDispList;
    function TMdfeSefazDispListFromJson(Source: string): TMdfeSefazDispList;
    function TMdfeSefazValePedToJsonValue(Source: TMdfeSefazValePed): TJSONValue;
    function TMdfeSefazValePedToJson(Source: TMdfeSefazValePed): string;
    function TMdfeSefazValePedFromJsonValue(Source: TJSONValue): TMdfeSefazValePed;
    function TMdfeSefazValePedFromJson(Source: string): TMdfeSefazValePed;
    function TMdfeSefazInfContratoToJsonValue(Source: TMdfeSefazInfContrato): TJSONValue;
    function TMdfeSefazInfContratoToJson(Source: TMdfeSefazInfContrato): string;
    function TMdfeSefazInfContratoFromJsonValue(Source: TJSONValue): TMdfeSefazInfContrato;
    function TMdfeSefazInfContratoFromJson(Source: string): TMdfeSefazInfContrato;
    function TMdfeSefazInfContratanteToJsonValue(Source: TMdfeSefazInfContratante): TJSONValue;
    function TMdfeSefazInfContratanteToJson(Source: TMdfeSefazInfContratante): string;
    function TMdfeSefazInfContratanteFromJsonValue(Source: TJSONValue): TMdfeSefazInfContratante;
    function TMdfeSefazInfContratanteFromJson(Source: string): TMdfeSefazInfContratante;
    function TMdfeSefazInfContratanteListToJsonValue(Source: TMdfeSefazInfContratanteList): TJSONValue;
    function TMdfeSefazInfContratanteListToJson(Source: TMdfeSefazInfContratanteList): string;
    function TMdfeSefazInfContratanteListFromJsonValue(Source: TJSONValue): TMdfeSefazInfContratanteList;
    function TMdfeSefazInfContratanteListFromJson(Source: string): TMdfeSefazInfContratanteList;
    function TMdfeSefazCompToJsonValue(Source: TMdfeSefazComp): TJSONValue;
    function TMdfeSefazCompToJson(Source: TMdfeSefazComp): string;
    function TMdfeSefazCompFromJsonValue(Source: TJSONValue): TMdfeSefazComp;
    function TMdfeSefazCompFromJson(Source: string): TMdfeSefazComp;
    function TMdfeSefazCompListToJsonValue(Source: TMdfeSefazCompList): TJSONValue;
    function TMdfeSefazCompListToJson(Source: TMdfeSefazCompList): string;
    function TMdfeSefazCompListFromJsonValue(Source: TJSONValue): TMdfeSefazCompList;
    function TMdfeSefazCompListFromJson(Source: string): TMdfeSefazCompList;
    function TMdfeSefazInfPrazoToJsonValue(Source: TMdfeSefazInfPrazo): TJSONValue;
    function TMdfeSefazInfPrazoToJson(Source: TMdfeSefazInfPrazo): string;
    function TMdfeSefazInfPrazoFromJsonValue(Source: TJSONValue): TMdfeSefazInfPrazo;
    function TMdfeSefazInfPrazoFromJson(Source: string): TMdfeSefazInfPrazo;
    function TMdfeSefazInfPrazoListToJsonValue(Source: TMdfeSefazInfPrazoList): TJSONValue;
    function TMdfeSefazInfPrazoListToJson(Source: TMdfeSefazInfPrazoList): string;
    function TMdfeSefazInfPrazoListFromJsonValue(Source: TJSONValue): TMdfeSefazInfPrazoList;
    function TMdfeSefazInfPrazoListFromJson(Source: string): TMdfeSefazInfPrazoList;
    function TMdfeSefazInfBancToJsonValue(Source: TMdfeSefazInfBanc): TJSONValue;
    function TMdfeSefazInfBancToJson(Source: TMdfeSefazInfBanc): string;
    function TMdfeSefazInfBancFromJsonValue(Source: TJSONValue): TMdfeSefazInfBanc;
    function TMdfeSefazInfBancFromJson(Source: string): TMdfeSefazInfBanc;
    function TMdfeSefazInfPagToJsonValue(Source: TMdfeSefazInfPag): TJSONValue;
    function TMdfeSefazInfPagToJson(Source: TMdfeSefazInfPag): string;
    function TMdfeSefazInfPagFromJsonValue(Source: TJSONValue): TMdfeSefazInfPag;
    function TMdfeSefazInfPagFromJson(Source: string): TMdfeSefazInfPag;
    function TMdfeSefazInfPagListToJsonValue(Source: TMdfeSefazInfPagList): TJSONValue;
    function TMdfeSefazInfPagListToJson(Source: TMdfeSefazInfPagList): string;
    function TMdfeSefazInfPagListFromJsonValue(Source: TJSONValue): TMdfeSefazInfPagList;
    function TMdfeSefazInfPagListFromJson(Source: string): TMdfeSefazInfPagList;
    function TMdfeSefazInfANTTToJsonValue(Source: TMdfeSefazInfANTT): TJSONValue;
    function TMdfeSefazInfANTTToJson(Source: TMdfeSefazInfANTT): string;
    function TMdfeSefazInfANTTFromJsonValue(Source: TJSONValue): TMdfeSefazInfANTT;
    function TMdfeSefazInfANTTFromJson(Source: string): TMdfeSefazInfANTT;
    function TMdfeSefazPropToJsonValue(Source: TMdfeSefazProp): TJSONValue;
    function TMdfeSefazPropToJson(Source: TMdfeSefazProp): string;
    function TMdfeSefazPropFromJsonValue(Source: TJSONValue): TMdfeSefazProp;
    function TMdfeSefazPropFromJson(Source: string): TMdfeSefazProp;
    function TMdfeSefazCondutorToJsonValue(Source: TMdfeSefazCondutor): TJSONValue;
    function TMdfeSefazCondutorToJson(Source: TMdfeSefazCondutor): string;
    function TMdfeSefazCondutorFromJsonValue(Source: TJSONValue): TMdfeSefazCondutor;
    function TMdfeSefazCondutorFromJson(Source: string): TMdfeSefazCondutor;
    function TMdfeSefazCondutorListToJsonValue(Source: TMdfeSefazCondutorList): TJSONValue;
    function TMdfeSefazCondutorListToJson(Source: TMdfeSefazCondutorList): string;
    function TMdfeSefazCondutorListFromJsonValue(Source: TJSONValue): TMdfeSefazCondutorList;
    function TMdfeSefazCondutorListFromJson(Source: string): TMdfeSefazCondutorList;
    function TMdfeSefazVeicTracaoToJsonValue(Source: TMdfeSefazVeicTracao): TJSONValue;
    function TMdfeSefazVeicTracaoToJson(Source: TMdfeSefazVeicTracao): string;
    function TMdfeSefazVeicTracaoFromJsonValue(Source: TJSONValue): TMdfeSefazVeicTracao;
    function TMdfeSefazVeicTracaoFromJson(Source: string): TMdfeSefazVeicTracao;
    function TMdfeSefazVeicReboquePropToJsonValue(Source: TMdfeSefazVeicReboqueProp): TJSONValue;
    function TMdfeSefazVeicReboquePropToJson(Source: TMdfeSefazVeicReboqueProp): string;
    function TMdfeSefazVeicReboquePropFromJsonValue(Source: TJSONValue): TMdfeSefazVeicReboqueProp;
    function TMdfeSefazVeicReboquePropFromJson(Source: string): TMdfeSefazVeicReboqueProp;
    function TMdfeSefazVeicReboqueToJsonValue(Source: TMdfeSefazVeicReboque): TJSONValue;
    function TMdfeSefazVeicReboqueToJson(Source: TMdfeSefazVeicReboque): string;
    function TMdfeSefazVeicReboqueFromJsonValue(Source: TJSONValue): TMdfeSefazVeicReboque;
    function TMdfeSefazVeicReboqueFromJson(Source: string): TMdfeSefazVeicReboque;
    function TMdfeSefazVeicReboqueListToJsonValue(Source: TMdfeSefazVeicReboqueList): TJSONValue;
    function TMdfeSefazVeicReboqueListToJson(Source: TMdfeSefazVeicReboqueList): string;
    function TMdfeSefazVeicReboqueListFromJsonValue(Source: TJSONValue): TMdfeSefazVeicReboqueList;
    function TMdfeSefazVeicReboqueListFromJson(Source: string): TMdfeSefazVeicReboqueList;
    function TMdfeSefazLacRodoToJsonValue(Source: TMdfeSefazLacRodo): TJSONValue;
    function TMdfeSefazLacRodoToJson(Source: TMdfeSefazLacRodo): string;
    function TMdfeSefazLacRodoFromJsonValue(Source: TJSONValue): TMdfeSefazLacRodo;
    function TMdfeSefazLacRodoFromJson(Source: string): TMdfeSefazLacRodo;
    function TMdfeSefazLacRodoListToJsonValue(Source: TMdfeSefazLacRodoList): TJSONValue;
    function TMdfeSefazLacRodoListToJson(Source: TMdfeSefazLacRodoList): string;
    function TMdfeSefazLacRodoListFromJsonValue(Source: TJSONValue): TMdfeSefazLacRodoList;
    function TMdfeSefazLacRodoListFromJson(Source: string): TMdfeSefazLacRodoList;
    function TMdfeSefazRodoToJsonValue(Source: TMdfeSefazRodo): TJSONValue;
    function TMdfeSefazRodoToJson(Source: TMdfeSefazRodo): string;
    function TMdfeSefazRodoFromJsonValue(Source: TJSONValue): TMdfeSefazRodo;
    function TMdfeSefazRodoFromJson(Source: string): TMdfeSefazRodo;
    function TMdfeSefazInfTermCarregToJsonValue(Source: TMdfeSefazInfTermCarreg): TJSONValue;
    function TMdfeSefazInfTermCarregToJson(Source: TMdfeSefazInfTermCarreg): string;
    function TMdfeSefazInfTermCarregFromJsonValue(Source: TJSONValue): TMdfeSefazInfTermCarreg;
    function TMdfeSefazInfTermCarregFromJson(Source: string): TMdfeSefazInfTermCarreg;
    function TMdfeSefazInfTermCarregListToJsonValue(Source: TMdfeSefazInfTermCarregList): TJSONValue;
    function TMdfeSefazInfTermCarregListToJson(Source: TMdfeSefazInfTermCarregList): string;
    function TMdfeSefazInfTermCarregListFromJsonValue(Source: TJSONValue): TMdfeSefazInfTermCarregList;
    function TMdfeSefazInfTermCarregListFromJson(Source: string): TMdfeSefazInfTermCarregList;
    function TMdfeSefazInfTermDescarregToJsonValue(Source: TMdfeSefazInfTermDescarreg): TJSONValue;
    function TMdfeSefazInfTermDescarregToJson(Source: TMdfeSefazInfTermDescarreg): string;
    function TMdfeSefazInfTermDescarregFromJsonValue(Source: TJSONValue): TMdfeSefazInfTermDescarreg;
    function TMdfeSefazInfTermDescarregFromJson(Source: string): TMdfeSefazInfTermDescarreg;
    function TMdfeSefazInfTermDescarregListToJsonValue(Source: TMdfeSefazInfTermDescarregList): TJSONValue;
    function TMdfeSefazInfTermDescarregListToJson(Source: TMdfeSefazInfTermDescarregList): string;
    function TMdfeSefazInfTermDescarregListFromJsonValue(Source: TJSONValue): TMdfeSefazInfTermDescarregList;
    function TMdfeSefazInfTermDescarregListFromJson(Source: string): TMdfeSefazInfTermDescarregList;
    function TMdfeSefazInfEmbCombToJsonValue(Source: TMdfeSefazInfEmbComb): TJSONValue;
    function TMdfeSefazInfEmbCombToJson(Source: TMdfeSefazInfEmbComb): string;
    function TMdfeSefazInfEmbCombFromJsonValue(Source: TJSONValue): TMdfeSefazInfEmbComb;
    function TMdfeSefazInfEmbCombFromJson(Source: string): TMdfeSefazInfEmbComb;
    function TMdfeSefazInfEmbCombListToJsonValue(Source: TMdfeSefazInfEmbCombList): TJSONValue;
    function TMdfeSefazInfEmbCombListToJson(Source: TMdfeSefazInfEmbCombList): string;
    function TMdfeSefazInfEmbCombListFromJsonValue(Source: TJSONValue): TMdfeSefazInfEmbCombList;
    function TMdfeSefazInfEmbCombListFromJson(Source: string): TMdfeSefazInfEmbCombList;
    function TMdfeSefazInfUnidCargaVaziaToJsonValue(Source: TMdfeSefazInfUnidCargaVazia): TJSONValue;
    function TMdfeSefazInfUnidCargaVaziaToJson(Source: TMdfeSefazInfUnidCargaVazia): string;
    function TMdfeSefazInfUnidCargaVaziaFromJsonValue(Source: TJSONValue): TMdfeSefazInfUnidCargaVazia;
    function TMdfeSefazInfUnidCargaVaziaFromJson(Source: string): TMdfeSefazInfUnidCargaVazia;
    function TMdfeSefazInfUnidCargaVaziaListToJsonValue(Source: TMdfeSefazInfUnidCargaVaziaList): TJSONValue;
    function TMdfeSefazInfUnidCargaVaziaListToJson(Source: TMdfeSefazInfUnidCargaVaziaList): string;
    function TMdfeSefazInfUnidCargaVaziaListFromJsonValue(Source: TJSONValue): TMdfeSefazInfUnidCargaVaziaList;
    function TMdfeSefazInfUnidCargaVaziaListFromJson(Source: string): TMdfeSefazInfUnidCargaVaziaList;
    function TMdfeSefazInfUnidTranspVaziaToJsonValue(Source: TMdfeSefazInfUnidTranspVazia): TJSONValue;
    function TMdfeSefazInfUnidTranspVaziaToJson(Source: TMdfeSefazInfUnidTranspVazia): string;
    function TMdfeSefazInfUnidTranspVaziaFromJsonValue(Source: TJSONValue): TMdfeSefazInfUnidTranspVazia;
    function TMdfeSefazInfUnidTranspVaziaFromJson(Source: string): TMdfeSefazInfUnidTranspVazia;
    function TMdfeSefazInfUnidTranspVaziaListToJsonValue(Source: TMdfeSefazInfUnidTranspVaziaList): TJSONValue;
    function TMdfeSefazInfUnidTranspVaziaListToJson(Source: TMdfeSefazInfUnidTranspVaziaList): string;
    function TMdfeSefazInfUnidTranspVaziaListFromJsonValue(Source: TJSONValue): TMdfeSefazInfUnidTranspVaziaList;
    function TMdfeSefazInfUnidTranspVaziaListFromJson(Source: string): TMdfeSefazInfUnidTranspVaziaList;
    function TMdfeSefazAquavToJsonValue(Source: TMdfeSefazAquav): TJSONValue;
    function TMdfeSefazAquavToJson(Source: TMdfeSefazAquav): string;
    function TMdfeSefazAquavFromJsonValue(Source: TJSONValue): TMdfeSefazAquav;
    function TMdfeSefazAquavFromJson(Source: string): TMdfeSefazAquav;
    function TMdfeSefazTremToJsonValue(Source: TMdfeSefazTrem): TJSONValue;
    function TMdfeSefazTremToJson(Source: TMdfeSefazTrem): string;
    function TMdfeSefazTremFromJsonValue(Source: TJSONValue): TMdfeSefazTrem;
    function TMdfeSefazTremFromJson(Source: string): TMdfeSefazTrem;
    function TMdfeSefazVagToJsonValue(Source: TMdfeSefazVag): TJSONValue;
    function TMdfeSefazVagToJson(Source: TMdfeSefazVag): string;
    function TMdfeSefazVagFromJsonValue(Source: TJSONValue): TMdfeSefazVag;
    function TMdfeSefazVagFromJson(Source: string): TMdfeSefazVag;
    function TMdfeSefazVagListToJsonValue(Source: TMdfeSefazVagList): TJSONValue;
    function TMdfeSefazVagListToJson(Source: TMdfeSefazVagList): string;
    function TMdfeSefazVagListFromJsonValue(Source: TJSONValue): TMdfeSefazVagList;
    function TMdfeSefazVagListFromJson(Source: string): TMdfeSefazVagList;
    function TMdfeSefazFerrovToJsonValue(Source: TMdfeSefazFerrov): TJSONValue;
    function TMdfeSefazFerrovToJson(Source: TMdfeSefazFerrov): string;
    function TMdfeSefazFerrovFromJsonValue(Source: TJSONValue): TMdfeSefazFerrov;
    function TMdfeSefazFerrovFromJson(Source: string): TMdfeSefazFerrov;
    function TMdfeSefazInfModalToJsonValue(Source: TMdfeSefazInfModal): TJSONValue;
    function TMdfeSefazInfModalToJson(Source: TMdfeSefazInfModal): string;
    function TMdfeSefazInfModalFromJsonValue(Source: TJSONValue): TMdfeSefazInfModal;
    function TMdfeSefazInfModalFromJson(Source: string): TMdfeSefazInfModal;
    function TMdfeSefazLacUnidTranspToJsonValue(Source: TMdfeSefazLacUnidTransp): TJSONValue;
    function TMdfeSefazLacUnidTranspToJson(Source: TMdfeSefazLacUnidTransp): string;
    function TMdfeSefazLacUnidTranspFromJsonValue(Source: TJSONValue): TMdfeSefazLacUnidTransp;
    function TMdfeSefazLacUnidTranspFromJson(Source: string): TMdfeSefazLacUnidTransp;
    function TMdfeSefazLacUnidTranspListToJsonValue(Source: TMdfeSefazLacUnidTranspList): TJSONValue;
    function TMdfeSefazLacUnidTranspListToJson(Source: TMdfeSefazLacUnidTranspList): string;
    function TMdfeSefazLacUnidTranspListFromJsonValue(Source: TJSONValue): TMdfeSefazLacUnidTranspList;
    function TMdfeSefazLacUnidTranspListFromJson(Source: string): TMdfeSefazLacUnidTranspList;
    function TMdfeSefazLacUnidCargaToJsonValue(Source: TMdfeSefazLacUnidCarga): TJSONValue;
    function TMdfeSefazLacUnidCargaToJson(Source: TMdfeSefazLacUnidCarga): string;
    function TMdfeSefazLacUnidCargaFromJsonValue(Source: TJSONValue): TMdfeSefazLacUnidCarga;
    function TMdfeSefazLacUnidCargaFromJson(Source: string): TMdfeSefazLacUnidCarga;
    function TMdfeSefazLacUnidCargaListToJsonValue(Source: TMdfeSefazLacUnidCargaList): TJSONValue;
    function TMdfeSefazLacUnidCargaListToJson(Source: TMdfeSefazLacUnidCargaList): string;
    function TMdfeSefazLacUnidCargaListFromJsonValue(Source: TJSONValue): TMdfeSefazLacUnidCargaList;
    function TMdfeSefazLacUnidCargaListFromJson(Source: string): TMdfeSefazLacUnidCargaList;
    function TMdfeSefazUnidCargaToJsonValue(Source: TMdfeSefazUnidCarga): TJSONValue;
    function TMdfeSefazUnidCargaToJson(Source: TMdfeSefazUnidCarga): string;
    function TMdfeSefazUnidCargaFromJsonValue(Source: TJSONValue): TMdfeSefazUnidCarga;
    function TMdfeSefazUnidCargaFromJson(Source: string): TMdfeSefazUnidCarga;
    function TMdfeSefazUnidCargaListToJsonValue(Source: TMdfeSefazUnidCargaList): TJSONValue;
    function TMdfeSefazUnidCargaListToJson(Source: TMdfeSefazUnidCargaList): string;
    function TMdfeSefazUnidCargaListFromJsonValue(Source: TJSONValue): TMdfeSefazUnidCargaList;
    function TMdfeSefazUnidCargaListFromJson(Source: string): TMdfeSefazUnidCargaList;
    function TMdfeSefazUnidadeTranspToJsonValue(Source: TMdfeSefazUnidadeTransp): TJSONValue;
    function TMdfeSefazUnidadeTranspToJson(Source: TMdfeSefazUnidadeTransp): string;
    function TMdfeSefazUnidadeTranspFromJsonValue(Source: TJSONValue): TMdfeSefazUnidadeTransp;
    function TMdfeSefazUnidadeTranspFromJson(Source: string): TMdfeSefazUnidadeTransp;
    function TMdfeSefazUnidadeTranspListToJsonValue(Source: TMdfeSefazUnidadeTranspList): TJSONValue;
    function TMdfeSefazUnidadeTranspListToJson(Source: TMdfeSefazUnidadeTranspList): string;
    function TMdfeSefazUnidadeTranspListFromJsonValue(Source: TJSONValue): TMdfeSefazUnidadeTranspList;
    function TMdfeSefazUnidadeTranspListFromJson(Source: string): TMdfeSefazUnidadeTranspList;
    function TMdfeSefazPeriToJsonValue(Source: TMdfeSefazPeri): TJSONValue;
    function TMdfeSefazPeriToJson(Source: TMdfeSefazPeri): string;
    function TMdfeSefazPeriFromJsonValue(Source: TJSONValue): TMdfeSefazPeri;
    function TMdfeSefazPeriFromJson(Source: string): TMdfeSefazPeri;
    function TMdfeSefazPeriListToJsonValue(Source: TMdfeSefazPeriList): TJSONValue;
    function TMdfeSefazPeriListToJson(Source: TMdfeSefazPeriList): string;
    function TMdfeSefazPeriListFromJsonValue(Source: TJSONValue): TMdfeSefazPeriList;
    function TMdfeSefazPeriListFromJson(Source: string): TMdfeSefazPeriList;
    function TMdfeSefazInfEntregaParcialToJsonValue(Source: TMdfeSefazInfEntregaParcial): TJSONValue;
    function TMdfeSefazInfEntregaParcialToJson(Source: TMdfeSefazInfEntregaParcial): string;
    function TMdfeSefazInfEntregaParcialFromJsonValue(Source: TJSONValue): TMdfeSefazInfEntregaParcial;
    function TMdfeSefazInfEntregaParcialFromJson(Source: string): TMdfeSefazInfEntregaParcial;
    function TMdfeSefazInfCTeToJsonValue(Source: TMdfeSefazInfCTe): TJSONValue;
    function TMdfeSefazInfCTeToJson(Source: TMdfeSefazInfCTe): string;
    function TMdfeSefazInfCTeFromJsonValue(Source: TJSONValue): TMdfeSefazInfCTe;
    function TMdfeSefazInfCTeFromJson(Source: string): TMdfeSefazInfCTe;
    function TMdfeSefazInfCTeListToJsonValue(Source: TMdfeSefazInfCTeList): TJSONValue;
    function TMdfeSefazInfCTeListToJson(Source: TMdfeSefazInfCTeList): string;
    function TMdfeSefazInfCTeListFromJsonValue(Source: TJSONValue): TMdfeSefazInfCTeList;
    function TMdfeSefazInfCTeListFromJson(Source: string): TMdfeSefazInfCTeList;
    function TMdfeSefazInfNFePeriToJsonValue(Source: TMdfeSefazInfNFePeri): TJSONValue;
    function TMdfeSefazInfNFePeriToJson(Source: TMdfeSefazInfNFePeri): string;
    function TMdfeSefazInfNFePeriFromJsonValue(Source: TJSONValue): TMdfeSefazInfNFePeri;
    function TMdfeSefazInfNFePeriFromJson(Source: string): TMdfeSefazInfNFePeri;
    function TMdfeSefazInfNFePeriListToJsonValue(Source: TMdfeSefazInfNFePeriList): TJSONValue;
    function TMdfeSefazInfNFePeriListToJson(Source: TMdfeSefazInfNFePeriList): string;
    function TMdfeSefazInfNFePeriListFromJsonValue(Source: TJSONValue): TMdfeSefazInfNFePeriList;
    function TMdfeSefazInfNFePeriListFromJson(Source: string): TMdfeSefazInfNFePeriList;
    function TMdfeSefazInfNFeToJsonValue(Source: TMdfeSefazInfNFe): TJSONValue;
    function TMdfeSefazInfNFeToJson(Source: TMdfeSefazInfNFe): string;
    function TMdfeSefazInfNFeFromJsonValue(Source: TJSONValue): TMdfeSefazInfNFe;
    function TMdfeSefazInfNFeFromJson(Source: string): TMdfeSefazInfNFe;
    function TMdfeSefazInfNFeListToJsonValue(Source: TMdfeSefazInfNFeList): TJSONValue;
    function TMdfeSefazInfNFeListToJson(Source: TMdfeSefazInfNFeList): string;
    function TMdfeSefazInfNFeListFromJsonValue(Source: TJSONValue): TMdfeSefazInfNFeList;
    function TMdfeSefazInfNFeListFromJson(Source: string): TMdfeSefazInfNFeList;
    function TMdfeSefazInfMDFeTranspPeriToJsonValue(Source: TMdfeSefazInfMDFeTranspPeri): TJSONValue;
    function TMdfeSefazInfMDFeTranspPeriToJson(Source: TMdfeSefazInfMDFeTranspPeri): string;
    function TMdfeSefazInfMDFeTranspPeriFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeTranspPeri;
    function TMdfeSefazInfMDFeTranspPeriFromJson(Source: string): TMdfeSefazInfMDFeTranspPeri;
    function TMdfeSefazInfMDFeTranspPeriListToJsonValue(Source: TMdfeSefazInfMDFeTranspPeriList): TJSONValue;
    function TMdfeSefazInfMDFeTranspPeriListToJson(Source: TMdfeSefazInfMDFeTranspPeriList): string;
    function TMdfeSefazInfMDFeTranspPeriListFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeTranspPeriList;
    function TMdfeSefazInfMDFeTranspPeriListFromJson(Source: string): TMdfeSefazInfMDFeTranspPeriList;
    function TMdfeSefazInfMDFeTranspToJsonValue(Source: TMdfeSefazInfMDFeTransp): TJSONValue;
    function TMdfeSefazInfMDFeTranspToJson(Source: TMdfeSefazInfMDFeTransp): string;
    function TMdfeSefazInfMDFeTranspFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeTransp;
    function TMdfeSefazInfMDFeTranspFromJson(Source: string): TMdfeSefazInfMDFeTransp;
    function TMdfeSefazInfMDFeTranspListToJsonValue(Source: TMdfeSefazInfMDFeTranspList): TJSONValue;
    function TMdfeSefazInfMDFeTranspListToJson(Source: TMdfeSefazInfMDFeTranspList): string;
    function TMdfeSefazInfMDFeTranspListFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeTranspList;
    function TMdfeSefazInfMDFeTranspListFromJson(Source: string): TMdfeSefazInfMDFeTranspList;
    function TMdfeSefazInfMunDescargaToJsonValue(Source: TMdfeSefazInfMunDescarga): TJSONValue;
    function TMdfeSefazInfMunDescargaToJson(Source: TMdfeSefazInfMunDescarga): string;
    function TMdfeSefazInfMunDescargaFromJsonValue(Source: TJSONValue): TMdfeSefazInfMunDescarga;
    function TMdfeSefazInfMunDescargaFromJson(Source: string): TMdfeSefazInfMunDescarga;
    function TMdfeSefazInfMunDescargaListToJsonValue(Source: TMdfeSefazInfMunDescargaList): TJSONValue;
    function TMdfeSefazInfMunDescargaListToJson(Source: TMdfeSefazInfMunDescargaList): string;
    function TMdfeSefazInfMunDescargaListFromJsonValue(Source: TJSONValue): TMdfeSefazInfMunDescargaList;
    function TMdfeSefazInfMunDescargaListFromJson(Source: string): TMdfeSefazInfMunDescargaList;
    function TMdfeSefazInfDocToJsonValue(Source: TMdfeSefazInfDoc): TJSONValue;
    function TMdfeSefazInfDocToJson(Source: TMdfeSefazInfDoc): string;
    function TMdfeSefazInfDocFromJsonValue(Source: TJSONValue): TMdfeSefazInfDoc;
    function TMdfeSefazInfDocFromJson(Source: string): TMdfeSefazInfDoc;
    function TMdfeSefazInfRespToJsonValue(Source: TMdfeSefazInfResp): TJSONValue;
    function TMdfeSefazInfRespToJson(Source: TMdfeSefazInfResp): string;
    function TMdfeSefazInfRespFromJsonValue(Source: TJSONValue): TMdfeSefazInfResp;
    function TMdfeSefazInfRespFromJson(Source: string): TMdfeSefazInfResp;
    function TMdfeSefazInfSegToJsonValue(Source: TMdfeSefazInfSeg): TJSONValue;
    function TMdfeSefazInfSegToJson(Source: TMdfeSefazInfSeg): string;
    function TMdfeSefazInfSegFromJsonValue(Source: TJSONValue): TMdfeSefazInfSeg;
    function TMdfeSefazInfSegFromJson(Source: string): TMdfeSefazInfSeg;
    function TMdfeSefazSegToJsonValue(Source: TMdfeSefazSeg): TJSONValue;
    function TMdfeSefazSegToJson(Source: TMdfeSefazSeg): string;
    function TMdfeSefazSegFromJsonValue(Source: TJSONValue): TMdfeSefazSeg;
    function TMdfeSefazSegFromJson(Source: string): TMdfeSefazSeg;
    function TMdfeSefazSegListToJsonValue(Source: TMdfeSefazSegList): TJSONValue;
    function TMdfeSefazSegListToJson(Source: TMdfeSefazSegList): string;
    function TMdfeSefazSegListFromJsonValue(Source: TJSONValue): TMdfeSefazSegList;
    function TMdfeSefazSegListFromJson(Source: string): TMdfeSefazSegList;
    function TMdfeSefazInfLocalCarregaToJsonValue(Source: TMdfeSefazInfLocalCarrega): TJSONValue;
    function TMdfeSefazInfLocalCarregaToJson(Source: TMdfeSefazInfLocalCarrega): string;
    function TMdfeSefazInfLocalCarregaFromJsonValue(Source: TJSONValue): TMdfeSefazInfLocalCarrega;
    function TMdfeSefazInfLocalCarregaFromJson(Source: string): TMdfeSefazInfLocalCarrega;
    function TMdfeSefazInfLocalDescarregaToJsonValue(Source: TMdfeSefazInfLocalDescarrega): TJSONValue;
    function TMdfeSefazInfLocalDescarregaToJson(Source: TMdfeSefazInfLocalDescarrega): string;
    function TMdfeSefazInfLocalDescarregaFromJsonValue(Source: TJSONValue): TMdfeSefazInfLocalDescarrega;
    function TMdfeSefazInfLocalDescarregaFromJson(Source: string): TMdfeSefazInfLocalDescarrega;
    function TMdfeSefazInfLotacaoToJsonValue(Source: TMdfeSefazInfLotacao): TJSONValue;
    function TMdfeSefazInfLotacaoToJson(Source: TMdfeSefazInfLotacao): string;
    function TMdfeSefazInfLotacaoFromJsonValue(Source: TJSONValue): TMdfeSefazInfLotacao;
    function TMdfeSefazInfLotacaoFromJson(Source: string): TMdfeSefazInfLotacao;
    function TMdfeSefazProdPredToJsonValue(Source: TMdfeSefazProdPred): TJSONValue;
    function TMdfeSefazProdPredToJson(Source: TMdfeSefazProdPred): string;
    function TMdfeSefazProdPredFromJsonValue(Source: TJSONValue): TMdfeSefazProdPred;
    function TMdfeSefazProdPredFromJson(Source: string): TMdfeSefazProdPred;
    function TMdfeSefazTotToJsonValue(Source: TMdfeSefazTot): TJSONValue;
    function TMdfeSefazTotToJson(Source: TMdfeSefazTot): string;
    function TMdfeSefazTotFromJsonValue(Source: TJSONValue): TMdfeSefazTot;
    function TMdfeSefazTotFromJson(Source: string): TMdfeSefazTot;
    function TMdfeSefazLacresToJsonValue(Source: TMdfeSefazLacres): TJSONValue;
    function TMdfeSefazLacresToJson(Source: TMdfeSefazLacres): string;
    function TMdfeSefazLacresFromJsonValue(Source: TJSONValue): TMdfeSefazLacres;
    function TMdfeSefazLacresFromJson(Source: string): TMdfeSefazLacres;
    function TMdfeSefazLacresListToJsonValue(Source: TMdfeSefazLacresList): TJSONValue;
    function TMdfeSefazLacresListToJson(Source: TMdfeSefazLacresList): string;
    function TMdfeSefazLacresListFromJsonValue(Source: TJSONValue): TMdfeSefazLacresList;
    function TMdfeSefazLacresListFromJson(Source: string): TMdfeSefazLacresList;
    function TMdfeSefazAutXMLToJsonValue(Source: TMdfeSefazAutXML): TJSONValue;
    function TMdfeSefazAutXMLToJson(Source: TMdfeSefazAutXML): string;
    function TMdfeSefazAutXMLFromJsonValue(Source: TJSONValue): TMdfeSefazAutXML;
    function TMdfeSefazAutXMLFromJson(Source: string): TMdfeSefazAutXML;
    function TMdfeSefazAutXMLListToJsonValue(Source: TMdfeSefazAutXMLList): TJSONValue;
    function TMdfeSefazAutXMLListToJson(Source: TMdfeSefazAutXMLList): string;
    function TMdfeSefazAutXMLListFromJsonValue(Source: TJSONValue): TMdfeSefazAutXMLList;
    function TMdfeSefazAutXMLListFromJson(Source: string): TMdfeSefazAutXMLList;
    function TMdfeSefazInfAdicToJsonValue(Source: TMdfeSefazInfAdic): TJSONValue;
    function TMdfeSefazInfAdicToJson(Source: TMdfeSefazInfAdic): string;
    function TMdfeSefazInfAdicFromJsonValue(Source: TJSONValue): TMdfeSefazInfAdic;
    function TMdfeSefazInfAdicFromJson(Source: string): TMdfeSefazInfAdic;
    function TMdfeSefazRespTecToJsonValue(Source: TMdfeSefazRespTec): TJSONValue;
    function TMdfeSefazRespTecToJson(Source: TMdfeSefazRespTec): string;
    function TMdfeSefazRespTecFromJsonValue(Source: TJSONValue): TMdfeSefazRespTec;
    function TMdfeSefazRespTecFromJson(Source: string): TMdfeSefazRespTec;
    function TMdfeSefazInfSolicNFFToJsonValue(Source: TMdfeSefazInfSolicNFF): TJSONValue;
    function TMdfeSefazInfSolicNFFToJson(Source: TMdfeSefazInfSolicNFF): string;
    function TMdfeSefazInfSolicNFFFromJsonValue(Source: TJSONValue): TMdfeSefazInfSolicNFF;
    function TMdfeSefazInfSolicNFFFromJson(Source: string): TMdfeSefazInfSolicNFF;
    function TMdfeSefazInfMDFeToJsonValue(Source: TMdfeSefazInfMDFe): TJSONValue;
    function TMdfeSefazInfMDFeToJson(Source: TMdfeSefazInfMDFe): string;
    function TMdfeSefazInfMDFeFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFe;
    function TMdfeSefazInfMDFeFromJson(Source: string): TMdfeSefazInfMDFe;
    function TMdfeSefazInfMDFeSuplToJsonValue(Source: TMdfeSefazInfMDFeSupl): TJSONValue;
    function TMdfeSefazInfMDFeSuplToJson(Source: TMdfeSefazInfMDFeSupl): string;
    function TMdfeSefazInfMDFeSuplFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeSupl;
    function TMdfeSefazInfMDFeSuplFromJson(Source: string): TMdfeSefazInfMDFeSupl;
    function TMdfePedidoEmissaoToJsonValue(Source: TMdfePedidoEmissao): TJSONValue;
    function TMdfePedidoEmissaoToJson(Source: TMdfePedidoEmissao): string;
    function TMdfePedidoEmissaoFromJsonValue(Source: TJSONValue): TMdfePedidoEmissao;
    function TMdfePedidoEmissaoFromJson(Source: string): TMdfePedidoEmissao;
    function TMdfePedidoEmissaoListToJsonValue(Source: TMdfePedidoEmissaoList): TJSONValue;
    function TMdfePedidoEmissaoListToJson(Source: TMdfePedidoEmissaoList): string;
    function TMdfePedidoEmissaoListFromJsonValue(Source: TJSONValue): TMdfePedidoEmissaoList;
    function TMdfePedidoEmissaoListFromJson(Source: string): TMdfePedidoEmissaoList;
    function TMdfePedidoEmissaoLoteToJsonValue(Source: TMdfePedidoEmissaoLote): TJSONValue;
    function TMdfePedidoEmissaoLoteToJson(Source: TMdfePedidoEmissaoLote): string;
    function TMdfePedidoEmissaoLoteFromJsonValue(Source: TJSONValue): TMdfePedidoEmissaoLote;
    function TMdfePedidoEmissaoLoteFromJson(Source: string): TMdfePedidoEmissaoLote;
    function TDfeReciboToJsonValue(Source: TDfeRecibo): TJSONValue;
    function TDfeReciboToJson(Source: TDfeRecibo): string;
    function TDfeReciboFromJsonValue(Source: TJSONValue): TDfeRecibo;
    function TDfeReciboFromJson(Source: string): TDfeRecibo;
    function TDfeLoteToJsonValue(Source: TDfeLote): TJSONValue;
    function TDfeLoteToJson(Source: TDfeLote): string;
    function TDfeLoteFromJsonValue(Source: TJSONValue): TDfeLote;
    function TDfeLoteFromJson(Source: string): TDfeLote;
    function TDfeLoteListToJsonValue(Source: TDfeLoteList): TJSONValue;
    function TDfeLoteListToJson(Source: TDfeLoteList): string;
    function TDfeLoteListFromJsonValue(Source: TJSONValue): TDfeLoteList;
    function TDfeLoteListFromJson(Source: string): TDfeLoteList;
    function TDfeLoteListagemToJsonValue(Source: TDfeLoteListagem): TJSONValue;
    function TDfeLoteListagemToJson(Source: TDfeLoteListagem): string;
    function TDfeLoteListagemFromJsonValue(Source: TJSONValue): TDfeLoteListagem;
    function TDfeLoteListagemFromJson(Source: string): TDfeLoteListagem;
    function TMdfePedidoCancelamentoToJsonValue(Source: TMdfePedidoCancelamento): TJSONValue;
    function TMdfePedidoCancelamentoToJson(Source: TMdfePedidoCancelamento): string;
    function TMdfePedidoCancelamentoFromJsonValue(Source: TJSONValue): TMdfePedidoCancelamento;
    function TMdfePedidoCancelamentoFromJson(Source: string): TMdfePedidoCancelamento;
    function TMdfePedidoEncerramentoToJsonValue(Source: TMdfePedidoEncerramento): TJSONValue;
    function TMdfePedidoEncerramentoToJson(Source: TMdfePedidoEncerramento): string;
    function TMdfePedidoEncerramentoFromJsonValue(Source: TJSONValue): TMdfePedidoEncerramento;
    function TMdfePedidoEncerramentoFromJson(Source: string): TMdfePedidoEncerramento;
    function TMdfeEncerramentoToJsonValue(Source: TMdfeEncerramento): TJSONValue;
    function TMdfeEncerramentoToJson(Source: TMdfeEncerramento): string;
    function TMdfeEncerramentoFromJsonValue(Source: TJSONValue): TMdfeEncerramento;
    function TMdfeEncerramentoFromJson(Source: string): TMdfeEncerramento;
    function TMdfePedidoInclusaoCondutorToJsonValue(Source: TMdfePedidoInclusaoCondutor): TJSONValue;
    function TMdfePedidoInclusaoCondutorToJson(Source: TMdfePedidoInclusaoCondutor): string;
    function TMdfePedidoInclusaoCondutorFromJsonValue(Source: TJSONValue): TMdfePedidoInclusaoCondutor;
    function TMdfePedidoInclusaoCondutorFromJson(Source: string): TMdfePedidoInclusaoCondutor;
    function TMdfeInclusaoCondutorToJsonValue(Source: TMdfeInclusaoCondutor): TJSONValue;
    function TMdfeInclusaoCondutorToJson(Source: TMdfeInclusaoCondutor): string;
    function TMdfeInclusaoCondutorFromJsonValue(Source: TJSONValue): TMdfeInclusaoCondutor;
    function TMdfeInclusaoCondutorFromJson(Source: string): TMdfeInclusaoCondutor;
    function TMdfeDocumentoVinculadoToJsonValue(Source: TMdfeDocumentoVinculado): TJSONValue;
    function TMdfeDocumentoVinculadoToJson(Source: TMdfeDocumentoVinculado): string;
    function TMdfeDocumentoVinculadoFromJsonValue(Source: TJSONValue): TMdfeDocumentoVinculado;
    function TMdfeDocumentoVinculadoFromJson(Source: string): TMdfeDocumentoVinculado;
    function TMdfeDocumentoVinculadoListToJsonValue(Source: TMdfeDocumentoVinculadoList): TJSONValue;
    function TMdfeDocumentoVinculadoListToJson(Source: TMdfeDocumentoVinculadoList): string;
    function TMdfeDocumentoVinculadoListFromJsonValue(Source: TJSONValue): TMdfeDocumentoVinculadoList;
    function TMdfeDocumentoVinculadoListFromJson(Source: string): TMdfeDocumentoVinculadoList;
    function TMdfePedidoInclusaoDfeToJsonValue(Source: TMdfePedidoInclusaoDfe): TJSONValue;
    function TMdfePedidoInclusaoDfeToJson(Source: TMdfePedidoInclusaoDfe): string;
    function TMdfePedidoInclusaoDfeFromJsonValue(Source: TJSONValue): TMdfePedidoInclusaoDfe;
    function TMdfePedidoInclusaoDfeFromJson(Source: string): TMdfePedidoInclusaoDfe;
    function TMdfeInclusaoDfeToJsonValue(Source: TMdfeInclusaoDfe): TJSONValue;
    function TMdfeInclusaoDfeToJson(Source: TMdfeInclusaoDfe): string;
    function TMdfeInclusaoDfeFromJsonValue(Source: TJSONValue): TMdfeInclusaoDfe;
    function TMdfeInclusaoDfeFromJson(Source: string): TMdfeInclusaoDfe;
    function TDfeContribuinteEnderecoToJsonValue(Source: TDfeContribuinteEndereco): TJSONValue;
    function TDfeContribuinteEnderecoToJson(Source: TDfeContribuinteEndereco): string;
    function TDfeContribuinteEnderecoFromJsonValue(Source: TJSONValue): TDfeContribuinteEndereco;
    function TDfeContribuinteEnderecoFromJson(Source: string): TDfeContribuinteEndereco;
    function TDfeContribuinteInfCadToJsonValue(Source: TDfeContribuinteInfCad): TJSONValue;
    function TDfeContribuinteInfCadToJson(Source: TDfeContribuinteInfCad): string;
    function TDfeContribuinteInfCadFromJsonValue(Source: TJSONValue): TDfeContribuinteInfCad;
    function TDfeContribuinteInfCadFromJson(Source: string): TDfeContribuinteInfCad;
    function TDfeContribuinteInfCadListToJsonValue(Source: TDfeContribuinteInfCadList): TJSONValue;
    function TDfeContribuinteInfCadListToJson(Source: TDfeContribuinteInfCadList): string;
    function TDfeContribuinteInfCadListFromJsonValue(Source: TJSONValue): TDfeContribuinteInfCadList;
    function TDfeContribuinteInfCadListFromJson(Source: string): TDfeContribuinteInfCadList;
    function TDfeContribuinteInfConsToJsonValue(Source: TDfeContribuinteInfCons): TJSONValue;
    function TDfeContribuinteInfConsToJson(Source: TDfeContribuinteInfCons): string;
    function TDfeContribuinteInfConsFromJsonValue(Source: TJSONValue): TDfeContribuinteInfCons;
    function TDfeContribuinteInfConsFromJson(Source: string): TDfeContribuinteInfCons;
    function TNfeSefazRefNFToJsonValue(Source: TNfeSefazRefNF): TJSONValue;
    function TNfeSefazRefNFToJson(Source: TNfeSefazRefNF): string;
    function TNfeSefazRefNFFromJsonValue(Source: TJSONValue): TNfeSefazRefNF;
    function TNfeSefazRefNFFromJson(Source: string): TNfeSefazRefNF;
    function TNfeSefazRefNFPToJsonValue(Source: TNfeSefazRefNFP): TJSONValue;
    function TNfeSefazRefNFPToJson(Source: TNfeSefazRefNFP): string;
    function TNfeSefazRefNFPFromJsonValue(Source: TJSONValue): TNfeSefazRefNFP;
    function TNfeSefazRefNFPFromJson(Source: string): TNfeSefazRefNFP;
    function TNfeSefazRefECFToJsonValue(Source: TNfeSefazRefECF): TJSONValue;
    function TNfeSefazRefECFToJson(Source: TNfeSefazRefECF): string;
    function TNfeSefazRefECFFromJsonValue(Source: TJSONValue): TNfeSefazRefECF;
    function TNfeSefazRefECFFromJson(Source: string): TNfeSefazRefECF;
    function TNfeSefazNFrefToJsonValue(Source: TNfeSefazNFref): TJSONValue;
    function TNfeSefazNFrefToJson(Source: TNfeSefazNFref): string;
    function TNfeSefazNFrefFromJsonValue(Source: TJSONValue): TNfeSefazNFref;
    function TNfeSefazNFrefFromJson(Source: string): TNfeSefazNFref;
    function TNfeSefazNFrefListToJsonValue(Source: TNfeSefazNFrefList): TJSONValue;
    function TNfeSefazNFrefListToJson(Source: TNfeSefazNFrefList): string;
    function TNfeSefazNFrefListFromJsonValue(Source: TJSONValue): TNfeSefazNFrefList;
    function TNfeSefazNFrefListFromJson(Source: string): TNfeSefazNFrefList;
    function TNfeSefazIdeToJsonValue(Source: TNfeSefazIde): TJSONValue;
    function TNfeSefazIdeToJson(Source: TNfeSefazIde): string;
    function TNfeSefazIdeFromJsonValue(Source: TJSONValue): TNfeSefazIde;
    function TNfeSefazIdeFromJson(Source: string): TNfeSefazIde;
    function TNfeSefazEnderEmiToJsonValue(Source: TNfeSefazEnderEmi): TJSONValue;
    function TNfeSefazEnderEmiToJson(Source: TNfeSefazEnderEmi): string;
    function TNfeSefazEnderEmiFromJsonValue(Source: TJSONValue): TNfeSefazEnderEmi;
    function TNfeSefazEnderEmiFromJson(Source: string): TNfeSefazEnderEmi;
    function TNfeSefazEmitToJsonValue(Source: TNfeSefazEmit): TJSONValue;
    function TNfeSefazEmitToJson(Source: TNfeSefazEmit): string;
    function TNfeSefazEmitFromJsonValue(Source: TJSONValue): TNfeSefazEmit;
    function TNfeSefazEmitFromJson(Source: string): TNfeSefazEmit;
    function TNfeSefazAvulsaToJsonValue(Source: TNfeSefazAvulsa): TJSONValue;
    function TNfeSefazAvulsaToJson(Source: TNfeSefazAvulsa): string;
    function TNfeSefazAvulsaFromJsonValue(Source: TJSONValue): TNfeSefazAvulsa;
    function TNfeSefazAvulsaFromJson(Source: string): TNfeSefazAvulsa;
    function TNfeSefazEnderecoToJsonValue(Source: TNfeSefazEndereco): TJSONValue;
    function TNfeSefazEnderecoToJson(Source: TNfeSefazEndereco): string;
    function TNfeSefazEnderecoFromJsonValue(Source: TJSONValue): TNfeSefazEndereco;
    function TNfeSefazEnderecoFromJson(Source: string): TNfeSefazEndereco;
    function TNfeSefazDestToJsonValue(Source: TNfeSefazDest): TJSONValue;
    function TNfeSefazDestToJson(Source: TNfeSefazDest): string;
    function TNfeSefazDestFromJsonValue(Source: TJSONValue): TNfeSefazDest;
    function TNfeSefazDestFromJson(Source: string): TNfeSefazDest;
    function TNfeSefazLocalToJsonValue(Source: TNfeSefazLocal): TJSONValue;
    function TNfeSefazLocalToJson(Source: TNfeSefazLocal): string;
    function TNfeSefazLocalFromJsonValue(Source: TJSONValue): TNfeSefazLocal;
    function TNfeSefazLocalFromJson(Source: string): TNfeSefazLocal;
    function TNfeSefazAutXMLToJsonValue(Source: TNfeSefazAutXML): TJSONValue;
    function TNfeSefazAutXMLToJson(Source: TNfeSefazAutXML): string;
    function TNfeSefazAutXMLFromJsonValue(Source: TJSONValue): TNfeSefazAutXML;
    function TNfeSefazAutXMLFromJson(Source: string): TNfeSefazAutXML;
    function TNfeSefazAutXMLListToJsonValue(Source: TNfeSefazAutXMLList): TJSONValue;
    function TNfeSefazAutXMLListToJson(Source: TNfeSefazAutXMLList): string;
    function TNfeSefazAutXMLListFromJsonValue(Source: TJSONValue): TNfeSefazAutXMLList;
    function TNfeSefazAutXMLListFromJson(Source: string): TNfeSefazAutXMLList;
    function TNfeSefazGCredToJsonValue(Source: TNfeSefazGCred): TJSONValue;
    function TNfeSefazGCredToJson(Source: TNfeSefazGCred): string;
    function TNfeSefazGCredFromJsonValue(Source: TJSONValue): TNfeSefazGCred;
    function TNfeSefazGCredFromJson(Source: string): TNfeSefazGCred;
    function TNfeSefazGCredListToJsonValue(Source: TNfeSefazGCredList): TJSONValue;
    function TNfeSefazGCredListToJson(Source: TNfeSefazGCredList): string;
    function TNfeSefazGCredListFromJsonValue(Source: TJSONValue): TNfeSefazGCredList;
    function TNfeSefazGCredListFromJson(Source: string): TNfeSefazGCredList;
    function TNfeSefazAdiToJsonValue(Source: TNfeSefazAdi): TJSONValue;
    function TNfeSefazAdiToJson(Source: TNfeSefazAdi): string;
    function TNfeSefazAdiFromJsonValue(Source: TJSONValue): TNfeSefazAdi;
    function TNfeSefazAdiFromJson(Source: string): TNfeSefazAdi;
    function TNfeSefazAdiListToJsonValue(Source: TNfeSefazAdiList): TJSONValue;
    function TNfeSefazAdiListToJson(Source: TNfeSefazAdiList): string;
    function TNfeSefazAdiListFromJsonValue(Source: TJSONValue): TNfeSefazAdiList;
    function TNfeSefazAdiListFromJson(Source: string): TNfeSefazAdiList;
    function TNfeSefazDIToJsonValue(Source: TNfeSefazDI): TJSONValue;
    function TNfeSefazDIToJson(Source: TNfeSefazDI): string;
    function TNfeSefazDIFromJsonValue(Source: TJSONValue): TNfeSefazDI;
    function TNfeSefazDIFromJson(Source: string): TNfeSefazDI;
    function TNfeSefazDIListToJsonValue(Source: TNfeSefazDIList): TJSONValue;
    function TNfeSefazDIListToJson(Source: TNfeSefazDIList): string;
    function TNfeSefazDIListFromJsonValue(Source: TJSONValue): TNfeSefazDIList;
    function TNfeSefazDIListFromJson(Source: string): TNfeSefazDIList;
    function TNfeSefazExportIndToJsonValue(Source: TNfeSefazExportInd): TJSONValue;
    function TNfeSefazExportIndToJson(Source: TNfeSefazExportInd): string;
    function TNfeSefazExportIndFromJsonValue(Source: TJSONValue): TNfeSefazExportInd;
    function TNfeSefazExportIndFromJson(Source: string): TNfeSefazExportInd;
    function TNfeSefazDetExportToJsonValue(Source: TNfeSefazDetExport): TJSONValue;
    function TNfeSefazDetExportToJson(Source: TNfeSefazDetExport): string;
    function TNfeSefazDetExportFromJsonValue(Source: TJSONValue): TNfeSefazDetExport;
    function TNfeSefazDetExportFromJson(Source: string): TNfeSefazDetExport;
    function TNfeSefazDetExportListToJsonValue(Source: TNfeSefazDetExportList): TJSONValue;
    function TNfeSefazDetExportListToJson(Source: TNfeSefazDetExportList): string;
    function TNfeSefazDetExportListFromJsonValue(Source: TJSONValue): TNfeSefazDetExportList;
    function TNfeSefazDetExportListFromJson(Source: string): TNfeSefazDetExportList;
    function TNfeSefazRastroToJsonValue(Source: TNfeSefazRastro): TJSONValue;
    function TNfeSefazRastroToJson(Source: TNfeSefazRastro): string;
    function TNfeSefazRastroFromJsonValue(Source: TJSONValue): TNfeSefazRastro;
    function TNfeSefazRastroFromJson(Source: string): TNfeSefazRastro;
    function TNfeSefazRastroListToJsonValue(Source: TNfeSefazRastroList): TJSONValue;
    function TNfeSefazRastroListToJson(Source: TNfeSefazRastroList): string;
    function TNfeSefazRastroListFromJsonValue(Source: TJSONValue): TNfeSefazRastroList;
    function TNfeSefazRastroListFromJson(Source: string): TNfeSefazRastroList;
    function TNfeSefazInfProdNFFToJsonValue(Source: TNfeSefazInfProdNFF): TJSONValue;
    function TNfeSefazInfProdNFFToJson(Source: TNfeSefazInfProdNFF): string;
    function TNfeSefazInfProdNFFFromJsonValue(Source: TJSONValue): TNfeSefazInfProdNFF;
    function TNfeSefazInfProdNFFFromJson(Source: string): TNfeSefazInfProdNFF;
    function TNfeSefazInfProdEmbToJsonValue(Source: TNfeSefazInfProdEmb): TJSONValue;
    function TNfeSefazInfProdEmbToJson(Source: TNfeSefazInfProdEmb): string;
    function TNfeSefazInfProdEmbFromJsonValue(Source: TJSONValue): TNfeSefazInfProdEmb;
    function TNfeSefazInfProdEmbFromJson(Source: string): TNfeSefazInfProdEmb;
    function TNfeSefazVeicProdToJsonValue(Source: TNfeSefazVeicProd): TJSONValue;
    function TNfeSefazVeicProdToJson(Source: TNfeSefazVeicProd): string;
    function TNfeSefazVeicProdFromJsonValue(Source: TJSONValue): TNfeSefazVeicProd;
    function TNfeSefazVeicProdFromJson(Source: string): TNfeSefazVeicProd;
    function TNfeSefazMedToJsonValue(Source: TNfeSefazMed): TJSONValue;
    function TNfeSefazMedToJson(Source: TNfeSefazMed): string;
    function TNfeSefazMedFromJsonValue(Source: TJSONValue): TNfeSefazMed;
    function TNfeSefazMedFromJson(Source: string): TNfeSefazMed;
    function TNfeSefazArmaToJsonValue(Source: TNfeSefazArma): TJSONValue;
    function TNfeSefazArmaToJson(Source: TNfeSefazArma): string;
    function TNfeSefazArmaFromJsonValue(Source: TJSONValue): TNfeSefazArma;
    function TNfeSefazArmaFromJson(Source: string): TNfeSefazArma;
    function TNfeSefazArmaListToJsonValue(Source: TNfeSefazArmaList): TJSONValue;
    function TNfeSefazArmaListToJson(Source: TNfeSefazArmaList): string;
    function TNfeSefazArmaListFromJsonValue(Source: TJSONValue): TNfeSefazArmaList;
    function TNfeSefazArmaListFromJson(Source: string): TNfeSefazArmaList;
    function TNfeSefazCIDEToJsonValue(Source: TNfeSefazCIDE): TJSONValue;
    function TNfeSefazCIDEToJson(Source: TNfeSefazCIDE): string;
    function TNfeSefazCIDEFromJsonValue(Source: TJSONValue): TNfeSefazCIDE;
    function TNfeSefazCIDEFromJson(Source: string): TNfeSefazCIDE;
    function TNfeSefazEncerranteToJsonValue(Source: TNfeSefazEncerrante): TJSONValue;
    function TNfeSefazEncerranteToJson(Source: TNfeSefazEncerrante): string;
    function TNfeSefazEncerranteFromJsonValue(Source: TJSONValue): TNfeSefazEncerrante;
    function TNfeSefazEncerranteFromJson(Source: string): TNfeSefazEncerrante;
    function TNfeSefazOrigCombToJsonValue(Source: TNfeSefazOrigComb): TJSONValue;
    function TNfeSefazOrigCombToJson(Source: TNfeSefazOrigComb): string;
    function TNfeSefazOrigCombFromJsonValue(Source: TJSONValue): TNfeSefazOrigComb;
    function TNfeSefazOrigCombFromJson(Source: string): TNfeSefazOrigComb;
    function TNfeSefazOrigCombListToJsonValue(Source: TNfeSefazOrigCombList): TJSONValue;
    function TNfeSefazOrigCombListToJson(Source: TNfeSefazOrigCombList): string;
    function TNfeSefazOrigCombListFromJsonValue(Source: TJSONValue): TNfeSefazOrigCombList;
    function TNfeSefazOrigCombListFromJson(Source: string): TNfeSefazOrigCombList;
    function TNfeSefazCombToJsonValue(Source: TNfeSefazComb): TJSONValue;
    function TNfeSefazCombToJson(Source: TNfeSefazComb): string;
    function TNfeSefazCombFromJsonValue(Source: TJSONValue): TNfeSefazComb;
    function TNfeSefazCombFromJson(Source: string): TNfeSefazComb;
    function TNfeSefazProdToJsonValue(Source: TNfeSefazProd): TJSONValue;
    function TNfeSefazProdToJson(Source: TNfeSefazProd): string;
    function TNfeSefazProdFromJsonValue(Source: TJSONValue): TNfeSefazProd;
    function TNfeSefazProdFromJson(Source: string): TNfeSefazProd;
    function TNfeSefazICMS00ToJsonValue(Source: TNfeSefazICMS00): TJSONValue;
    function TNfeSefazICMS00ToJson(Source: TNfeSefazICMS00): string;
    function TNfeSefazICMS00FromJsonValue(Source: TJSONValue): TNfeSefazICMS00;
    function TNfeSefazICMS00FromJson(Source: string): TNfeSefazICMS00;
    function TNfeSefazICMS02ToJsonValue(Source: TNfeSefazICMS02): TJSONValue;
    function TNfeSefazICMS02ToJson(Source: TNfeSefazICMS02): string;
    function TNfeSefazICMS02FromJsonValue(Source: TJSONValue): TNfeSefazICMS02;
    function TNfeSefazICMS02FromJson(Source: string): TNfeSefazICMS02;
    function TNfeSefazICMS10ToJsonValue(Source: TNfeSefazICMS10): TJSONValue;
    function TNfeSefazICMS10ToJson(Source: TNfeSefazICMS10): string;
    function TNfeSefazICMS10FromJsonValue(Source: TJSONValue): TNfeSefazICMS10;
    function TNfeSefazICMS10FromJson(Source: string): TNfeSefazICMS10;
    function TNfeSefazICMS15ToJsonValue(Source: TNfeSefazICMS15): TJSONValue;
    function TNfeSefazICMS15ToJson(Source: TNfeSefazICMS15): string;
    function TNfeSefazICMS15FromJsonValue(Source: TJSONValue): TNfeSefazICMS15;
    function TNfeSefazICMS15FromJson(Source: string): TNfeSefazICMS15;
    function TNfeSefazICMS20ToJsonValue(Source: TNfeSefazICMS20): TJSONValue;
    function TNfeSefazICMS20ToJson(Source: TNfeSefazICMS20): string;
    function TNfeSefazICMS20FromJsonValue(Source: TJSONValue): TNfeSefazICMS20;
    function TNfeSefazICMS20FromJson(Source: string): TNfeSefazICMS20;
    function TNfeSefazICMS30ToJsonValue(Source: TNfeSefazICMS30): TJSONValue;
    function TNfeSefazICMS30ToJson(Source: TNfeSefazICMS30): string;
    function TNfeSefazICMS30FromJsonValue(Source: TJSONValue): TNfeSefazICMS30;
    function TNfeSefazICMS30FromJson(Source: string): TNfeSefazICMS30;
    function TNfeSefazICMS40ToJsonValue(Source: TNfeSefazICMS40): TJSONValue;
    function TNfeSefazICMS40ToJson(Source: TNfeSefazICMS40): string;
    function TNfeSefazICMS40FromJsonValue(Source: TJSONValue): TNfeSefazICMS40;
    function TNfeSefazICMS40FromJson(Source: string): TNfeSefazICMS40;
    function TNfeSefazICMS51ToJsonValue(Source: TNfeSefazICMS51): TJSONValue;
    function TNfeSefazICMS51ToJson(Source: TNfeSefazICMS51): string;
    function TNfeSefazICMS51FromJsonValue(Source: TJSONValue): TNfeSefazICMS51;
    function TNfeSefazICMS51FromJson(Source: string): TNfeSefazICMS51;
    function TNfeSefazICMS53ToJsonValue(Source: TNfeSefazICMS53): TJSONValue;
    function TNfeSefazICMS53ToJson(Source: TNfeSefazICMS53): string;
    function TNfeSefazICMS53FromJsonValue(Source: TJSONValue): TNfeSefazICMS53;
    function TNfeSefazICMS53FromJson(Source: string): TNfeSefazICMS53;
    function TNfeSefazICMS60ToJsonValue(Source: TNfeSefazICMS60): TJSONValue;
    function TNfeSefazICMS60ToJson(Source: TNfeSefazICMS60): string;
    function TNfeSefazICMS60FromJsonValue(Source: TJSONValue): TNfeSefazICMS60;
    function TNfeSefazICMS60FromJson(Source: string): TNfeSefazICMS60;
    function TNfeSefazICMS61ToJsonValue(Source: TNfeSefazICMS61): TJSONValue;
    function TNfeSefazICMS61ToJson(Source: TNfeSefazICMS61): string;
    function TNfeSefazICMS61FromJsonValue(Source: TJSONValue): TNfeSefazICMS61;
    function TNfeSefazICMS61FromJson(Source: string): TNfeSefazICMS61;
    function TNfeSefazICMS70ToJsonValue(Source: TNfeSefazICMS70): TJSONValue;
    function TNfeSefazICMS70ToJson(Source: TNfeSefazICMS70): string;
    function TNfeSefazICMS70FromJsonValue(Source: TJSONValue): TNfeSefazICMS70;
    function TNfeSefazICMS70FromJson(Source: string): TNfeSefazICMS70;
    function TNfeSefazICMS90ToJsonValue(Source: TNfeSefazICMS90): TJSONValue;
    function TNfeSefazICMS90ToJson(Source: TNfeSefazICMS90): string;
    function TNfeSefazICMS90FromJsonValue(Source: TJSONValue): TNfeSefazICMS90;
    function TNfeSefazICMS90FromJson(Source: string): TNfeSefazICMS90;
    function TNfeSefazICMSPartToJsonValue(Source: TNfeSefazICMSPart): TJSONValue;
    function TNfeSefazICMSPartToJson(Source: TNfeSefazICMSPart): string;
    function TNfeSefazICMSPartFromJsonValue(Source: TJSONValue): TNfeSefazICMSPart;
    function TNfeSefazICMSPartFromJson(Source: string): TNfeSefazICMSPart;
    function TNfeSefazICMSSTToJsonValue(Source: TNfeSefazICMSST): TJSONValue;
    function TNfeSefazICMSSTToJson(Source: TNfeSefazICMSST): string;
    function TNfeSefazICMSSTFromJsonValue(Source: TJSONValue): TNfeSefazICMSST;
    function TNfeSefazICMSSTFromJson(Source: string): TNfeSefazICMSST;
    function TNfeSefazICMSSN101ToJsonValue(Source: TNfeSefazICMSSN101): TJSONValue;
    function TNfeSefazICMSSN101ToJson(Source: TNfeSefazICMSSN101): string;
    function TNfeSefazICMSSN101FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN101;
    function TNfeSefazICMSSN101FromJson(Source: string): TNfeSefazICMSSN101;
    function TNfeSefazICMSSN102ToJsonValue(Source: TNfeSefazICMSSN102): TJSONValue;
    function TNfeSefazICMSSN102ToJson(Source: TNfeSefazICMSSN102): string;
    function TNfeSefazICMSSN102FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN102;
    function TNfeSefazICMSSN102FromJson(Source: string): TNfeSefazICMSSN102;
    function TNfeSefazICMSSN201ToJsonValue(Source: TNfeSefazICMSSN201): TJSONValue;
    function TNfeSefazICMSSN201ToJson(Source: TNfeSefazICMSSN201): string;
    function TNfeSefazICMSSN201FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN201;
    function TNfeSefazICMSSN201FromJson(Source: string): TNfeSefazICMSSN201;
    function TNfeSefazICMSSN202ToJsonValue(Source: TNfeSefazICMSSN202): TJSONValue;
    function TNfeSefazICMSSN202ToJson(Source: TNfeSefazICMSSN202): string;
    function TNfeSefazICMSSN202FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN202;
    function TNfeSefazICMSSN202FromJson(Source: string): TNfeSefazICMSSN202;
    function TNfeSefazICMSSN500ToJsonValue(Source: TNfeSefazICMSSN500): TJSONValue;
    function TNfeSefazICMSSN500ToJson(Source: TNfeSefazICMSSN500): string;
    function TNfeSefazICMSSN500FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN500;
    function TNfeSefazICMSSN500FromJson(Source: string): TNfeSefazICMSSN500;
    function TNfeSefazICMSSN900ToJsonValue(Source: TNfeSefazICMSSN900): TJSONValue;
    function TNfeSefazICMSSN900ToJson(Source: TNfeSefazICMSSN900): string;
    function TNfeSefazICMSSN900FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN900;
    function TNfeSefazICMSSN900FromJson(Source: string): TNfeSefazICMSSN900;
    function TNfeSefazICMSToJsonValue(Source: TNfeSefazICMS): TJSONValue;
    function TNfeSefazICMSToJson(Source: TNfeSefazICMS): string;
    function TNfeSefazICMSFromJsonValue(Source: TJSONValue): TNfeSefazICMS;
    function TNfeSefazICMSFromJson(Source: string): TNfeSefazICMS;
    function TNfeSefazIPITribToJsonValue(Source: TNfeSefazIPITrib): TJSONValue;
    function TNfeSefazIPITribToJson(Source: TNfeSefazIPITrib): string;
    function TNfeSefazIPITribFromJsonValue(Source: TJSONValue): TNfeSefazIPITrib;
    function TNfeSefazIPITribFromJson(Source: string): TNfeSefazIPITrib;
    function TNfeSefazIPINTToJsonValue(Source: TNfeSefazIPINT): TJSONValue;
    function TNfeSefazIPINTToJson(Source: TNfeSefazIPINT): string;
    function TNfeSefazIPINTFromJsonValue(Source: TJSONValue): TNfeSefazIPINT;
    function TNfeSefazIPINTFromJson(Source: string): TNfeSefazIPINT;
    function TNfeSefazIpiToJsonValue(Source: TNfeSefazIpi): TJSONValue;
    function TNfeSefazIpiToJson(Source: TNfeSefazIpi): string;
    function TNfeSefazIpiFromJsonValue(Source: TJSONValue): TNfeSefazIpi;
    function TNfeSefazIpiFromJson(Source: string): TNfeSefazIpi;
    function TNfeSefazIIToJsonValue(Source: TNfeSefazII): TJSONValue;
    function TNfeSefazIIToJson(Source: TNfeSefazII): string;
    function TNfeSefazIIFromJsonValue(Source: TJSONValue): TNfeSefazII;
    function TNfeSefazIIFromJson(Source: string): TNfeSefazII;
    function TNfeSefazISSQNToJsonValue(Source: TNfeSefazISSQN): TJSONValue;
    function TNfeSefazISSQNToJson(Source: TNfeSefazISSQN): string;
    function TNfeSefazISSQNFromJsonValue(Source: TJSONValue): TNfeSefazISSQN;
    function TNfeSefazISSQNFromJson(Source: string): TNfeSefazISSQN;
    function TNfeSefazPISAliqToJsonValue(Source: TNfeSefazPISAliq): TJSONValue;
    function TNfeSefazPISAliqToJson(Source: TNfeSefazPISAliq): string;
    function TNfeSefazPISAliqFromJsonValue(Source: TJSONValue): TNfeSefazPISAliq;
    function TNfeSefazPISAliqFromJson(Source: string): TNfeSefazPISAliq;
    function TNfeSefazPISQtdeToJsonValue(Source: TNfeSefazPISQtde): TJSONValue;
    function TNfeSefazPISQtdeToJson(Source: TNfeSefazPISQtde): string;
    function TNfeSefazPISQtdeFromJsonValue(Source: TJSONValue): TNfeSefazPISQtde;
    function TNfeSefazPISQtdeFromJson(Source: string): TNfeSefazPISQtde;
    function TNfeSefazPISNTToJsonValue(Source: TNfeSefazPISNT): TJSONValue;
    function TNfeSefazPISNTToJson(Source: TNfeSefazPISNT): string;
    function TNfeSefazPISNTFromJsonValue(Source: TJSONValue): TNfeSefazPISNT;
    function TNfeSefazPISNTFromJson(Source: string): TNfeSefazPISNT;
    function TNfeSefazPISOutrToJsonValue(Source: TNfeSefazPISOutr): TJSONValue;
    function TNfeSefazPISOutrToJson(Source: TNfeSefazPISOutr): string;
    function TNfeSefazPISOutrFromJsonValue(Source: TJSONValue): TNfeSefazPISOutr;
    function TNfeSefazPISOutrFromJson(Source: string): TNfeSefazPISOutr;
    function TNfeSefazPISToJsonValue(Source: TNfeSefazPIS): TJSONValue;
    function TNfeSefazPISToJson(Source: TNfeSefazPIS): string;
    function TNfeSefazPISFromJsonValue(Source: TJSONValue): TNfeSefazPIS;
    function TNfeSefazPISFromJson(Source: string): TNfeSefazPIS;
    function TNfeSefazPISSTToJsonValue(Source: TNfeSefazPISST): TJSONValue;
    function TNfeSefazPISSTToJson(Source: TNfeSefazPISST): string;
    function TNfeSefazPISSTFromJsonValue(Source: TJSONValue): TNfeSefazPISST;
    function TNfeSefazPISSTFromJson(Source: string): TNfeSefazPISST;
    function TNfeSefazCOFINSAliqToJsonValue(Source: TNfeSefazCOFINSAliq): TJSONValue;
    function TNfeSefazCOFINSAliqToJson(Source: TNfeSefazCOFINSAliq): string;
    function TNfeSefazCOFINSAliqFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSAliq;
    function TNfeSefazCOFINSAliqFromJson(Source: string): TNfeSefazCOFINSAliq;
    function TNfeSefazCOFINSQtdeToJsonValue(Source: TNfeSefazCOFINSQtde): TJSONValue;
    function TNfeSefazCOFINSQtdeToJson(Source: TNfeSefazCOFINSQtde): string;
    function TNfeSefazCOFINSQtdeFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSQtde;
    function TNfeSefazCOFINSQtdeFromJson(Source: string): TNfeSefazCOFINSQtde;
    function TNfeSefazCOFINSNTToJsonValue(Source: TNfeSefazCOFINSNT): TJSONValue;
    function TNfeSefazCOFINSNTToJson(Source: TNfeSefazCOFINSNT): string;
    function TNfeSefazCOFINSNTFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSNT;
    function TNfeSefazCOFINSNTFromJson(Source: string): TNfeSefazCOFINSNT;
    function TNfeSefazCOFINSOutrToJsonValue(Source: TNfeSefazCOFINSOutr): TJSONValue;
    function TNfeSefazCOFINSOutrToJson(Source: TNfeSefazCOFINSOutr): string;
    function TNfeSefazCOFINSOutrFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSOutr;
    function TNfeSefazCOFINSOutrFromJson(Source: string): TNfeSefazCOFINSOutr;
    function TNfeSefazCOFINSToJsonValue(Source: TNfeSefazCOFINS): TJSONValue;
    function TNfeSefazCOFINSToJson(Source: TNfeSefazCOFINS): string;
    function TNfeSefazCOFINSFromJsonValue(Source: TJSONValue): TNfeSefazCOFINS;
    function TNfeSefazCOFINSFromJson(Source: string): TNfeSefazCOFINS;
    function TNfeSefazCOFINSSTToJsonValue(Source: TNfeSefazCOFINSST): TJSONValue;
    function TNfeSefazCOFINSSTToJson(Source: TNfeSefazCOFINSST): string;
    function TNfeSefazCOFINSSTFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSST;
    function TNfeSefazCOFINSSTFromJson(Source: string): TNfeSefazCOFINSST;
    function TNfeSefazICMSUFDestToJsonValue(Source: TNfeSefazICMSUFDest): TJSONValue;
    function TNfeSefazICMSUFDestToJson(Source: TNfeSefazICMSUFDest): string;
    function TNfeSefazICMSUFDestFromJsonValue(Source: TJSONValue): TNfeSefazICMSUFDest;
    function TNfeSefazICMSUFDestFromJson(Source: string): TNfeSefazICMSUFDest;
    function TNfeSefazImpostoToJsonValue(Source: TNfeSefazImposto): TJSONValue;
    function TNfeSefazImpostoToJson(Source: TNfeSefazImposto): string;
    function TNfeSefazImpostoFromJsonValue(Source: TJSONValue): TNfeSefazImposto;
    function TNfeSefazImpostoFromJson(Source: string): TNfeSefazImposto;
    function TNfeSefazImpostoDevolIPIToJsonValue(Source: TNfeSefazImpostoDevolIPI): TJSONValue;
    function TNfeSefazImpostoDevolIPIToJson(Source: TNfeSefazImpostoDevolIPI): string;
    function TNfeSefazImpostoDevolIPIFromJsonValue(Source: TJSONValue): TNfeSefazImpostoDevolIPI;
    function TNfeSefazImpostoDevolIPIFromJson(Source: string): TNfeSefazImpostoDevolIPI;
    function TNfeSefazImpostoDevolToJsonValue(Source: TNfeSefazImpostoDevol): TJSONValue;
    function TNfeSefazImpostoDevolToJson(Source: TNfeSefazImpostoDevol): string;
    function TNfeSefazImpostoDevolFromJsonValue(Source: TJSONValue): TNfeSefazImpostoDevol;
    function TNfeSefazImpostoDevolFromJson(Source: string): TNfeSefazImpostoDevol;
    function TNfeSefazObsContToJsonValue(Source: TNfeSefazObsCont): TJSONValue;
    function TNfeSefazObsContToJson(Source: TNfeSefazObsCont): string;
    function TNfeSefazObsContFromJsonValue(Source: TJSONValue): TNfeSefazObsCont;
    function TNfeSefazObsContFromJson(Source: string): TNfeSefazObsCont;
    function TNfeSefazObsFiscoToJsonValue(Source: TNfeSefazObsFisco): TJSONValue;
    function TNfeSefazObsFiscoToJson(Source: TNfeSefazObsFisco): string;
    function TNfeSefazObsFiscoFromJsonValue(Source: TJSONValue): TNfeSefazObsFisco;
    function TNfeSefazObsFiscoFromJson(Source: string): TNfeSefazObsFisco;
    function TNfeSefazObsItemToJsonValue(Source: TNfeSefazObsItem): TJSONValue;
    function TNfeSefazObsItemToJson(Source: TNfeSefazObsItem): string;
    function TNfeSefazObsItemFromJsonValue(Source: TJSONValue): TNfeSefazObsItem;
    function TNfeSefazObsItemFromJson(Source: string): TNfeSefazObsItem;
    function TNfeSefazDetToJsonValue(Source: TNfeSefazDet): TJSONValue;
    function TNfeSefazDetToJson(Source: TNfeSefazDet): string;
    function TNfeSefazDetFromJsonValue(Source: TJSONValue): TNfeSefazDet;
    function TNfeSefazDetFromJson(Source: string): TNfeSefazDet;
    function TNfeSefazDetListToJsonValue(Source: TNfeSefazDetList): TJSONValue;
    function TNfeSefazDetListToJson(Source: TNfeSefazDetList): string;
    function TNfeSefazDetListFromJsonValue(Source: TJSONValue): TNfeSefazDetList;
    function TNfeSefazDetListFromJson(Source: string): TNfeSefazDetList;
    function TNfeSefazICMSTotToJsonValue(Source: TNfeSefazICMSTot): TJSONValue;
    function TNfeSefazICMSTotToJson(Source: TNfeSefazICMSTot): string;
    function TNfeSefazICMSTotFromJsonValue(Source: TJSONValue): TNfeSefazICMSTot;
    function TNfeSefazICMSTotFromJson(Source: string): TNfeSefazICMSTot;
    function TNfeSefazISSQNtotToJsonValue(Source: TNfeSefazISSQNtot): TJSONValue;
    function TNfeSefazISSQNtotToJson(Source: TNfeSefazISSQNtot): string;
    function TNfeSefazISSQNtotFromJsonValue(Source: TJSONValue): TNfeSefazISSQNtot;
    function TNfeSefazISSQNtotFromJson(Source: string): TNfeSefazISSQNtot;
    function TNfeSefazRetTribToJsonValue(Source: TNfeSefazRetTrib): TJSONValue;
    function TNfeSefazRetTribToJson(Source: TNfeSefazRetTrib): string;
    function TNfeSefazRetTribFromJsonValue(Source: TJSONValue): TNfeSefazRetTrib;
    function TNfeSefazRetTribFromJson(Source: string): TNfeSefazRetTrib;
    function TNfeSefazTotalToJsonValue(Source: TNfeSefazTotal): TJSONValue;
    function TNfeSefazTotalToJson(Source: TNfeSefazTotal): string;
    function TNfeSefazTotalFromJsonValue(Source: TJSONValue): TNfeSefazTotal;
    function TNfeSefazTotalFromJson(Source: string): TNfeSefazTotal;
    function TNfeSefazTransportaToJsonValue(Source: TNfeSefazTransporta): TJSONValue;
    function TNfeSefazTransportaToJson(Source: TNfeSefazTransporta): string;
    function TNfeSefazTransportaFromJsonValue(Source: TJSONValue): TNfeSefazTransporta;
    function TNfeSefazTransportaFromJson(Source: string): TNfeSefazTransporta;
    function TNfeSefazRetTranspToJsonValue(Source: TNfeSefazRetTransp): TJSONValue;
    function TNfeSefazRetTranspToJson(Source: TNfeSefazRetTransp): string;
    function TNfeSefazRetTranspFromJsonValue(Source: TJSONValue): TNfeSefazRetTransp;
    function TNfeSefazRetTranspFromJson(Source: string): TNfeSefazRetTransp;
    function TNfeSefazVeiculoToJsonValue(Source: TNfeSefazVeiculo): TJSONValue;
    function TNfeSefazVeiculoToJson(Source: TNfeSefazVeiculo): string;
    function TNfeSefazVeiculoFromJsonValue(Source: TJSONValue): TNfeSefazVeiculo;
    function TNfeSefazVeiculoFromJson(Source: string): TNfeSefazVeiculo;
    function TNfeSefazVeiculoListToJsonValue(Source: TNfeSefazVeiculoList): TJSONValue;
    function TNfeSefazVeiculoListToJson(Source: TNfeSefazVeiculoList): string;
    function TNfeSefazVeiculoListFromJsonValue(Source: TJSONValue): TNfeSefazVeiculoList;
    function TNfeSefazVeiculoListFromJson(Source: string): TNfeSefazVeiculoList;
    function TNfeSefazLacresToJsonValue(Source: TNfeSefazLacres): TJSONValue;
    function TNfeSefazLacresToJson(Source: TNfeSefazLacres): string;
    function TNfeSefazLacresFromJsonValue(Source: TJSONValue): TNfeSefazLacres;
    function TNfeSefazLacresFromJson(Source: string): TNfeSefazLacres;
    function TNfeSefazLacresListToJsonValue(Source: TNfeSefazLacresList): TJSONValue;
    function TNfeSefazLacresListToJson(Source: TNfeSefazLacresList): string;
    function TNfeSefazLacresListFromJsonValue(Source: TJSONValue): TNfeSefazLacresList;
    function TNfeSefazLacresListFromJson(Source: string): TNfeSefazLacresList;
    function TNfeSefazVolToJsonValue(Source: TNfeSefazVol): TJSONValue;
    function TNfeSefazVolToJson(Source: TNfeSefazVol): string;
    function TNfeSefazVolFromJsonValue(Source: TJSONValue): TNfeSefazVol;
    function TNfeSefazVolFromJson(Source: string): TNfeSefazVol;
    function TNfeSefazVolListToJsonValue(Source: TNfeSefazVolList): TJSONValue;
    function TNfeSefazVolListToJson(Source: TNfeSefazVolList): string;
    function TNfeSefazVolListFromJsonValue(Source: TJSONValue): TNfeSefazVolList;
    function TNfeSefazVolListFromJson(Source: string): TNfeSefazVolList;
    function TNfeSefazTranspToJsonValue(Source: TNfeSefazTransp): TJSONValue;
    function TNfeSefazTranspToJson(Source: TNfeSefazTransp): string;
    function TNfeSefazTranspFromJsonValue(Source: TJSONValue): TNfeSefazTransp;
    function TNfeSefazTranspFromJson(Source: string): TNfeSefazTransp;
    function TNfeSefazFatToJsonValue(Source: TNfeSefazFat): TJSONValue;
    function TNfeSefazFatToJson(Source: TNfeSefazFat): string;
    function TNfeSefazFatFromJsonValue(Source: TJSONValue): TNfeSefazFat;
    function TNfeSefazFatFromJson(Source: string): TNfeSefazFat;
    function TNfeSefazDupToJsonValue(Source: TNfeSefazDup): TJSONValue;
    function TNfeSefazDupToJson(Source: TNfeSefazDup): string;
    function TNfeSefazDupFromJsonValue(Source: TJSONValue): TNfeSefazDup;
    function TNfeSefazDupFromJson(Source: string): TNfeSefazDup;
    function TNfeSefazDupListToJsonValue(Source: TNfeSefazDupList): TJSONValue;
    function TNfeSefazDupListToJson(Source: TNfeSefazDupList): string;
    function TNfeSefazDupListFromJsonValue(Source: TJSONValue): TNfeSefazDupList;
    function TNfeSefazDupListFromJson(Source: string): TNfeSefazDupList;
    function TNfeSefazCobrToJsonValue(Source: TNfeSefazCobr): TJSONValue;
    function TNfeSefazCobrToJson(Source: TNfeSefazCobr): string;
    function TNfeSefazCobrFromJsonValue(Source: TJSONValue): TNfeSefazCobr;
    function TNfeSefazCobrFromJson(Source: string): TNfeSefazCobr;
    function TNfeSefazCardToJsonValue(Source: TNfeSefazCard): TJSONValue;
    function TNfeSefazCardToJson(Source: TNfeSefazCard): string;
    function TNfeSefazCardFromJsonValue(Source: TJSONValue): TNfeSefazCard;
    function TNfeSefazCardFromJson(Source: string): TNfeSefazCard;
    function TNfeSefazDetPagToJsonValue(Source: TNfeSefazDetPag): TJSONValue;
    function TNfeSefazDetPagToJson(Source: TNfeSefazDetPag): string;
    function TNfeSefazDetPagFromJsonValue(Source: TJSONValue): TNfeSefazDetPag;
    function TNfeSefazDetPagFromJson(Source: string): TNfeSefazDetPag;
    function TNfeSefazDetPagListToJsonValue(Source: TNfeSefazDetPagList): TJSONValue;
    function TNfeSefazDetPagListToJson(Source: TNfeSefazDetPagList): string;
    function TNfeSefazDetPagListFromJsonValue(Source: TJSONValue): TNfeSefazDetPagList;
    function TNfeSefazDetPagListFromJson(Source: string): TNfeSefazDetPagList;
    function TNfeSefazPagToJsonValue(Source: TNfeSefazPag): TJSONValue;
    function TNfeSefazPagToJson(Source: TNfeSefazPag): string;
    function TNfeSefazPagFromJsonValue(Source: TJSONValue): TNfeSefazPag;
    function TNfeSefazPagFromJson(Source: string): TNfeSefazPag;
    function TNfeSefazInfIntermedToJsonValue(Source: TNfeSefazInfIntermed): TJSONValue;
    function TNfeSefazInfIntermedToJson(Source: TNfeSefazInfIntermed): string;
    function TNfeSefazInfIntermedFromJsonValue(Source: TJSONValue): TNfeSefazInfIntermed;
    function TNfeSefazInfIntermedFromJson(Source: string): TNfeSefazInfIntermed;
    function TNfeSefazInfAdicObsContToJsonValue(Source: TNfeSefazInfAdicObsCont): TJSONValue;
    function TNfeSefazInfAdicObsContToJson(Source: TNfeSefazInfAdicObsCont): string;
    function TNfeSefazInfAdicObsContFromJsonValue(Source: TJSONValue): TNfeSefazInfAdicObsCont;
    function TNfeSefazInfAdicObsContFromJson(Source: string): TNfeSefazInfAdicObsCont;
    function TNfeSefazInfAdicObsContListToJsonValue(Source: TNfeSefazInfAdicObsContList): TJSONValue;
    function TNfeSefazInfAdicObsContListToJson(Source: TNfeSefazInfAdicObsContList): string;
    function TNfeSefazInfAdicObsContListFromJsonValue(Source: TJSONValue): TNfeSefazInfAdicObsContList;
    function TNfeSefazInfAdicObsContListFromJson(Source: string): TNfeSefazInfAdicObsContList;
    function TNfeSefazInfAdicObsFiscoToJsonValue(Source: TNfeSefazInfAdicObsFisco): TJSONValue;
    function TNfeSefazInfAdicObsFiscoToJson(Source: TNfeSefazInfAdicObsFisco): string;
    function TNfeSefazInfAdicObsFiscoFromJsonValue(Source: TJSONValue): TNfeSefazInfAdicObsFisco;
    function TNfeSefazInfAdicObsFiscoFromJson(Source: string): TNfeSefazInfAdicObsFisco;
    function TNfeSefazInfAdicObsFiscoListToJsonValue(Source: TNfeSefazInfAdicObsFiscoList): TJSONValue;
    function TNfeSefazInfAdicObsFiscoListToJson(Source: TNfeSefazInfAdicObsFiscoList): string;
    function TNfeSefazInfAdicObsFiscoListFromJsonValue(Source: TJSONValue): TNfeSefazInfAdicObsFiscoList;
    function TNfeSefazInfAdicObsFiscoListFromJson(Source: string): TNfeSefazInfAdicObsFiscoList;
    function TNfeSefazProcRefToJsonValue(Source: TNfeSefazProcRef): TJSONValue;
    function TNfeSefazProcRefToJson(Source: TNfeSefazProcRef): string;
    function TNfeSefazProcRefFromJsonValue(Source: TJSONValue): TNfeSefazProcRef;
    function TNfeSefazProcRefFromJson(Source: string): TNfeSefazProcRef;
    function TNfeSefazProcRefListToJsonValue(Source: TNfeSefazProcRefList): TJSONValue;
    function TNfeSefazProcRefListToJson(Source: TNfeSefazProcRefList): string;
    function TNfeSefazProcRefListFromJsonValue(Source: TJSONValue): TNfeSefazProcRefList;
    function TNfeSefazProcRefListFromJson(Source: string): TNfeSefazProcRefList;
    function TNfeSefazInfAdicToJsonValue(Source: TNfeSefazInfAdic): TJSONValue;
    function TNfeSefazInfAdicToJson(Source: TNfeSefazInfAdic): string;
    function TNfeSefazInfAdicFromJsonValue(Source: TJSONValue): TNfeSefazInfAdic;
    function TNfeSefazInfAdicFromJson(Source: string): TNfeSefazInfAdic;
    function TNfeSefazExportaToJsonValue(Source: TNfeSefazExporta): TJSONValue;
    function TNfeSefazExportaToJson(Source: TNfeSefazExporta): string;
    function TNfeSefazExportaFromJsonValue(Source: TJSONValue): TNfeSefazExporta;
    function TNfeSefazExportaFromJson(Source: string): TNfeSefazExporta;
    function TNfeSefazCompraToJsonValue(Source: TNfeSefazCompra): TJSONValue;
    function TNfeSefazCompraToJson(Source: TNfeSefazCompra): string;
    function TNfeSefazCompraFromJsonValue(Source: TJSONValue): TNfeSefazCompra;
    function TNfeSefazCompraFromJson(Source: string): TNfeSefazCompra;
    function TNfeSefazForDiaToJsonValue(Source: TNfeSefazForDia): TJSONValue;
    function TNfeSefazForDiaToJson(Source: TNfeSefazForDia): string;
    function TNfeSefazForDiaFromJsonValue(Source: TJSONValue): TNfeSefazForDia;
    function TNfeSefazForDiaFromJson(Source: string): TNfeSefazForDia;
    function TNfeSefazForDiaListToJsonValue(Source: TNfeSefazForDiaList): TJSONValue;
    function TNfeSefazForDiaListToJson(Source: TNfeSefazForDiaList): string;
    function TNfeSefazForDiaListFromJsonValue(Source: TJSONValue): TNfeSefazForDiaList;
    function TNfeSefazForDiaListFromJson(Source: string): TNfeSefazForDiaList;
    function TNfeSefazDeducToJsonValue(Source: TNfeSefazDeduc): TJSONValue;
    function TNfeSefazDeducToJson(Source: TNfeSefazDeduc): string;
    function TNfeSefazDeducFromJsonValue(Source: TJSONValue): TNfeSefazDeduc;
    function TNfeSefazDeducFromJson(Source: string): TNfeSefazDeduc;
    function TNfeSefazDeducListToJsonValue(Source: TNfeSefazDeducList): TJSONValue;
    function TNfeSefazDeducListToJson(Source: TNfeSefazDeducList): string;
    function TNfeSefazDeducListFromJsonValue(Source: TJSONValue): TNfeSefazDeducList;
    function TNfeSefazDeducListFromJson(Source: string): TNfeSefazDeducList;
    function TNfeSefazCanaToJsonValue(Source: TNfeSefazCana): TJSONValue;
    function TNfeSefazCanaToJson(Source: TNfeSefazCana): string;
    function TNfeSefazCanaFromJsonValue(Source: TJSONValue): TNfeSefazCana;
    function TNfeSefazCanaFromJson(Source: string): TNfeSefazCana;
    function TNfeSefazInfRespTecToJsonValue(Source: TNfeSefazInfRespTec): TJSONValue;
    function TNfeSefazInfRespTecToJson(Source: TNfeSefazInfRespTec): string;
    function TNfeSefazInfRespTecFromJsonValue(Source: TJSONValue): TNfeSefazInfRespTec;
    function TNfeSefazInfRespTecFromJson(Source: string): TNfeSefazInfRespTec;
    function TNfeSefazInfSolicNFFToJsonValue(Source: TNfeSefazInfSolicNFF): TJSONValue;
    function TNfeSefazInfSolicNFFToJson(Source: TNfeSefazInfSolicNFF): string;
    function TNfeSefazInfSolicNFFFromJsonValue(Source: TJSONValue): TNfeSefazInfSolicNFF;
    function TNfeSefazInfSolicNFFFromJson(Source: string): TNfeSefazInfSolicNFF;
    function TNfeSefazDefensivoToJsonValue(Source: TNfeSefazDefensivo): TJSONValue;
    function TNfeSefazDefensivoToJson(Source: TNfeSefazDefensivo): string;
    function TNfeSefazDefensivoFromJsonValue(Source: TJSONValue): TNfeSefazDefensivo;
    function TNfeSefazDefensivoFromJson(Source: string): TNfeSefazDefensivo;
    function TNfeSefazGuiaTransitoToJsonValue(Source: TNfeSefazGuiaTransito): TJSONValue;
    function TNfeSefazGuiaTransitoToJson(Source: TNfeSefazGuiaTransito): string;
    function TNfeSefazGuiaTransitoFromJsonValue(Source: TJSONValue): TNfeSefazGuiaTransito;
    function TNfeSefazGuiaTransitoFromJson(Source: string): TNfeSefazGuiaTransito;
    function TNfeSefazAgropecuarioToJsonValue(Source: TNfeSefazAgropecuario): TJSONValue;
    function TNfeSefazAgropecuarioToJson(Source: TNfeSefazAgropecuario): string;
    function TNfeSefazAgropecuarioFromJsonValue(Source: TJSONValue): TNfeSefazAgropecuario;
    function TNfeSefazAgropecuarioFromJson(Source: string): TNfeSefazAgropecuario;
    function TNfeSefazInfNFeToJsonValue(Source: TNfeSefazInfNFe): TJSONValue;
    function TNfeSefazInfNFeToJson(Source: TNfeSefazInfNFe): string;
    function TNfeSefazInfNFeFromJsonValue(Source: TJSONValue): TNfeSefazInfNFe;
    function TNfeSefazInfNFeFromJson(Source: string): TNfeSefazInfNFe;
    function TNfeSefazInfNFeSuplToJsonValue(Source: TNfeSefazInfNFeSupl): TJSONValue;
    function TNfeSefazInfNFeSuplToJson(Source: TNfeSefazInfNFeSupl): string;
    function TNfeSefazInfNFeSuplFromJsonValue(Source: TJSONValue): TNfeSefazInfNFeSupl;
    function TNfeSefazInfNFeSuplFromJson(Source: string): TNfeSefazInfNFeSupl;
    function TNfePedidoEmissaoToJsonValue(Source: TNfePedidoEmissao): TJSONValue;
    function TNfePedidoEmissaoToJson(Source: TNfePedidoEmissao): string;
    function TNfePedidoEmissaoFromJsonValue(Source: TJSONValue): TNfePedidoEmissao;
    function TNfePedidoEmissaoFromJson(Source: string): TNfePedidoEmissao;
    function TNfePedidoEmissaoListToJsonValue(Source: TNfePedidoEmissaoList): TJSONValue;
    function TNfePedidoEmissaoListToJson(Source: TNfePedidoEmissaoList): string;
    function TNfePedidoEmissaoListFromJsonValue(Source: TJSONValue): TNfePedidoEmissaoList;
    function TNfePedidoEmissaoListFromJson(Source: string): TNfePedidoEmissaoList;
    function TNfePedidoEmissaoLoteToJsonValue(Source: TNfePedidoEmissaoLote): TJSONValue;
    function TNfePedidoEmissaoLoteToJson(Source: TNfePedidoEmissaoLote): string;
    function TNfePedidoEmissaoLoteFromJsonValue(Source: TJSONValue): TNfePedidoEmissaoLote;
    function TNfePedidoEmissaoLoteFromJson(Source: string): TNfePedidoEmissaoLote;
    function TEnderecoEmailToJsonValue(Source: TEnderecoEmail): TJSONValue;
    function TEnderecoEmailToJson(Source: TEnderecoEmail): string;
    function TEnderecoEmailFromJsonValue(Source: TJSONValue): TEnderecoEmail;
    function TEnderecoEmailFromJson(Source: string): TEnderecoEmail;
    function TEnderecoEmailListToJsonValue(Source: TEnderecoEmailList): TJSONValue;
    function TEnderecoEmailListToJson(Source: TEnderecoEmailList): string;
    function TEnderecoEmailListFromJsonValue(Source: TJSONValue): TEnderecoEmailList;
    function TEnderecoEmailListFromJson(Source: string): TEnderecoEmailList;
    function TDfePedidoEnvioEmailToJsonValue(Source: TDfePedidoEnvioEmail): TJSONValue;
    function TDfePedidoEnvioEmailToJson(Source: TDfePedidoEnvioEmail): string;
    function TDfePedidoEnvioEmailFromJsonValue(Source: TJSONValue): TDfePedidoEnvioEmail;
    function TDfePedidoEnvioEmailFromJson(Source: string): TDfePedidoEnvioEmail;
    function TEmailStatusResponseToJsonValue(Source: TEmailStatusResponse): TJSONValue;
    function TEmailStatusResponseToJson(Source: TEmailStatusResponse): string;
    function TEmailStatusResponseFromJsonValue(Source: TJSONValue): TEmailStatusResponse;
    function TEmailStatusResponseFromJson(Source: string): TEmailStatusResponse;
    function TNfePedidoCancelamentoToJsonValue(Source: TNfePedidoCancelamento): TJSONValue;
    function TNfePedidoCancelamentoToJson(Source: TNfePedidoCancelamento): string;
    function TNfePedidoCancelamentoFromJsonValue(Source: TJSONValue): TNfePedidoCancelamento;
    function TNfePedidoCancelamentoFromJson(Source: string): TNfePedidoCancelamento;
    function TNfePedidoCartaCorrecaoToJsonValue(Source: TNfePedidoCartaCorrecao): TJSONValue;
    function TNfePedidoCartaCorrecaoToJson(Source: TNfePedidoCartaCorrecao): string;
    function TNfePedidoCartaCorrecaoFromJsonValue(Source: TJSONValue): TNfePedidoCartaCorrecao;
    function TNfePedidoCartaCorrecaoFromJson(Source: string): TNfePedidoCartaCorrecao;
    function TDfeCartaCorrecaoToJsonValue(Source: TDfeCartaCorrecao): TJSONValue;
    function TDfeCartaCorrecaoToJson(Source: TDfeCartaCorrecao): string;
    function TDfeCartaCorrecaoFromJsonValue(Source: TJSONValue): TDfeCartaCorrecao;
    function TDfeCartaCorrecaoFromJson(Source: string): TDfeCartaCorrecao;
    function TDfePedidoInutilizacaoToJsonValue(Source: TDfePedidoInutilizacao): TJSONValue;
    function TDfePedidoInutilizacaoToJson(Source: TDfePedidoInutilizacao): string;
    function TDfePedidoInutilizacaoFromJsonValue(Source: TJSONValue): TDfePedidoInutilizacao;
    function TDfePedidoInutilizacaoFromJson(Source: string): TDfePedidoInutilizacao;
    function TDfeInutilizacaoToJsonValue(Source: TDfeInutilizacao): TJSONValue;
    function TDfeInutilizacaoToJson(Source: TDfeInutilizacao): string;
    function TDfeInutilizacaoFromJsonValue(Source: TJSONValue): TDfeInutilizacao;
    function TDfeInutilizacaoFromJson(Source: string): TDfeInutilizacao;
    function TDfeEventoListToJsonValue(Source: TDfeEventoList): TJSONValue;
    function TDfeEventoListToJson(Source: TDfeEventoList): string;
    function TDfeEventoListFromJsonValue(Source: TJSONValue): TDfeEventoList;
    function TDfeEventoListFromJson(Source: string): TDfeEventoList;
    function TDfeEventoListagemToJsonValue(Source: TDfeEventoListagem): TJSONValue;
    function TDfeEventoListagemToJson(Source: TDfeEventoListagem): string;
    function TDfeEventoListagemFromJsonValue(Source: TJSONValue): TDfeEventoListagem;
    function TDfeEventoListagemFromJson(Source: string): TDfeEventoListagem;
    function TCnpjNaturezaJuridicaToJsonValue(Source: TCnpjNaturezaJuridica): TJSONValue;
    function TCnpjNaturezaJuridicaToJson(Source: TCnpjNaturezaJuridica): string;
    function TCnpjNaturezaJuridicaFromJsonValue(Source: TJSONValue): TCnpjNaturezaJuridica;
    function TCnpjNaturezaJuridicaFromJson(Source: string): TCnpjNaturezaJuridica;
    function TCnpjPorteEmpresaToJsonValue(Source: TCnpjPorteEmpresa): TJSONValue;
    function TCnpjPorteEmpresaToJson(Source: TCnpjPorteEmpresa): string;
    function TCnpjPorteEmpresaFromJsonValue(Source: TJSONValue): TCnpjPorteEmpresa;
    function TCnpjPorteEmpresaFromJson(Source: string): TCnpjPorteEmpresa;
    function TCnpjSituacaoCadastralToJsonValue(Source: TCnpjSituacaoCadastral): TJSONValue;
    function TCnpjSituacaoCadastralToJson(Source: TCnpjSituacaoCadastral): string;
    function TCnpjSituacaoCadastralFromJsonValue(Source: TJSONValue): TCnpjSituacaoCadastral;
    function TCnpjSituacaoCadastralFromJson(Source: string): TCnpjSituacaoCadastral;
    function TCnpjMotivoSituacaoCadastralToJsonValue(Source: TCnpjMotivoSituacaoCadastral): TJSONValue;
    function TCnpjMotivoSituacaoCadastralToJson(Source: TCnpjMotivoSituacaoCadastral): string;
    function TCnpjMotivoSituacaoCadastralFromJsonValue(Source: TJSONValue): TCnpjMotivoSituacaoCadastral;
    function TCnpjMotivoSituacaoCadastralFromJson(Source: string): TCnpjMotivoSituacaoCadastral;
    function TCnpjPaisToJsonValue(Source: TCnpjPais): TJSONValue;
    function TCnpjPaisToJson(Source: TCnpjPais): string;
    function TCnpjPaisFromJsonValue(Source: TJSONValue): TCnpjPais;
    function TCnpjPaisFromJson(Source: string): TCnpjPais;
    function TCnpjCnaeToJsonValue(Source: TCnpjCnae): TJSONValue;
    function TCnpjCnaeToJson(Source: TCnpjCnae): string;
    function TCnpjCnaeFromJsonValue(Source: TJSONValue): TCnpjCnae;
    function TCnpjCnaeFromJson(Source: string): TCnpjCnae;
    function TCnpjCnaeSecundarioToJsonValue(Source: TCnpjCnaeSecundario): TJSONValue;
    function TCnpjCnaeSecundarioToJson(Source: TCnpjCnaeSecundario): string;
    function TCnpjCnaeSecundarioFromJsonValue(Source: TJSONValue): TCnpjCnaeSecundario;
    function TCnpjCnaeSecundarioFromJson(Source: string): TCnpjCnaeSecundario;
    function TCnpjCnaeSecundarioListToJsonValue(Source: TCnpjCnaeSecundarioList): TJSONValue;
    function TCnpjCnaeSecundarioListToJson(Source: TCnpjCnaeSecundarioList): string;
    function TCnpjCnaeSecundarioListFromJsonValue(Source: TJSONValue): TCnpjCnaeSecundarioList;
    function TCnpjCnaeSecundarioListFromJson(Source: string): TCnpjCnaeSecundarioList;
    function TCnpjMunicipioToJsonValue(Source: TCnpjMunicipio): TJSONValue;
    function TCnpjMunicipioToJson(Source: TCnpjMunicipio): string;
    function TCnpjMunicipioFromJsonValue(Source: TJSONValue): TCnpjMunicipio;
    function TCnpjMunicipioFromJson(Source: string): TCnpjMunicipio;
    function TCnpjEnderecoToJsonValue(Source: TCnpjEndereco): TJSONValue;
    function TCnpjEnderecoToJson(Source: TCnpjEndereco): string;
    function TCnpjEnderecoFromJsonValue(Source: TJSONValue): TCnpjEndereco;
    function TCnpjEnderecoFromJson(Source: string): TCnpjEndereco;
    function TCnpjTelefoneToJsonValue(Source: TCnpjTelefone): TJSONValue;
    function TCnpjTelefoneToJson(Source: TCnpjTelefone): string;
    function TCnpjTelefoneFromJsonValue(Source: TJSONValue): TCnpjTelefone;
    function TCnpjTelefoneFromJson(Source: string): TCnpjTelefone;
    function TCnpjTelefoneListToJsonValue(Source: TCnpjTelefoneList): TJSONValue;
    function TCnpjTelefoneListToJson(Source: TCnpjTelefoneList): string;
    function TCnpjTelefoneListFromJsonValue(Source: TJSONValue): TCnpjTelefoneList;
    function TCnpjTelefoneListFromJson(Source: string): TCnpjTelefoneList;
    function TCnpjSituacaoEspecialToJsonValue(Source: TCnpjSituacaoEspecial): TJSONValue;
    function TCnpjSituacaoEspecialToJson(Source: TCnpjSituacaoEspecial): string;
    function TCnpjSituacaoEspecialFromJsonValue(Source: TJSONValue): TCnpjSituacaoEspecial;
    function TCnpjSituacaoEspecialFromJson(Source: string): TCnpjSituacaoEspecial;
    function TCnpjOpcaoSimplesToJsonValue(Source: TCnpjOpcaoSimples): TJSONValue;
    function TCnpjOpcaoSimplesToJson(Source: TCnpjOpcaoSimples): string;
    function TCnpjOpcaoSimplesFromJsonValue(Source: TJSONValue): TCnpjOpcaoSimples;
    function TCnpjOpcaoSimplesFromJson(Source: string): TCnpjOpcaoSimples;
    function TCnpjOpcaoSimeiToJsonValue(Source: TCnpjOpcaoSimei): TJSONValue;
    function TCnpjOpcaoSimeiToJson(Source: TCnpjOpcaoSimei): string;
    function TCnpjOpcaoSimeiFromJsonValue(Source: TJSONValue): TCnpjOpcaoSimei;
    function TCnpjOpcaoSimeiFromJson(Source: string): TCnpjOpcaoSimei;
    function TCnpjIdentificadorSocioToJsonValue(Source: TCnpjIdentificadorSocio): TJSONValue;
    function TCnpjIdentificadorSocioToJson(Source: TCnpjIdentificadorSocio): string;
    function TCnpjIdentificadorSocioFromJsonValue(Source: TJSONValue): TCnpjIdentificadorSocio;
    function TCnpjIdentificadorSocioFromJson(Source: string): TCnpjIdentificadorSocio;
    function TCnpjQualificacaoSocioToJsonValue(Source: TCnpjQualificacaoSocio): TJSONValue;
    function TCnpjQualificacaoSocioToJson(Source: TCnpjQualificacaoSocio): string;
    function TCnpjQualificacaoSocioFromJsonValue(Source: TJSONValue): TCnpjQualificacaoSocio;
    function TCnpjQualificacaoSocioFromJson(Source: string): TCnpjQualificacaoSocio;
    function TCnpjRepresentanteLegalToJsonValue(Source: TCnpjRepresentanteLegal): TJSONValue;
    function TCnpjRepresentanteLegalToJson(Source: TCnpjRepresentanteLegal): string;
    function TCnpjRepresentanteLegalFromJsonValue(Source: TJSONValue): TCnpjRepresentanteLegal;
    function TCnpjRepresentanteLegalFromJson(Source: string): TCnpjRepresentanteLegal;
    function TCnpjFaixaEtariaToJsonValue(Source: TCnpjFaixaEtaria): TJSONValue;
    function TCnpjFaixaEtariaToJson(Source: TCnpjFaixaEtaria): string;
    function TCnpjFaixaEtariaFromJsonValue(Source: TJSONValue): TCnpjFaixaEtaria;
    function TCnpjFaixaEtariaFromJson(Source: string): TCnpjFaixaEtaria;
    function TCnpjSocioToJsonValue(Source: TCnpjSocio): TJSONValue;
    function TCnpjSocioToJson(Source: TCnpjSocio): string;
    function TCnpjSocioFromJsonValue(Source: TJSONValue): TCnpjSocio;
    function TCnpjSocioFromJson(Source: string): TCnpjSocio;
    function TCnpjSocioListToJsonValue(Source: TCnpjSocioList): TJSONValue;
    function TCnpjSocioListToJson(Source: TCnpjSocioList): string;
    function TCnpjSocioListFromJsonValue(Source: TJSONValue): TCnpjSocioList;
    function TCnpjSocioListFromJson(Source: string): TCnpjSocioList;
    function TCnpjEmpresaToJsonValue(Source: TCnpjEmpresa): TJSONValue;
    function TCnpjEmpresaToJson(Source: TCnpjEmpresa): string;
    function TCnpjEmpresaFromJsonValue(Source: TJSONValue): TCnpjEmpresa;
    function TCnpjEmpresaFromJson(Source: string): TCnpjEmpresa;
    function TCnpjEmpresaListToJsonValue(Source: TCnpjEmpresaList): TJSONValue;
    function TCnpjEmpresaListToJson(Source: TCnpjEmpresaList): string;
    function TCnpjEmpresaListFromJsonValue(Source: TJSONValue): TCnpjEmpresaList;
    function TCnpjEmpresaListFromJson(Source: string): TCnpjEmpresaList;
    function TCnpjListagemToJsonValue(Source: TCnpjListagem): TJSONValue;
    function TCnpjListagemToJson(Source: TCnpjListagem): string;
    function TCnpjListagemFromJsonValue(Source: TJSONValue): TCnpjListagem;
    function TCnpjListagemFromJson(Source: string): TCnpjListagem;
    function TCepEnderecoToJsonValue(Source: TCepEndereco): TJSONValue;
    function TCepEnderecoToJson(Source: TCepEndereco): string;
    function TCepEnderecoFromJsonValue(Source: TJSONValue): TCepEndereco;
    function TCepEnderecoFromJson(Source: string): TCepEndereco;
  end;
  
implementation

{ TJsonConverter }

function TJsonConverter.TEmpresaEnderecoToJsonValue(Source: TEmpresaEndereco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'logradouro', Self.stringToJsonValue(Source.logradouro));
    Json.ObjAddProp(Result, 'numero', Self.stringToJsonValue(Source.numero));
    if Source.complementoHasValue then
      Json.ObjAddProp(Result, 'complemento', Self.stringToJsonValue(Source.complemento));
    Json.ObjAddProp(Result, 'bairro', Self.stringToJsonValue(Source.bairro));
    Json.ObjAddProp(Result, 'codigo_municipio', Self.stringToJsonValue(Source.codigo_municipio));
    if Source.cidadeHasValue then
      Json.ObjAddProp(Result, 'cidade', Self.stringToJsonValue(Source.cidade));
    Json.ObjAddProp(Result, 'uf', Self.stringToJsonValue(Source.uf));
    if Source.codigo_paisHasValue then
      Json.ObjAddProp(Result, 'codigo_pais', Self.stringToJsonValue(Source.codigo_pais));
    if Source.paisHasValue then
      Json.ObjAddProp(Result, 'pais', Self.stringToJsonValue(Source.pais));
    Json.ObjAddProp(Result, 'cep', Self.stringToJsonValue(Source.cep));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaEnderecoToJson(Source: TEmpresaEndereco): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaEnderecoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaEnderecoFromJsonValue(Source: TJSONValue): TEmpresaEndereco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaEndereco.Create;
  try
    if Json.ObjContains(Source, 'logradouro', JValue) then
      Result.logradouro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.numero := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'complemento', JValue) then
      Result.complemento := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'bairro', JValue) then
      Result.bairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_municipio', JValue) then
      Result.codigo_municipio := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cidade', JValue) then
      Result.cidade := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uf', JValue) then
      Result.uf := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_pais', JValue) then
      Result.codigo_pais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pais', JValue) then
      Result.pais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cep', JValue) then
      Result.cep := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaEnderecoFromJson(Source: string): TEmpresaEndereco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaEnderecoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaToJsonValue(Source: TEmpresa): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cpf_cnpj', Self.stringToJsonValue(Source.cpf_cnpj));
    if Source.created_atHasValue then
      Json.ObjAddProp(Result, 'created_at', Self.TDateTimeToJsonValue(Source.created_at));
    if Source.updated_atHasValue then
      Json.ObjAddProp(Result, 'updated_at', Self.TDateTimeToJsonValue(Source.updated_at));
    if Source.inscricao_estadualHasValue then
      Json.ObjAddProp(Result, 'inscricao_estadual', Self.stringToJsonValue(Source.inscricao_estadual));
    if Source.inscricao_municipalHasValue then
      Json.ObjAddProp(Result, 'inscricao_municipal', Self.stringToJsonValue(Source.inscricao_municipal));
    Json.ObjAddProp(Result, 'nome_razao_social', Self.stringToJsonValue(Source.nome_razao_social));
    if Source.nome_fantasiaHasValue then
      Json.ObjAddProp(Result, 'nome_fantasia', Self.stringToJsonValue(Source.nome_fantasia));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
    Json.ObjAddProp(Result, 'endereco', Self.TEmpresaEnderecoToJsonValue(Source.endereco));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaToJson(Source: TEmpresa): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaFromJsonValue(Source: TJSONValue): TEmpresa;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresa.Create;
  try
    if Json.ObjContains(Source, 'cpf_cnpj', JValue) then
      Result.cpf_cnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'created_at', JValue) then
      Result.created_at := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'updated_at', JValue) then
      Result.updated_at := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'inscricao_estadual', JValue) then
      Result.inscricao_estadual := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'inscricao_municipal', JValue) then
      Result.inscricao_municipal := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_razao_social', JValue) then
      Result.nome_razao_social := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_fantasia', JValue) then
      Result.nome_fantasia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'endereco', JValue) then
      Result.endereco := Self.TEmpresaEnderecoFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaFromJson(Source: string): TEmpresa;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaListToJsonValue(Source: TEmpresaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TEmpresaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaListToJson(Source: TEmpresaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaListFromJsonValue(Source: TJSONValue): TEmpresaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TEmpresaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaListFromJson(Source: string): TEmpresaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaListagemToJsonValue(Source: TEmpresaListagem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source._countHasValue then
      Json.ObjAddProp(Result, '@count', Self.IntegerToJsonValue(Source._count));
    if Assigned(Source.data) then
      Json.ObjAddProp(Result, 'data', Self.TEmpresaListToJsonValue(Source.data));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaListagemToJson(Source: TEmpresaListagem): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaListagemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaListagemFromJsonValue(Source: TJSONValue): TEmpresaListagem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaListagem.Create;
  try
    if Json.ObjContains(Source, '@count', JValue) then
      Result._count := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data', JValue) then
      Result.data := Self.TEmpresaListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaListagemFromJson(Source: string): TEmpresaListagem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaListagemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaPedidoCadastroCertificadoToJsonValue(Source: TEmpresaPedidoCadastroCertificado): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'certificado', Self.TBytesToJsonValue(Source.certificado));
    Json.ObjAddProp(Result, 'password', Self.stringToJsonValue(Source.password));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaPedidoCadastroCertificadoToJson(Source: TEmpresaPedidoCadastroCertificado): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaPedidoCadastroCertificadoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaPedidoCadastroCertificadoFromJsonValue(Source: TJSONValue): TEmpresaPedidoCadastroCertificado;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaPedidoCadastroCertificado.Create;
  try
    if Json.ObjContains(Source, 'certificado', JValue) then
      Result.certificado := Self.TBytesFromJsonValue(JValue);
    if Json.ObjContains(Source, 'password', JValue) then
      Result.password := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaPedidoCadastroCertificadoFromJson(Source: string): TEmpresaPedidoCadastroCertificado;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaPedidoCadastroCertificadoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaCertificadoToJsonValue(Source: TEmpresaCertificado): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.serial_numberHasValue then
      Json.ObjAddProp(Result, 'serial_number', Self.stringToJsonValue(Source.serial_number));
    if Source.issuer_nameHasValue then
      Json.ObjAddProp(Result, 'issuer_name', Self.stringToJsonValue(Source.issuer_name));
    if Source.not_valid_beforeHasValue then
      Json.ObjAddProp(Result, 'not_valid_before', Self.TDateTimeToJsonValue(Source.not_valid_before));
    if Source.not_valid_afterHasValue then
      Json.ObjAddProp(Result, 'not_valid_after', Self.TDateTimeToJsonValue(Source.not_valid_after));
    if Source.thumbprintHasValue then
      Json.ObjAddProp(Result, 'thumbprint', Self.stringToJsonValue(Source.thumbprint));
    if Source.subject_nameHasValue then
      Json.ObjAddProp(Result, 'subject_name', Self.stringToJsonValue(Source.subject_name));
    if Source.cpf_cnpjHasValue then
      Json.ObjAddProp(Result, 'cpf_cnpj', Self.stringToJsonValue(Source.cpf_cnpj));
    if Source.nome_razao_socialHasValue then
      Json.ObjAddProp(Result, 'nome_razao_social', Self.stringToJsonValue(Source.nome_razao_social));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaCertificadoToJson(Source: TEmpresaCertificado): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaCertificadoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaCertificadoFromJsonValue(Source: TJSONValue): TEmpresaCertificado;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaCertificado.Create;
  try
    if Json.ObjContains(Source, 'serial_number', JValue) then
      Result.serial_number := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'issuer_name', JValue) then
      Result.issuer_name := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'not_valid_before', JValue) then
      Result.not_valid_before := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'not_valid_after', JValue) then
      Result.not_valid_after := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'thumbprint', JValue) then
      Result.thumbprint := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'subject_name', JValue) then
      Result.subject_name := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cpf_cnpj', JValue) then
      Result.cpf_cnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_razao_social', JValue) then
      Result.nome_razao_social := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaCertificadoFromJson(Source: string): TEmpresaCertificado;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaCertificadoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfeToJsonValue(Source: TEmpresaConfigNfe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CRTHasValue then
      Json.ObjAddProp(Result, 'CRT', Self.IntegerToJsonValue(Source.CRT));
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfeToJson(Source: TEmpresaConfigNfe): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigNfeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfeFromJsonValue(Source: TJSONValue): TEmpresaConfigNfe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigNfe.Create;
  try
    if Json.ObjContains(Source, 'CRT', JValue) then
      Result.CRT := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfeFromJson(Source: string): TEmpresaConfigNfe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigNfeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfceSefazToJsonValue(Source: TEmpresaConfigNfceSefaz): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'id_csc', Self.IntegerToJsonValue(Source.id_csc));
    Json.ObjAddProp(Result, 'csc', Self.stringToJsonValue(Source.csc));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfceSefazToJson(Source: TEmpresaConfigNfceSefaz): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigNfceSefazToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfceSefazFromJsonValue(Source: TJSONValue): TEmpresaConfigNfceSefaz;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigNfceSefaz.Create;
  try
    if Json.ObjContains(Source, 'id_csc', JValue) then
      Result.id_csc := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'csc', JValue) then
      Result.csc := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfceSefazFromJson(Source: string): TEmpresaConfigNfceSefaz;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigNfceSefazFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfceToJsonValue(Source: TEmpresaConfigNfce): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CRTHasValue then
      Json.ObjAddProp(Result, 'CRT', Self.IntegerToJsonValue(Source.CRT));
    Json.ObjAddProp(Result, 'sefaz', Self.TEmpresaConfigNfceSefazToJsonValue(Source.sefaz));
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfceToJson(Source: TEmpresaConfigNfce): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigNfceToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfceFromJsonValue(Source: TJSONValue): TEmpresaConfigNfce;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigNfce.Create;
  try
    if Json.ObjContains(Source, 'CRT', JValue) then
      Result.CRT := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'sefaz', JValue) then
      Result.sefaz := Self.TEmpresaConfigNfceSefazFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfceFromJson(Source: string): TEmpresaConfigNfce;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigNfceFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfseRegTribToJsonValue(Source: TEmpresaConfigNfseRegTrib): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.opSimpNacHasValue then
      Json.ObjAddProp(Result, 'opSimpNac', Self.IntegerToJsonValue(Source.opSimpNac));
    if Source.regApTribSNHasValue then
      Json.ObjAddProp(Result, 'regApTribSN', Self.IntegerToJsonValue(Source.regApTribSN));
    if Source.regEspTribHasValue then
      Json.ObjAddProp(Result, 'regEspTrib', Self.IntegerToJsonValue(Source.regEspTrib));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfseRegTribToJson(Source: TEmpresaConfigNfseRegTrib): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigNfseRegTribToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfseRegTribFromJsonValue(Source: TJSONValue): TEmpresaConfigNfseRegTrib;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigNfseRegTrib.Create;
  try
    if Json.ObjContains(Source, 'opSimpNac', JValue) then
      Result.opSimpNac := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'regApTribSN', JValue) then
      Result.regApTribSN := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'regEspTrib', JValue) then
      Result.regEspTrib := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfseRegTribFromJson(Source: string): TEmpresaConfigNfseRegTrib;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigNfseRegTribFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigRpsToJsonValue(Source: TEmpresaConfigRps): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'lote', Self.Int64ToJsonValue(Source.lote));
    Json.ObjAddProp(Result, 'serie', Self.stringToJsonValue(Source.serie));
    Json.ObjAddProp(Result, 'numero', Self.Int64ToJsonValue(Source.numero));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigRpsToJson(Source: TEmpresaConfigRps): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigRpsToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigRpsFromJsonValue(Source: TJSONValue): TEmpresaConfigRps;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigRps.Create;
  try
    if Json.ObjContains(Source, 'lote', JValue) then
      Result.lote := Self.Int64FromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.numero := Self.Int64FromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigRpsFromJson(Source: string): TEmpresaConfigRps;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigRpsFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigPrefeituraToJsonValue(Source: TEmpresaConfigPrefeitura): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.loginHasValue then
      Json.ObjAddProp(Result, 'login', Self.stringToJsonValue(Source.login));
    if Source.senhaHasValue then
      Json.ObjAddProp(Result, 'senha', Self.stringToJsonValue(Source.senha));
    if Source.tokenHasValue then
      Json.ObjAddProp(Result, 'token', Self.stringToJsonValue(Source.token));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigPrefeituraToJson(Source: TEmpresaConfigPrefeitura): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigPrefeituraToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigPrefeituraFromJsonValue(Source: TJSONValue): TEmpresaConfigPrefeitura;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigPrefeitura.Create;
  try
    if Json.ObjContains(Source, 'login', JValue) then
      Result.login := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'senha', JValue) then
      Result.senha := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'token', JValue) then
      Result.token := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigPrefeituraFromJson(Source: string): TEmpresaConfigPrefeitura;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigPrefeituraFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfseToJsonValue(Source: TEmpresaConfigNfse): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.regTrib) then
      Json.ObjAddProp(Result, 'regTrib', Self.TEmpresaConfigNfseRegTribToJsonValue(Source.regTrib));
    Json.ObjAddProp(Result, 'rps', Self.TEmpresaConfigRpsToJsonValue(Source.rps));
    if Assigned(Source.prefeitura) then
      Json.ObjAddProp(Result, 'prefeitura', Self.TEmpresaConfigPrefeituraToJsonValue(Source.prefeitura));
    if Source.incentivo_fiscalHasValue then
      Json.ObjAddProp(Result, 'incentivo_fiscal', Self.BooleanToJsonValue(Source.incentivo_fiscal));
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfseToJson(Source: TEmpresaConfigNfse): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigNfseToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfseFromJsonValue(Source: TJSONValue): TEmpresaConfigNfse;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigNfse.Create;
  try
    if Json.ObjContains(Source, 'regTrib', JValue) then
      Result.regTrib := Self.TEmpresaConfigNfseRegTribFromJsonValue(JValue);
    if Json.ObjContains(Source, 'rps', JValue) then
      Result.rps := Self.TEmpresaConfigRpsFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prefeitura', JValue) then
      Result.prefeitura := Self.TEmpresaConfigPrefeituraFromJsonValue(JValue);
    if Json.ObjContains(Source, 'incentivo_fiscal', JValue) then
      Result.incentivo_fiscal := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfseFromJson(Source: string): TEmpresaConfigNfse;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigNfseFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigMdfeToJsonValue(Source: TEmpresaConfigMdfe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigMdfeToJson(Source: TEmpresaConfigMdfe): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigMdfeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigMdfeFromJsonValue(Source: TJSONValue): TEmpresaConfigMdfe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigMdfe.Create;
  try
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigMdfeFromJson(Source: string): TEmpresaConfigMdfe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigMdfeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigCteToJsonValue(Source: TEmpresaConfigCte): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CRTHasValue then
      Json.ObjAddProp(Result, 'CRT', Self.IntegerToJsonValue(Source.CRT));
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigCteToJson(Source: TEmpresaConfigCte): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigCteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigCteFromJsonValue(Source: TJSONValue): TEmpresaConfigCte;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigCte.Create;
  try
    if Json.ObjContains(Source, 'CRT', JValue) then
      Result.CRT := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigCteFromJson(Source: string): TEmpresaConfigCte;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigCteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfcomToJsonValue(Source: TEmpresaConfigNfcom): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CRTHasValue then
      Json.ObjAddProp(Result, 'CRT', Self.IntegerToJsonValue(Source.CRT));
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfcomToJson(Source: TEmpresaConfigNfcom): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigNfcomToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigNfcomFromJsonValue(Source: TJSONValue): TEmpresaConfigNfcom;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigNfcom.Create;
  try
    if Json.ObjContains(Source, 'CRT', JValue) then
      Result.CRT := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigNfcomFromJson(Source: string): TEmpresaConfigNfcom;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigNfcomFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigDceToJsonValue(Source: TEmpresaConfigDce): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigDceToJson(Source: TEmpresaConfigDce): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigDceToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigDceFromJsonValue(Source: TJSONValue): TEmpresaConfigDce;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigDce.Create;
  try
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigDceFromJson(Source: string): TEmpresaConfigDce;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigDceFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigDistribuicaoNfeToJsonValue(Source: TEmpresaConfigDistribuicaoNfe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.distribuicao_automaticaHasValue then
      Json.ObjAddProp(Result, 'distribuicao_automatica', Self.BooleanToJsonValue(Source.distribuicao_automatica));
    if Source.distribuicao_intervalo_horasHasValue then
      Json.ObjAddProp(Result, 'distribuicao_intervalo_horas', Self.IntegerToJsonValue(Source.distribuicao_intervalo_horas));
    if Source.ciencia_automaticaHasValue then
      Json.ObjAddProp(Result, 'ciencia_automatica', Self.BooleanToJsonValue(Source.ciencia_automatica));
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigDistribuicaoNfeToJson(Source: TEmpresaConfigDistribuicaoNfe): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmpresaConfigDistribuicaoNfeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmpresaConfigDistribuicaoNfeFromJsonValue(Source: TJSONValue): TEmpresaConfigDistribuicaoNfe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmpresaConfigDistribuicaoNfe.Create;
  try
    if Json.ObjContains(Source, 'distribuicao_automatica', JValue) then
      Result.distribuicao_automatica := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'distribuicao_intervalo_horas', JValue) then
      Result.distribuicao_intervalo_horas := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ciencia_automatica', JValue) then
      Result.ciencia_automatica := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmpresaConfigDistribuicaoNfeFromJson(Source: string): TEmpresaConfigDistribuicaoNfe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmpresaConfigDistribuicaoNfeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.stringListToJsonValue(Source: stringList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.stringToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.stringListToJson(Source: stringList): string;
var
  JValue: TJSONValue;
begin
  JValue := stringListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.stringListFromJsonValue(Source: TJSONValue): stringList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := stringList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.stringFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.stringListFromJson(Source: string): stringList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := stringListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseCidadesAtendidasToJsonValue(Source: TNfseCidadesAtendidas): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source._countHasValue then
      Json.ObjAddProp(Result, '@count', Self.IntegerToJsonValue(Source._count));
    if Assigned(Source.data) then
      Json.ObjAddProp(Result, 'data', Self.stringListToJsonValue(Source.data));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseCidadesAtendidasToJson(Source: TNfseCidadesAtendidas): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfseCidadesAtendidasToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseCidadesAtendidasFromJsonValue(Source: TJSONValue): TNfseCidadesAtendidas;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfseCidadesAtendidas.Create;
  try
    if Json.ObjContains(Source, '@count', JValue) then
      Result._count := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data', JValue) then
      Result.data := Self.stringListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseCidadesAtendidasFromJson(Source: string): TNfseCidadesAtendidas;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfseCidadesAtendidasFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseCidadeMetadadosToJsonValue(Source: TNfseCidadeMetadados): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.codigo_ibgeHasValue then
      Json.ObjAddProp(Result, 'codigo_ibge', Self.stringToJsonValue(Source.codigo_ibge));
    if Source.ufHasValue then
      Json.ObjAddProp(Result, 'uf', Self.stringToJsonValue(Source.uf));
    if Source.municipioHasValue then
      Json.ObjAddProp(Result, 'municipio', Self.stringToJsonValue(Source.municipio));
    if Source.provedorHasValue then
      Json.ObjAddProp(Result, 'provedor', Self.stringToJsonValue(Source.provedor));
    if Assigned(Source.ambientes) then
      Json.ObjAddProp(Result, 'ambientes', Self.stringListToJsonValue(Source.ambientes));
    if Assigned(Source.credenciais) then
      Json.ObjAddProp(Result, 'credenciais', Self.stringListToJsonValue(Source.credenciais));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseCidadeMetadadosToJson(Source: TNfseCidadeMetadados): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfseCidadeMetadadosToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseCidadeMetadadosFromJsonValue(Source: TJSONValue): TNfseCidadeMetadados;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfseCidadeMetadados.Create;
  try
    if Json.ObjContains(Source, 'codigo_ibge', JValue) then
      Result.codigo_ibge := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uf', JValue) then
      Result.uf := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'municipio', JValue) then
      Result.municipio := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'provedor', JValue) then
      Result.provedor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambientes', JValue) then
      Result.ambientes := Self.stringListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'credenciais', JValue) then
      Result.credenciais := Self.stringListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseCidadeMetadadosFromJson(Source: string): TNfseCidadeMetadados;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfseCidadeMetadadosFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsIdentificacaoPrestadorToJsonValue(Source: TRpsIdentificacaoPrestador): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cpf_cnpj', Self.stringToJsonValue(Source.cpf_cnpj));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsIdentificacaoPrestadorToJson(Source: TRpsIdentificacaoPrestador): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsIdentificacaoPrestadorToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsIdentificacaoPrestadorFromJsonValue(Source: TJSONValue): TRpsIdentificacaoPrestador;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsIdentificacaoPrestador.Create;
  try
    if Json.ObjContains(Source, 'cpf_cnpj', JValue) then
      Result.cpf_cnpj := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsIdentificacaoPrestadorFromJson(Source: string): TRpsIdentificacaoPrestador;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsIdentificacaoPrestadorFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosTomadorEnderecoToJsonValue(Source: TRpsDadosTomadorEndereco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.logradouroHasValue then
      Json.ObjAddProp(Result, 'logradouro', Self.stringToJsonValue(Source.logradouro));
    if Source.numeroHasValue then
      Json.ObjAddProp(Result, 'numero', Self.stringToJsonValue(Source.numero));
    if Source.complementoHasValue then
      Json.ObjAddProp(Result, 'complemento', Self.stringToJsonValue(Source.complemento));
    if Source.bairroHasValue then
      Json.ObjAddProp(Result, 'bairro', Self.stringToJsonValue(Source.bairro));
    if Source.codigo_municipioHasValue then
      Json.ObjAddProp(Result, 'codigo_municipio', Self.stringToJsonValue(Source.codigo_municipio));
    if Source.cidadeHasValue then
      Json.ObjAddProp(Result, 'cidade', Self.stringToJsonValue(Source.cidade));
    if Source.ufHasValue then
      Json.ObjAddProp(Result, 'uf', Self.stringToJsonValue(Source.uf));
    if Source.codigo_paisHasValue then
      Json.ObjAddProp(Result, 'codigo_pais', Self.stringToJsonValue(Source.codigo_pais));
    if Source.paisHasValue then
      Json.ObjAddProp(Result, 'pais', Self.stringToJsonValue(Source.pais));
    if Source.cepHasValue then
      Json.ObjAddProp(Result, 'cep', Self.stringToJsonValue(Source.cep));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosTomadorEnderecoToJson(Source: TRpsDadosTomadorEndereco): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsDadosTomadorEnderecoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosTomadorEnderecoFromJsonValue(Source: TJSONValue): TRpsDadosTomadorEndereco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsDadosTomadorEndereco.Create;
  try
    if Json.ObjContains(Source, 'logradouro', JValue) then
      Result.logradouro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.numero := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'complemento', JValue) then
      Result.complemento := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'bairro', JValue) then
      Result.bairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_municipio', JValue) then
      Result.codigo_municipio := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cidade', JValue) then
      Result.cidade := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uf', JValue) then
      Result.uf := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_pais', JValue) then
      Result.codigo_pais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pais', JValue) then
      Result.pais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cep', JValue) then
      Result.cep := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosTomadorEnderecoFromJson(Source: string): TRpsDadosTomadorEndereco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsDadosTomadorEnderecoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosTomadorToJsonValue(Source: TRpsDadosTomador): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.cpf_cnpjHasValue then
      Json.ObjAddProp(Result, 'cpf_cnpj', Self.stringToJsonValue(Source.cpf_cnpj));
    if Source.inscricao_municipalHasValue then
      Json.ObjAddProp(Result, 'inscricao_municipal', Self.stringToJsonValue(Source.inscricao_municipal));
    Json.ObjAddProp(Result, 'nome_razao_social', Self.stringToJsonValue(Source.nome_razao_social));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    if Source.emailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
    if Assigned(Source.endereco) then
      Json.ObjAddProp(Result, 'endereco', Self.TRpsDadosTomadorEnderecoToJsonValue(Source.endereco));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosTomadorToJson(Source: TRpsDadosTomador): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsDadosTomadorToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosTomadorFromJsonValue(Source: TJSONValue): TRpsDadosTomador;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsDadosTomador.Create;
  try
    if Json.ObjContains(Source, 'cpf_cnpj', JValue) then
      Result.cpf_cnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'inscricao_municipal', JValue) then
      Result.inscricao_municipal := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_razao_social', JValue) then
      Result.nome_razao_social := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'endereco', JValue) then
      Result.endereco := Self.TRpsDadosTomadorEnderecoFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosTomadorFromJson(Source: string): TRpsDadosTomador;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsDadosTomadorFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosIntermediarioToJsonValue(Source: TRpsDadosIntermediario): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.cpf_cnpjHasValue then
      Json.ObjAddProp(Result, 'cpf_cnpj', Self.stringToJsonValue(Source.cpf_cnpj));
    if Source.nome_razao_socialHasValue then
      Json.ObjAddProp(Result, 'nome_razao_social', Self.stringToJsonValue(Source.nome_razao_social));
    if Source.inscricao_municipalHasValue then
      Json.ObjAddProp(Result, 'inscricao_municipal', Self.stringToJsonValue(Source.inscricao_municipal));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosIntermediarioToJson(Source: TRpsDadosIntermediario): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsDadosIntermediarioToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosIntermediarioFromJsonValue(Source: TJSONValue): TRpsDadosIntermediario;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsDadosIntermediario.Create;
  try
    if Json.ObjContains(Source, 'cpf_cnpj', JValue) then
      Result.cpf_cnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_razao_social', JValue) then
      Result.nome_razao_social := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'inscricao_municipal', JValue) then
      Result.inscricao_municipal := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosIntermediarioFromJson(Source: string): TRpsDadosIntermediario;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsDadosIntermediarioFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosConstrucaoCivilToJsonValue(Source: TRpsDadosConstrucaoCivil): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.codigo_obraHasValue then
      Json.ObjAddProp(Result, 'codigo_obra', Self.stringToJsonValue(Source.codigo_obra));
    if Source.artHasValue then
      Json.ObjAddProp(Result, 'art', Self.stringToJsonValue(Source.art));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosConstrucaoCivilToJson(Source: TRpsDadosConstrucaoCivil): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsDadosConstrucaoCivilToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosConstrucaoCivilFromJsonValue(Source: TJSONValue): TRpsDadosConstrucaoCivil;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsDadosConstrucaoCivil.Create;
  try
    if Json.ObjContains(Source, 'codigo_obra', JValue) then
      Result.codigo_obra := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'art', JValue) then
      Result.art := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosConstrucaoCivilFromJson(Source: string): TRpsDadosConstrucaoCivil;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsDadosConstrucaoCivilFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsServicoValoresToJsonValue(Source: TRpsServicoValores): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'valor_unitario', Self.DoubleToJsonValue(Source.valor_unitario));
    if Source.valor_servicosHasValue then
      Json.ObjAddProp(Result, 'valor_servicos', Self.DoubleToJsonValue(Source.valor_servicos));
    if Source.valor_deducoesHasValue then
      Json.ObjAddProp(Result, 'valor_deducoes', Self.DoubleToJsonValue(Source.valor_deducoes));
    if Source.valor_pisHasValue then
      Json.ObjAddProp(Result, 'valor_pis', Self.DoubleToJsonValue(Source.valor_pis));
    if Source.valor_cofinsHasValue then
      Json.ObjAddProp(Result, 'valor_cofins', Self.DoubleToJsonValue(Source.valor_cofins));
    if Source.valor_inssHasValue then
      Json.ObjAddProp(Result, 'valor_inss', Self.DoubleToJsonValue(Source.valor_inss));
    if Source.valor_irHasValue then
      Json.ObjAddProp(Result, 'valor_ir', Self.DoubleToJsonValue(Source.valor_ir));
    if Source.valor_csllHasValue then
      Json.ObjAddProp(Result, 'valor_csll', Self.DoubleToJsonValue(Source.valor_csll));
    if Source.valor_outras_retencoesHasValue then
      Json.ObjAddProp(Result, 'valor_outras_retencoes', Self.DoubleToJsonValue(Source.valor_outras_retencoes));
    if Source.valor_issHasValue then
      Json.ObjAddProp(Result, 'valor_iss', Self.DoubleToJsonValue(Source.valor_iss));
    if Source.valor_iss_retidoHasValue then
      Json.ObjAddProp(Result, 'valor_iss_retido', Self.DoubleToJsonValue(Source.valor_iss_retido));
    if Source.valor_liquidoHasValue then
      Json.ObjAddProp(Result, 'valor_liquido', Self.DoubleToJsonValue(Source.valor_liquido));
    if Source.aliquota_issHasValue then
      Json.ObjAddProp(Result, 'aliquota_iss', Self.DoubleToJsonValue(Source.aliquota_iss));
    if Source.aliquota_pisHasValue then
      Json.ObjAddProp(Result, 'aliquota_pis', Self.DoubleToJsonValue(Source.aliquota_pis));
    if Source.aliquota_cofinsHasValue then
      Json.ObjAddProp(Result, 'aliquota_cofins', Self.DoubleToJsonValue(Source.aliquota_cofins));
    if Source.aliquota_inssHasValue then
      Json.ObjAddProp(Result, 'aliquota_inss', Self.DoubleToJsonValue(Source.aliquota_inss));
    if Source.aliquota_irHasValue then
      Json.ObjAddProp(Result, 'aliquota_ir', Self.DoubleToJsonValue(Source.aliquota_ir));
    if Source.aliquota_csllHasValue then
      Json.ObjAddProp(Result, 'aliquota_csll', Self.DoubleToJsonValue(Source.aliquota_csll));
    if Source.desconto_incondicionadoHasValue then
      Json.ObjAddProp(Result, 'desconto_incondicionado', Self.DoubleToJsonValue(Source.desconto_incondicionado));
    if Source.desconto_condicionadoHasValue then
      Json.ObjAddProp(Result, 'desconto_condicionado', Self.DoubleToJsonValue(Source.desconto_condicionado));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsServicoValoresToJson(Source: TRpsServicoValores): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsServicoValoresToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsServicoValoresFromJsonValue(Source: TJSONValue): TRpsServicoValores;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsServicoValores.Create;
  try
    if Json.ObjContains(Source, 'valor_unitario', JValue) then
      Result.valor_unitario := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_servicos', JValue) then
      Result.valor_servicos := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_deducoes', JValue) then
      Result.valor_deducoes := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_pis', JValue) then
      Result.valor_pis := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_cofins', JValue) then
      Result.valor_cofins := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_inss', JValue) then
      Result.valor_inss := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_ir', JValue) then
      Result.valor_ir := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_csll', JValue) then
      Result.valor_csll := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_outras_retencoes', JValue) then
      Result.valor_outras_retencoes := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_iss', JValue) then
      Result.valor_iss := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_iss_retido', JValue) then
      Result.valor_iss_retido := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_liquido', JValue) then
      Result.valor_liquido := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aliquota_iss', JValue) then
      Result.aliquota_iss := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aliquota_pis', JValue) then
      Result.aliquota_pis := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aliquota_cofins', JValue) then
      Result.aliquota_cofins := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aliquota_inss', JValue) then
      Result.aliquota_inss := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aliquota_ir', JValue) then
      Result.aliquota_ir := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aliquota_csll', JValue) then
      Result.aliquota_csll := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'desconto_incondicionado', JValue) then
      Result.desconto_incondicionado := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'desconto_condicionado', JValue) then
      Result.desconto_condicionado := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsServicoValoresFromJson(Source: string): TRpsServicoValores;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsServicoValoresFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosServicoToJsonValue(Source: TRpsDadosServico): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.iss_retidoHasValue then
      Json.ObjAddProp(Result, 'iss_retido', Self.BooleanToJsonValue(Source.iss_retido));
    if Source.responsavel_retencaoHasValue then
      Json.ObjAddProp(Result, 'responsavel_retencao', Self.IntegerToJsonValue(Source.responsavel_retencao));
    Json.ObjAddProp(Result, 'item_lista_servico', Self.stringToJsonValue(Source.item_lista_servico));
    if Source.codigo_cnaeHasValue then
      Json.ObjAddProp(Result, 'codigo_cnae', Self.stringToJsonValue(Source.codigo_cnae));
    if Source.codigo_tributacao_municipioHasValue then
      Json.ObjAddProp(Result, 'codigo_tributacao_municipio', Self.stringToJsonValue(Source.codigo_tributacao_municipio));
    Json.ObjAddProp(Result, 'discriminacao', Self.stringToJsonValue(Source.discriminacao));
    if Source.codigo_municipioHasValue then
      Json.ObjAddProp(Result, 'codigo_municipio', Self.stringToJsonValue(Source.codigo_municipio));
    if Source.codigo_paisHasValue then
      Json.ObjAddProp(Result, 'codigo_pais', Self.stringToJsonValue(Source.codigo_pais));
    if Source.tipo_tributacaoHasValue then
      Json.ObjAddProp(Result, 'tipo_tributacao', Self.IntegerToJsonValue(Source.tipo_tributacao));
    if Source.exigibilidade_issHasValue then
      Json.ObjAddProp(Result, 'exigibilidade_iss', Self.IntegerToJsonValue(Source.exigibilidade_iss));
    if Source.codigo_municipio_incidenciaHasValue then
      Json.ObjAddProp(Result, 'codigo_municipio_incidencia', Self.stringToJsonValue(Source.codigo_municipio_incidencia));
    if Source.numero_processoHasValue then
      Json.ObjAddProp(Result, 'numero_processo', Self.stringToJsonValue(Source.numero_processo));
    if Source.unidadeHasValue then
      Json.ObjAddProp(Result, 'unidade', Self.stringToJsonValue(Source.unidade));
    if Source.quantidadeHasValue then
      Json.ObjAddProp(Result, 'quantidade', Self.DoubleToJsonValue(Source.quantidade));
    Json.ObjAddProp(Result, 'valores', Self.TRpsServicoValoresToJsonValue(Source.valores));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosServicoToJson(Source: TRpsDadosServico): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsDadosServicoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosServicoFromJsonValue(Source: TJSONValue): TRpsDadosServico;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsDadosServico.Create;
  try
    if Json.ObjContains(Source, 'iss_retido', JValue) then
      Result.iss_retido := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'responsavel_retencao', JValue) then
      Result.responsavel_retencao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'item_lista_servico', JValue) then
      Result.item_lista_servico := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_cnae', JValue) then
      Result.codigo_cnae := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_tributacao_municipio', JValue) then
      Result.codigo_tributacao_municipio := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'discriminacao', JValue) then
      Result.discriminacao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_municipio', JValue) then
      Result.codigo_municipio := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_pais', JValue) then
      Result.codigo_pais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_tributacao', JValue) then
      Result.tipo_tributacao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'exigibilidade_iss', JValue) then
      Result.exigibilidade_iss := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_municipio_incidencia', JValue) then
      Result.codigo_municipio_incidencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_processo', JValue) then
      Result.numero_processo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'unidade', JValue) then
      Result.unidade := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'quantidade', JValue) then
      Result.quantidade := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valores', JValue) then
      Result.valores := Self.TRpsServicoValoresFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosServicoFromJson(Source: string): TRpsDadosServico;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsDadosServicoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosServicoListToJsonValue(Source: TRpsDadosServicoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TRpsDadosServicoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosServicoListToJson(Source: TRpsDadosServicoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsDadosServicoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosServicoListFromJsonValue(Source: TJSONValue): TRpsDadosServicoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsDadosServicoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TRpsDadosServicoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosServicoListFromJson(Source: string): TRpsDadosServicoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsDadosServicoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoToJsonValue(Source: TRpsPedidoEmissao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.referenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.referencia));
    if Source.data_emissaoHasValue then
      Json.ObjAddProp(Result, 'data_emissao', Self.TDateTimeToJsonValue(Source.data_emissao));
    if Source.competenciaHasValue then
      Json.ObjAddProp(Result, 'competencia', Self.TDateTimeToJsonValue(Source.competencia));
    if Source.natureza_tributacaoHasValue then
      Json.ObjAddProp(Result, 'natureza_tributacao', Self.IntegerToJsonValue(Source.natureza_tributacao));
    Json.ObjAddProp(Result, 'prestador', Self.TRpsIdentificacaoPrestadorToJsonValue(Source.prestador));
    Json.ObjAddProp(Result, 'tomador', Self.TRpsDadosTomadorToJsonValue(Source.tomador));
    if Assigned(Source.intermediario) then
      Json.ObjAddProp(Result, 'intermediario', Self.TRpsDadosIntermediarioToJsonValue(Source.intermediario));
    if Assigned(Source.construcao_civil) then
      Json.ObjAddProp(Result, 'construcao_civil', Self.TRpsDadosConstrucaoCivilToJsonValue(Source.construcao_civil));
    Json.ObjAddProp(Result, 'servicos', Self.TRpsDadosServicoListToJsonValue(Source.servicos));
    if Source.outras_informacoesHasValue then
      Json.ObjAddProp(Result, 'outras_informacoes', Self.stringToJsonValue(Source.outras_informacoes));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoToJson(Source: TRpsPedidoEmissao): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsPedidoEmissaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoFromJsonValue(Source: TJSONValue): TRpsPedidoEmissao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsPedidoEmissao.Create;
  try
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_emissao', JValue) then
      Result.data_emissao := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'competencia', JValue) then
      Result.competencia := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'natureza_tributacao', JValue) then
      Result.natureza_tributacao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prestador', JValue) then
      Result.prestador := Self.TRpsIdentificacaoPrestadorFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tomador', JValue) then
      Result.tomador := Self.TRpsDadosTomadorFromJsonValue(JValue);
    if Json.ObjContains(Source, 'intermediario', JValue) then
      Result.intermediario := Self.TRpsDadosIntermediarioFromJsonValue(JValue);
    if Json.ObjContains(Source, 'construcao_civil', JValue) then
      Result.construcao_civil := Self.TRpsDadosConstrucaoCivilFromJsonValue(JValue);
    if Json.ObjContains(Source, 'servicos', JValue) then
      Result.servicos := Self.TRpsDadosServicoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'outras_informacoes', JValue) then
      Result.outras_informacoes := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoFromJson(Source: string): TRpsPedidoEmissao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsPedidoEmissaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoListToJsonValue(Source: TRpsPedidoEmissaoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TRpsPedidoEmissaoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoListToJson(Source: TRpsPedidoEmissaoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsPedidoEmissaoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoListFromJsonValue(Source: TJSONValue): TRpsPedidoEmissaoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsPedidoEmissaoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TRpsPedidoEmissaoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoListFromJson(Source: string): TRpsPedidoEmissaoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsPedidoEmissaoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoLoteToJsonValue(Source: TRpsPedidoEmissaoLote): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.referenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.referencia));
    if Assigned(Source.lista_rps) then
      Json.ObjAddProp(Result, 'lista_rps', Self.TRpsPedidoEmissaoListToJsonValue(Source.lista_rps));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoLoteToJson(Source: TRpsPedidoEmissaoLote): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsPedidoEmissaoLoteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoLoteFromJsonValue(Source: TJSONValue): TRpsPedidoEmissaoLote;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsPedidoEmissaoLote.Create;
  try
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lista_rps', JValue) then
      Result.lista_rps := Self.TRpsPedidoEmissaoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsPedidoEmissaoLoteFromJson(Source: string): TRpsPedidoEmissaoLote;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsPedidoEmissaoLoteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDPSToJsonValue(Source: TDPS): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.serieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.stringToJsonValue(Source.serie));
    if Source.nDPSHasValue then
      Json.ObjAddProp(Result, 'nDPS', Self.stringToJsonValue(Source.nDPS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDPSToJson(Source: TDPS): string;
var
  JValue: TJSONValue;
begin
  JValue := TDPSToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDPSFromJsonValue(Source: TJSONValue): TDPS;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDPS.Create;
  try
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nDPS', JValue) then
      Result.nDPS := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDPSFromJson(Source: string): TDPS;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDPSFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseMensagemRetornoToJsonValue(Source: TNfseMensagemRetorno): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.codigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.codigo));
    if Source.descricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.descricao));
    if Source.correcaoHasValue then
      Json.ObjAddProp(Result, 'correcao', Self.stringToJsonValue(Source.correcao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseMensagemRetornoToJson(Source: TNfseMensagemRetorno): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfseMensagemRetornoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseMensagemRetornoFromJsonValue(Source: TJSONValue): TNfseMensagemRetorno;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfseMensagemRetorno.Create;
  try
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.descricao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'correcao', JValue) then
      Result.correcao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseMensagemRetornoFromJson(Source: string): TNfseMensagemRetorno;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfseMensagemRetornoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseMensagemRetornoListToJsonValue(Source: TNfseMensagemRetornoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfseMensagemRetornoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseMensagemRetornoListToJson(Source: TNfseMensagemRetornoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfseMensagemRetornoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseMensagemRetornoListFromJsonValue(Source: TJSONValue): TNfseMensagemRetornoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfseMensagemRetornoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfseMensagemRetornoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseMensagemRetornoListFromJson(Source: string): TNfseMensagemRetornoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfseMensagemRetornoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseCancelamentoToJsonValue(Source: TNfseCancelamento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Source.codigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.codigo));
    if Source.motivoHasValue then
      Json.ObjAddProp(Result, 'motivo', Self.stringToJsonValue(Source.motivo));
    if Source.data_horaHasValue then
      Json.ObjAddProp(Result, 'data_hora', Self.TDateTimeToJsonValue(Source.data_hora));
    if Assigned(Source.mensagens) then
      Json.ObjAddProp(Result, 'mensagens', Self.TNfseMensagemRetornoListToJsonValue(Source.mensagens));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseCancelamentoToJson(Source: TNfseCancelamento): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfseCancelamentoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseCancelamentoFromJsonValue(Source: TJSONValue): TNfseCancelamento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfseCancelamento.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo', JValue) then
      Result.motivo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_hora', JValue) then
      Result.data_hora := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagens', JValue) then
      Result.mensagens := Self.TNfseMensagemRetornoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseCancelamentoFromJson(Source: string): TNfseCancelamento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfseCancelamentoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsIdentificacaoToJsonValue(Source: TRpsIdentificacao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.numeroHasValue then
      Json.ObjAddProp(Result, 'numero', Self.stringToJsonValue(Source.numero));
    if Source.serieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.stringToJsonValue(Source.serie));
    if Source.tipoHasValue then
      Json.ObjAddProp(Result, 'tipo', Self.stringToJsonValue(Source.tipo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsIdentificacaoToJson(Source: TRpsIdentificacao): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsIdentificacaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsIdentificacaoFromJsonValue(Source: TJSONValue): TRpsIdentificacao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsIdentificacao.Create;
  try
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.numero := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo', JValue) then
      Result.tipo := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsIdentificacaoFromJson(Source: string): TRpsIdentificacao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsIdentificacaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosToJsonValue(Source: TRpsDados): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.identificacao_rps) then
      Json.ObjAddProp(Result, 'identificacao_rps', Self.TRpsIdentificacaoToJsonValue(Source.identificacao_rps));
    if Source.data_emissaoHasValue then
      Json.ObjAddProp(Result, 'data_emissao', Self.TDateTimeToJsonValue(Source.data_emissao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosToJson(Source: TRpsDados): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsDadosToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosFromJsonValue(Source: TJSONValue): TRpsDados;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsDados.Create;
  try
    if Json.ObjContains(Source, 'identificacao_rps', JValue) then
      Result.identificacao_rps := Self.TRpsIdentificacaoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_emissao', JValue) then
      Result.data_emissao := Self.TDateTimeFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosFromJson(Source: string): TRpsDados;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsDadosFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosPrestadorToJsonValue(Source: TRpsDadosPrestador): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.cpf_cnpjHasValue then
      Json.ObjAddProp(Result, 'cpf_cnpj', Self.stringToJsonValue(Source.cpf_cnpj));
    if Source.inscricao_municipalHasValue then
      Json.ObjAddProp(Result, 'inscricao_municipal', Self.stringToJsonValue(Source.inscricao_municipal));
    if Source.nome_razao_socialHasValue then
      Json.ObjAddProp(Result, 'nome_razao_social', Self.stringToJsonValue(Source.nome_razao_social));
    if Source.nome_fantasiaHasValue then
      Json.ObjAddProp(Result, 'nome_fantasia', Self.stringToJsonValue(Source.nome_fantasia));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    if Source.emailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
    if Assigned(Source.endereco) then
      Json.ObjAddProp(Result, 'endereco', Self.TEmpresaEnderecoToJsonValue(Source.endereco));
    if Source.optante_simples_nacionalHasValue then
      Json.ObjAddProp(Result, 'optante_simples_nacional', Self.BooleanToJsonValue(Source.optante_simples_nacional));
    if Source.regime_tributacaoHasValue then
      Json.ObjAddProp(Result, 'regime_tributacao', Self.IntegerToJsonValue(Source.regime_tributacao));
    if Source.regime_especial_tributacaoHasValue then
      Json.ObjAddProp(Result, 'regime_especial_tributacao', Self.IntegerToJsonValue(Source.regime_especial_tributacao));
    if Source.incentivo_fiscalHasValue then
      Json.ObjAddProp(Result, 'incentivo_fiscal', Self.BooleanToJsonValue(Source.incentivo_fiscal));
    if Source.incentivador_culturalHasValue then
      Json.ObjAddProp(Result, 'incentivador_cultural', Self.BooleanToJsonValue(Source.incentivador_cultural));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosPrestadorToJson(Source: TRpsDadosPrestador): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsDadosPrestadorToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsDadosPrestadorFromJsonValue(Source: TJSONValue): TRpsDadosPrestador;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsDadosPrestador.Create;
  try
    if Json.ObjContains(Source, 'cpf_cnpj', JValue) then
      Result.cpf_cnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'inscricao_municipal', JValue) then
      Result.inscricao_municipal := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_razao_social', JValue) then
      Result.nome_razao_social := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_fantasia', JValue) then
      Result.nome_fantasia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'endereco', JValue) then
      Result.endereco := Self.TEmpresaEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'optante_simples_nacional', JValue) then
      Result.optante_simples_nacional := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'regime_tributacao', JValue) then
      Result.regime_tributacao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'regime_especial_tributacao', JValue) then
      Result.regime_especial_tributacao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'incentivo_fiscal', JValue) then
      Result.incentivo_fiscal := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'incentivador_cultural', JValue) then
      Result.incentivador_cultural := Self.BooleanFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsDadosPrestadorFromJson(Source: string): TRpsDadosPrestador;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsDadosPrestadorFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsToJsonValue(Source: TRps): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.rps) then
      Json.ObjAddProp(Result, 'rps', Self.TRpsDadosToJsonValue(Source.rps));
    if Source.competenciaHasValue then
      Json.ObjAddProp(Result, 'competencia', Self.TDateTimeToJsonValue(Source.competencia));
    if Source.natureza_tributacaoHasValue then
      Json.ObjAddProp(Result, 'natureza_tributacao', Self.IntegerToJsonValue(Source.natureza_tributacao));
    if Assigned(Source.prestador) then
      Json.ObjAddProp(Result, 'prestador', Self.TRpsDadosPrestadorToJsonValue(Source.prestador));
    if Assigned(Source.tomador) then
      Json.ObjAddProp(Result, 'tomador', Self.TRpsDadosTomadorToJsonValue(Source.tomador));
    if Assigned(Source.intermediario) then
      Json.ObjAddProp(Result, 'intermediario', Self.TRpsDadosIntermediarioToJsonValue(Source.intermediario));
    if Assigned(Source.construcao_civil) then
      Json.ObjAddProp(Result, 'construcao_civil', Self.TRpsDadosConstrucaoCivilToJsonValue(Source.construcao_civil));
    Json.ObjAddProp(Result, 'servicos', Self.TRpsDadosServicoListToJsonValue(Source.servicos));
    if Source.outras_informacoesHasValue then
      Json.ObjAddProp(Result, 'outras_informacoes', Self.stringToJsonValue(Source.outras_informacoes));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsToJson(Source: TRps): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsFromJsonValue(Source: TJSONValue): TRps;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRps.Create;
  try
    if Json.ObjContains(Source, 'rps', JValue) then
      Result.rps := Self.TRpsDadosFromJsonValue(JValue);
    if Json.ObjContains(Source, 'competencia', JValue) then
      Result.competencia := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'natureza_tributacao', JValue) then
      Result.natureza_tributacao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prestador', JValue) then
      Result.prestador := Self.TRpsDadosPrestadorFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tomador', JValue) then
      Result.tomador := Self.TRpsDadosTomadorFromJsonValue(JValue);
    if Json.ObjContains(Source, 'intermediario', JValue) then
      Result.intermediario := Self.TRpsDadosIntermediarioFromJsonValue(JValue);
    if Json.ObjContains(Source, 'construcao_civil', JValue) then
      Result.construcao_civil := Self.TRpsDadosConstrucaoCivilFromJsonValue(JValue);
    if Json.ObjContains(Source, 'servicos', JValue) then
      Result.servicos := Self.TRpsDadosServicoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'outras_informacoes', JValue) then
      Result.outras_informacoes := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsFromJson(Source: string): TRps;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseToJsonValue(Source: TNfse): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.created_atHasValue then
      Json.ObjAddProp(Result, 'created_at', Self.TDateTimeToJsonValue(Source.created_at));
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Source.numeroHasValue then
      Json.ObjAddProp(Result, 'numero', Self.stringToJsonValue(Source.numero));
    if Source.codigo_verificacaoHasValue then
      Json.ObjAddProp(Result, 'codigo_verificacao', Self.stringToJsonValue(Source.codigo_verificacao));
    if Source.link_urlHasValue then
      Json.ObjAddProp(Result, 'link_url', Self.stringToJsonValue(Source.link_url));
    if Source.data_emissaoHasValue then
      Json.ObjAddProp(Result, 'data_emissao', Self.TDateTimeToJsonValue(Source.data_emissao));
    if Source.ambienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.referenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.referencia));
    if Assigned(Source.DPS) then
      Json.ObjAddProp(Result, 'DPS', Self.TDPSToJsonValue(Source.DPS));
    if Assigned(Source.cancelamento) then
      Json.ObjAddProp(Result, 'cancelamento', Self.TNfseCancelamentoToJsonValue(Source.cancelamento));
    if Assigned(Source.mensagens) then
      Json.ObjAddProp(Result, 'mensagens', Self.TNfseMensagemRetornoListToJsonValue(Source.mensagens));
    if Assigned(Source.declaracao_prestacao_servico) then
      Json.ObjAddProp(Result, 'declaracao_prestacao_servico', Self.TRpsToJsonValue(Source.declaracao_prestacao_servico));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseToJson(Source: TNfse): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfseToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseFromJsonValue(Source: TJSONValue): TNfse;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfse.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'created_at', JValue) then
      Result.created_at := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.numero := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_verificacao', JValue) then
      Result.codigo_verificacao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'link_url', JValue) then
      Result.link_url := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_emissao', JValue) then
      Result.data_emissao := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'DPS', JValue) then
      Result.DPS := Self.TDPSFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cancelamento', JValue) then
      Result.cancelamento := Self.TNfseCancelamentoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagens', JValue) then
      Result.mensagens := Self.TNfseMensagemRetornoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'declaracao_prestacao_servico', JValue) then
      Result.declaracao_prestacao_servico := Self.TRpsFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseFromJson(Source: string): TNfse;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfseFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseListToJsonValue(Source: TNfseList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfseToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseListToJson(Source: TNfseList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfseListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseListFromJsonValue(Source: TJSONValue): TNfseList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfseList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfseFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseListFromJson(Source: string): TNfseList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfseListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsLoteToJsonValue(Source: TRpsLote): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.created_atHasValue then
      Json.ObjAddProp(Result, 'created_at', Self.TDateTimeToJsonValue(Source.created_at));
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Source.numeroHasValue then
      Json.ObjAddProp(Result, 'numero', Self.stringToJsonValue(Source.numero));
    if Source.ambienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.referenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.referencia));
    if Assigned(Source.notas) then
      Json.ObjAddProp(Result, 'notas', Self.TNfseListToJsonValue(Source.notas));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsLoteToJson(Source: TRpsLote): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsLoteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsLoteFromJsonValue(Source: TJSONValue): TRpsLote;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsLote.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'created_at', JValue) then
      Result.created_at := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.numero := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'notas', JValue) then
      Result.notas := Self.TNfseListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsLoteFromJson(Source: string): TRpsLote;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsLoteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TSubstituicaoToJsonValue(Source: TSubstituicao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'chSubstda', Self.stringToJsonValue(Source.chSubstda));
    Json.ObjAddProp(Result, 'cMotivo', Self.stringToJsonValue(Source.cMotivo));
    if Source.xMotivoHasValue then
      Json.ObjAddProp(Result, 'xMotivo', Self.stringToJsonValue(Source.xMotivo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TSubstituicaoToJson(Source: TSubstituicao): string;
var
  JValue: TJSONValue;
begin
  JValue := TSubstituicaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TSubstituicaoFromJsonValue(Source: TJSONValue): TSubstituicao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TSubstituicao.Create;
  try
    if Json.ObjContains(Source, 'chSubstda', JValue) then
      Result.chSubstda := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMotivo', JValue) then
      Result.cMotivo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMotivo', JValue) then
      Result.xMotivo := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TSubstituicaoFromJson(Source: string): TSubstituicao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TSubstituicaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRegTribToJsonValue(Source: TRegTrib): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.regEspTribHasValue then
      Json.ObjAddProp(Result, 'regEspTrib', Self.IntegerToJsonValue(Source.regEspTrib));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRegTribToJson(Source: TRegTrib): string;
var
  JValue: TJSONValue;
begin
  JValue := TRegTribToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRegTribFromJsonValue(Source: TJSONValue): TRegTrib;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRegTrib.Create;
  try
    if Json.ObjContains(Source, 'regEspTrib', JValue) then
      Result.regEspTrib := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRegTribFromJson(Source: string): TRegTrib;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRegTribFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfoPrestadorToJsonValue(Source: TInfoPrestador): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Assigned(Source.regTrib) then
      Json.ObjAddProp(Result, 'regTrib', Self.TRegTribToJsonValue(Source.regTrib));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfoPrestadorToJson(Source: TInfoPrestador): string;
var
  JValue: TJSONValue;
begin
  JValue := TInfoPrestadorToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfoPrestadorFromJsonValue(Source: TJSONValue): TInfoPrestador;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TInfoPrestador.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'regTrib', JValue) then
      Result.regTrib := Self.TRegTribFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfoPrestadorFromJson(Source: string): TInfoPrestador;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TInfoPrestadorFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEnderNacToJsonValue(Source: TEnderNac): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.cMunHasValue then
      Json.ObjAddProp(Result, 'cMun', Self.stringToJsonValue(Source.cMun));
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.stringToJsonValue(Source.CEP));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEnderNacToJson(Source: TEnderNac): string;
var
  JValue: TJSONValue;
begin
  JValue := TEnderNacToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEnderNacFromJsonValue(Source: TJSONValue): TEnderNac;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEnderNac.Create;
  try
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.cMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEnderNacFromJson(Source: string): TEnderNac;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEnderNacFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEnderExtToJsonValue(Source: TEnderExt): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cPais', Self.stringToJsonValue(Source.cPais));
    Json.ObjAddProp(Result, 'cEndPost', Self.stringToJsonValue(Source.cEndPost));
    Json.ObjAddProp(Result, 'xCidade', Self.stringToJsonValue(Source.xCidade));
    Json.ObjAddProp(Result, 'xEstProvReg', Self.stringToJsonValue(Source.xEstProvReg));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEnderExtToJson(Source: TEnderExt): string;
var
  JValue: TJSONValue;
begin
  JValue := TEnderExtToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEnderExtFromJsonValue(Source: TJSONValue): TEnderExt;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEnderExt.Create;
  try
    if Json.ObjContains(Source, 'cPais', JValue) then
      Result.cPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cEndPost', JValue) then
      Result.cEndPost := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCidade', JValue) then
      Result.xCidade := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xEstProvReg', JValue) then
      Result.xEstProvReg := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEnderExtFromJson(Source: string): TEnderExt;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEnderExtFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEnderecoToJsonValue(Source: TEndereco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.endNac) then
      Json.ObjAddProp(Result, 'endNac', Self.TEnderNacToJsonValue(Source.endNac));
    if Assigned(Source.endExt) then
      Json.ObjAddProp(Result, 'endExt', Self.TEnderExtToJsonValue(Source.endExt));
    if Source.xLgrHasValue then
      Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.xLgr));
    if Source.tpLgrHasValue then
      Json.ObjAddProp(Result, 'tpLgr', Self.stringToJsonValue(Source.tpLgr));
    if Source.nroHasValue then
      Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.nro));
    if Source.xCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.xCpl));
    if Source.xBairroHasValue then
      Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.xBairro));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEnderecoToJson(Source: TEndereco): string;
var
  JValue: TJSONValue;
begin
  JValue := TEnderecoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEnderecoFromJsonValue(Source: TJSONValue): TEndereco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEndereco.Create;
  try
    if Json.ObjContains(Source, 'endNac', JValue) then
      Result.endNac := Self.TEnderNacFromJsonValue(JValue);
    if Json.ObjContains(Source, 'endExt', JValue) then
      Result.endExt := Self.TEnderExtFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.xLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpLgr', JValue) then
      Result.tpLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.xCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.xBairro := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEnderecoFromJson(Source: string): TEndereco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEnderecoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfoTomadorToJsonValue(Source: TInfoTomador): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.orgaoPublicoHasValue then
      Json.ObjAddProp(Result, 'orgaoPublico', Self.BooleanToJsonValue(Source.orgaoPublico));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.NIFHasValue then
      Json.ObjAddProp(Result, 'NIF', Self.stringToJsonValue(Source.NIF));
    if Source.cNaoNIFHasValue then
      Json.ObjAddProp(Result, 'cNaoNIF', Self.IntegerToJsonValue(Source.cNaoNIF));
    if Source.CAEPFHasValue then
      Json.ObjAddProp(Result, 'CAEPF', Self.stringToJsonValue(Source.CAEPF));
    if Source.IMHasValue then
      Json.ObjAddProp(Result, 'IM', Self.stringToJsonValue(Source.IM));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Assigned(Source.&end) then
      Json.ObjAddProp(Result, 'end', Self.TEnderecoToJsonValue(Source.&end));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    if Source.emailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfoTomadorToJson(Source: TInfoTomador): string;
var
  JValue: TJSONValue;
begin
  JValue := TInfoTomadorToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfoTomadorFromJsonValue(Source: TJSONValue): TInfoTomador;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TInfoTomador.Create;
  try
    if Json.ObjContains(Source, 'orgaoPublico', JValue) then
      Result.orgaoPublico := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'NIF', JValue) then
      Result.NIF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cNaoNIF', JValue) then
      Result.cNaoNIF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CAEPF', JValue) then
      Result.CAEPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IM', JValue) then
      Result.IM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'end', JValue) then
      Result.&end := Self.TEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfoTomadorFromJson(Source: string): TInfoTomador;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TInfoTomadorFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfoIntermediarioToJsonValue(Source: TInfoIntermediario): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.NIFHasValue then
      Json.ObjAddProp(Result, 'NIF', Self.stringToJsonValue(Source.NIF));
    if Source.cNaoNIFHasValue then
      Json.ObjAddProp(Result, 'cNaoNIF', Self.IntegerToJsonValue(Source.cNaoNIF));
    if Source.CAEPFHasValue then
      Json.ObjAddProp(Result, 'CAEPF', Self.stringToJsonValue(Source.CAEPF));
    if Source.IMHasValue then
      Json.ObjAddProp(Result, 'IM', Self.stringToJsonValue(Source.IM));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Assigned(Source.&end) then
      Json.ObjAddProp(Result, 'end', Self.TEnderecoToJsonValue(Source.&end));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    if Source.emailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfoIntermediarioToJson(Source: TInfoIntermediario): string;
var
  JValue: TJSONValue;
begin
  JValue := TInfoIntermediarioToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfoIntermediarioFromJsonValue(Source: TJSONValue): TInfoIntermediario;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TInfoIntermediario.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'NIF', JValue) then
      Result.NIF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cNaoNIF', JValue) then
      Result.cNaoNIF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CAEPF', JValue) then
      Result.CAEPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IM', JValue) then
      Result.IM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'end', JValue) then
      Result.&end := Self.TEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfoIntermediarioFromJson(Source: string): TInfoIntermediario;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TInfoIntermediarioFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TLocPrestToJsonValue(Source: TLocPrest): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.cLocPrestacaoHasValue then
      Json.ObjAddProp(Result, 'cLocPrestacao', Self.stringToJsonValue(Source.cLocPrestacao));
    if Source.cPaisPrestacaoHasValue then
      Json.ObjAddProp(Result, 'cPaisPrestacao', Self.stringToJsonValue(Source.cPaisPrestacao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TLocPrestToJson(Source: TLocPrest): string;
var
  JValue: TJSONValue;
begin
  JValue := TLocPrestToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TLocPrestFromJsonValue(Source: TJSONValue): TLocPrest;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TLocPrest.Create;
  try
    if Json.ObjContains(Source, 'cLocPrestacao', JValue) then
      Result.cLocPrestacao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPaisPrestacao', JValue) then
      Result.cPaisPrestacao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TLocPrestFromJson(Source: string): TLocPrest;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TLocPrestFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCServToJsonValue(Source: TCServ): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cTribNac', Self.stringToJsonValue(Source.cTribNac));
    if Source.cTribMunHasValue then
      Json.ObjAddProp(Result, 'cTribMun', Self.stringToJsonValue(Source.cTribMun));
    if Source.CNAEHasValue then
      Json.ObjAddProp(Result, 'CNAE', Self.stringToJsonValue(Source.CNAE));
    Json.ObjAddProp(Result, 'xDescServ', Self.stringToJsonValue(Source.xDescServ));
    if Source.cNBSHasValue then
      Json.ObjAddProp(Result, 'cNBS', Self.stringToJsonValue(Source.cNBS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCServToJson(Source: TCServ): string;
var
  JValue: TJSONValue;
begin
  JValue := TCServToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCServFromJsonValue(Source: TJSONValue): TCServ;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCServ.Create;
  try
    if Json.ObjContains(Source, 'cTribNac', JValue) then
      Result.cTribNac := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cTribMun', JValue) then
      Result.cTribMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNAE', JValue) then
      Result.CNAE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xDescServ', JValue) then
      Result.xDescServ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cNBS', JValue) then
      Result.cNBS := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCServFromJson(Source: string): TCServ;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCServFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TComExteriorToJsonValue(Source: TComExterior): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'mdPrestacao', Self.IntegerToJsonValue(Source.mdPrestacao));
    Json.ObjAddProp(Result, 'vincPrest', Self.IntegerToJsonValue(Source.vincPrest));
    Json.ObjAddProp(Result, 'tpMoeda', Self.stringToJsonValue(Source.tpMoeda));
    Json.ObjAddProp(Result, 'vServMoeda', Self.DoubleToJsonValue(Source.vServMoeda));
    Json.ObjAddProp(Result, 'mecAFComexP', Self.stringToJsonValue(Source.mecAFComexP));
    Json.ObjAddProp(Result, 'mecAFComexT', Self.stringToJsonValue(Source.mecAFComexT));
    Json.ObjAddProp(Result, 'movTempBens', Self.IntegerToJsonValue(Source.movTempBens));
    if Source.nDIHasValue then
      Json.ObjAddProp(Result, 'nDI', Self.stringToJsonValue(Source.nDI));
    if Source.nREHasValue then
      Json.ObjAddProp(Result, 'nRE', Self.stringToJsonValue(Source.nRE));
    Json.ObjAddProp(Result, 'mdic', Self.IntegerToJsonValue(Source.mdic));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TComExteriorToJson(Source: TComExterior): string;
var
  JValue: TJSONValue;
begin
  JValue := TComExteriorToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TComExteriorFromJsonValue(Source: TJSONValue): TComExterior;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TComExterior.Create;
  try
    if Json.ObjContains(Source, 'mdPrestacao', JValue) then
      Result.mdPrestacao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vincPrest', JValue) then
      Result.vincPrest := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpMoeda', JValue) then
      Result.tpMoeda := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vServMoeda', JValue) then
      Result.vServMoeda := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mecAFComexP', JValue) then
      Result.mecAFComexP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mecAFComexT', JValue) then
      Result.mecAFComexT := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'movTempBens', JValue) then
      Result.movTempBens := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nDI', JValue) then
      Result.nDI := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nRE', JValue) then
      Result.nRE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mdic', JValue) then
      Result.mdic := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TComExteriorFromJson(Source: string): TComExterior;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TComExteriorFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TLocacaoSublocacaoToJsonValue(Source: TLocacaoSublocacao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'categ', Self.IntegerToJsonValue(Source.categ));
    Json.ObjAddProp(Result, 'objeto', Self.IntegerToJsonValue(Source.objeto));
    Json.ObjAddProp(Result, 'extensao', Self.stringToJsonValue(Source.extensao));
    Json.ObjAddProp(Result, 'nPostes', Self.stringToJsonValue(Source.nPostes));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TLocacaoSublocacaoToJson(Source: TLocacaoSublocacao): string;
var
  JValue: TJSONValue;
begin
  JValue := TLocacaoSublocacaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TLocacaoSublocacaoFromJsonValue(Source: TJSONValue): TLocacaoSublocacao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TLocacaoSublocacao.Create;
  try
    if Json.ObjContains(Source, 'categ', JValue) then
      Result.categ := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'objeto', JValue) then
      Result.objeto := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'extensao', JValue) then
      Result.extensao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nPostes', JValue) then
      Result.nPostes := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TLocacaoSublocacaoFromJson(Source: string): TLocacaoSublocacao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TLocacaoSublocacaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEnderExtSimplesToJsonValue(Source: TEnderExtSimples): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cEndPost', Self.stringToJsonValue(Source.cEndPost));
    Json.ObjAddProp(Result, 'xCidade', Self.stringToJsonValue(Source.xCidade));
    Json.ObjAddProp(Result, 'xEstProvReg', Self.stringToJsonValue(Source.xEstProvReg));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEnderExtSimplesToJson(Source: TEnderExtSimples): string;
var
  JValue: TJSONValue;
begin
  JValue := TEnderExtSimplesToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEnderExtSimplesFromJsonValue(Source: TJSONValue): TEnderExtSimples;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEnderExtSimples.Create;
  try
    if Json.ObjContains(Source, 'cEndPost', JValue) then
      Result.cEndPost := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCidade', JValue) then
      Result.xCidade := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xEstProvReg', JValue) then
      Result.xEstProvReg := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEnderExtSimplesFromJson(Source: string): TEnderExtSimples;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEnderExtSimplesFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEnderecoSimplesToJsonValue(Source: TEnderecoSimples): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.stringToJsonValue(Source.CEP));
    if Assigned(Source.endExt) then
      Json.ObjAddProp(Result, 'endExt', Self.TEnderExtSimplesToJsonValue(Source.endExt));
    Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.xLgr));
    if Source.tpLgrHasValue then
      Json.ObjAddProp(Result, 'tpLgr', Self.stringToJsonValue(Source.tpLgr));
    Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.nro));
    if Source.xCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.xCpl));
    Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.xBairro));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEnderecoSimplesToJson(Source: TEnderecoSimples): string;
var
  JValue: TJSONValue;
begin
  JValue := TEnderecoSimplesToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEnderecoSimplesFromJsonValue(Source: TJSONValue): TEnderecoSimples;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEnderecoSimples.Create;
  try
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'endExt', JValue) then
      Result.endExt := Self.TEnderExtSimplesFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.xLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpLgr', JValue) then
      Result.tpLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.xCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.xBairro := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEnderecoSimplesFromJson(Source: string): TEnderecoSimples;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEnderecoSimplesFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfoObraToJsonValue(Source: TInfoObra): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.cObraHasValue then
      Json.ObjAddProp(Result, 'cObra', Self.stringToJsonValue(Source.cObra));
    if Source.inscImobFiscHasValue then
      Json.ObjAddProp(Result, 'inscImobFisc', Self.stringToJsonValue(Source.inscImobFisc));
    if Assigned(Source.&end) then
      Json.ObjAddProp(Result, 'end', Self.TEnderecoSimplesToJsonValue(Source.&end));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfoObraToJson(Source: TInfoObra): string;
var
  JValue: TJSONValue;
begin
  JValue := TInfoObraToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfoObraFromJsonValue(Source: TJSONValue): TInfoObra;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TInfoObra.Create;
  try
    if Json.ObjContains(Source, 'cObra', JValue) then
      Result.cObra := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'inscImobFisc', JValue) then
      Result.inscImobFisc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'end', JValue) then
      Result.&end := Self.TEnderecoSimplesFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfoObraFromJson(Source: string): TInfoObra;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TInfoObraFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TAtvEventoToJsonValue(Source: TAtvEvento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Source.descHasValue then
      Json.ObjAddProp(Result, 'desc', Self.stringToJsonValue(Source.desc));
    Json.ObjAddProp(Result, 'dtIni', Self.TDateToJsonValue(Source.dtIni));
    Json.ObjAddProp(Result, 'dtFim', Self.TDateToJsonValue(Source.dtFim));
    if Source.idAtvEvtHasValue then
      Json.ObjAddProp(Result, 'idAtvEvt', Self.stringToJsonValue(Source.idAtvEvt));
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Assigned(Source.&end) then
      Json.ObjAddProp(Result, 'end', Self.TEnderecoSimplesToJsonValue(Source.&end));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TAtvEventoToJson(Source: TAtvEvento): string;
var
  JValue: TJSONValue;
begin
  JValue := TAtvEventoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TAtvEventoFromJsonValue(Source: TJSONValue): TAtvEvento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TAtvEvento.Create;
  try
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'desc', JValue) then
      Result.desc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dtIni', JValue) then
      Result.dtIni := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dtFim', JValue) then
      Result.dtFim := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idAtvEvt', JValue) then
      Result.idAtvEvt := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'end', JValue) then
      Result.&end := Self.TEnderecoSimplesFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TAtvEventoFromJson(Source: string): TAtvEvento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TAtvEventoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TExploracaoRodoviariaToJsonValue(Source: TExploracaoRodoviaria): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'categVeic', Self.stringToJsonValue(Source.categVeic));
    Json.ObjAddProp(Result, 'nEixos', Self.stringToJsonValue(Source.nEixos));
    Json.ObjAddProp(Result, 'rodagem', Self.IntegerToJsonValue(Source.rodagem));
    Json.ObjAddProp(Result, 'sentido', Self.stringToJsonValue(Source.sentido));
    Json.ObjAddProp(Result, 'placa', Self.stringToJsonValue(Source.placa));
    Json.ObjAddProp(Result, 'codAcessoPed', Self.stringToJsonValue(Source.codAcessoPed));
    Json.ObjAddProp(Result, 'codContrato', Self.stringToJsonValue(Source.codContrato));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TExploracaoRodoviariaToJson(Source: TExploracaoRodoviaria): string;
var
  JValue: TJSONValue;
begin
  JValue := TExploracaoRodoviariaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TExploracaoRodoviariaFromJsonValue(Source: TJSONValue): TExploracaoRodoviaria;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TExploracaoRodoviaria.Create;
  try
    if Json.ObjContains(Source, 'categVeic', JValue) then
      Result.categVeic := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nEixos', JValue) then
      Result.nEixos := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'rodagem', JValue) then
      Result.rodagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'sentido', JValue) then
      Result.sentido := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'placa', JValue) then
      Result.placa := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codAcessoPed', JValue) then
      Result.codAcessoPed := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codContrato', JValue) then
      Result.codContrato := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TExploracaoRodoviariaFromJson(Source: string): TExploracaoRodoviaria;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TExploracaoRodoviariaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfoComplToJsonValue(Source: TInfoCompl): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.idDocTecHasValue then
      Json.ObjAddProp(Result, 'idDocTec', Self.stringToJsonValue(Source.idDocTec));
    if Source.docRefHasValue then
      Json.ObjAddProp(Result, 'docRef', Self.stringToJsonValue(Source.docRef));
    if Source.xInfCompHasValue then
      Json.ObjAddProp(Result, 'xInfComp', Self.stringToJsonValue(Source.xInfComp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfoComplToJson(Source: TInfoCompl): string;
var
  JValue: TJSONValue;
begin
  JValue := TInfoComplToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfoComplFromJsonValue(Source: TJSONValue): TInfoCompl;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TInfoCompl.Create;
  try
    if Json.ObjContains(Source, 'idDocTec', JValue) then
      Result.idDocTec := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'docRef', JValue) then
      Result.docRef := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xInfComp', JValue) then
      Result.xInfComp := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfoComplFromJson(Source: string): TInfoCompl;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TInfoComplFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TServToJsonValue(Source: TServ): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.locPrest) then
      Json.ObjAddProp(Result, 'locPrest', Self.TLocPrestToJsonValue(Source.locPrest));
    Json.ObjAddProp(Result, 'cServ', Self.TCServToJsonValue(Source.cServ));
    if Assigned(Source.comExt) then
      Json.ObjAddProp(Result, 'comExt', Self.TComExteriorToJsonValue(Source.comExt));
    if Assigned(Source.lsadppu) then
      Json.ObjAddProp(Result, 'lsadppu', Self.TLocacaoSublocacaoToJsonValue(Source.lsadppu));
    if Assigned(Source.obra) then
      Json.ObjAddProp(Result, 'obra', Self.TInfoObraToJsonValue(Source.obra));
    if Assigned(Source.atvEvento) then
      Json.ObjAddProp(Result, 'atvEvento', Self.TAtvEventoToJsonValue(Source.atvEvento));
    if Assigned(Source.explRod) then
      Json.ObjAddProp(Result, 'explRod', Self.TExploracaoRodoviariaToJsonValue(Source.explRod));
    if Assigned(Source.infoCompl) then
      Json.ObjAddProp(Result, 'infoCompl', Self.TInfoComplToJsonValue(Source.infoCompl));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TServToJson(Source: TServ): string;
var
  JValue: TJSONValue;
begin
  JValue := TServToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TServFromJsonValue(Source: TJSONValue): TServ;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TServ.Create;
  try
    if Json.ObjContains(Source, 'locPrest', JValue) then
      Result.locPrest := Self.TLocPrestFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cServ', JValue) then
      Result.cServ := Self.TCServFromJsonValue(JValue);
    if Json.ObjContains(Source, 'comExt', JValue) then
      Result.comExt := Self.TComExteriorFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lsadppu', JValue) then
      Result.lsadppu := Self.TLocacaoSublocacaoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'obra', JValue) then
      Result.obra := Self.TInfoObraFromJsonValue(JValue);
    if Json.ObjContains(Source, 'atvEvento', JValue) then
      Result.atvEvento := Self.TAtvEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'explRod', JValue) then
      Result.explRod := Self.TExploracaoRodoviariaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infoCompl', JValue) then
      Result.infoCompl := Self.TInfoComplFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TServFromJson(Source: string): TServ;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TServFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TVServPrestToJsonValue(Source: TVServPrest): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.vRecebHasValue then
      Json.ObjAddProp(Result, 'vReceb', Self.DoubleToJsonValue(Source.vReceb));
    Json.ObjAddProp(Result, 'vServ', Self.DoubleToJsonValue(Source.vServ));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TVServPrestToJson(Source: TVServPrest): string;
var
  JValue: TJSONValue;
begin
  JValue := TVServPrestToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TVServPrestFromJsonValue(Source: TJSONValue): TVServPrest;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TVServPrest.Create;
  try
    if Json.ObjContains(Source, 'vReceb', JValue) then
      Result.vReceb := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vServ', JValue) then
      Result.vServ := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TVServPrestFromJson(Source: string): TVServPrest;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TVServPrestFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TVDescCondIncondToJsonValue(Source: TVDescCondIncond): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.vDescIncondHasValue then
      Json.ObjAddProp(Result, 'vDescIncond', Self.DoubleToJsonValue(Source.vDescIncond));
    if Source.vDescCondHasValue then
      Json.ObjAddProp(Result, 'vDescCond', Self.DoubleToJsonValue(Source.vDescCond));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TVDescCondIncondToJson(Source: TVDescCondIncond): string;
var
  JValue: TJSONValue;
begin
  JValue := TVDescCondIncondToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TVDescCondIncondFromJsonValue(Source: TJSONValue): TVDescCondIncond;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TVDescCondIncond.Create;
  try
    if Json.ObjContains(Source, 'vDescIncond', JValue) then
      Result.vDescIncond := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDescCond', JValue) then
      Result.vDescCond := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TVDescCondIncondFromJson(Source: string): TVDescCondIncond;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TVDescCondIncondFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDocOutNFSeToJsonValue(Source: TDocOutNFSe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cMunNFSeMun', Self.stringToJsonValue(Source.cMunNFSeMun));
    Json.ObjAddProp(Result, 'nNFSeMun', Self.Int64ToJsonValue(Source.nNFSeMun));
    Json.ObjAddProp(Result, 'cVerifNFSeMun', Self.stringToJsonValue(Source.cVerifNFSeMun));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDocOutNFSeToJson(Source: TDocOutNFSe): string;
var
  JValue: TJSONValue;
begin
  JValue := TDocOutNFSeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDocOutNFSeFromJsonValue(Source: TJSONValue): TDocOutNFSe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDocOutNFSe.Create;
  try
    if Json.ObjContains(Source, 'cMunNFSeMun', JValue) then
      Result.cMunNFSeMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nNFSeMun', JValue) then
      Result.nNFSeMun := Self.Int64FromJsonValue(JValue);
    if Json.ObjContains(Source, 'cVerifNFSeMun', JValue) then
      Result.cVerifNFSeMun := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDocOutNFSeFromJson(Source: string): TDocOutNFSe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDocOutNFSeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDocNFNFSToJsonValue(Source: TDocNFNFS): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nNFS', Self.IntegerToJsonValue(Source.nNFS));
    Json.ObjAddProp(Result, 'modNFS', Self.Int64ToJsonValue(Source.modNFS));
    Json.ObjAddProp(Result, 'serieNFS', Self.stringToJsonValue(Source.serieNFS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDocNFNFSToJson(Source: TDocNFNFS): string;
var
  JValue: TJSONValue;
begin
  JValue := TDocNFNFSToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDocNFNFSFromJsonValue(Source: TJSONValue): TDocNFNFS;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDocNFNFS.Create;
  try
    if Json.ObjContains(Source, 'nNFS', JValue) then
      Result.nNFS := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modNFS', JValue) then
      Result.modNFS := Self.Int64FromJsonValue(JValue);
    if Json.ObjContains(Source, 'serieNFS', JValue) then
      Result.serieNFS := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDocNFNFSFromJson(Source: string): TDocNFNFS;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDocNFNFSFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfoFornecDocDedRedToJsonValue(Source: TInfoFornecDocDedRed): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.NIFHasValue then
      Json.ObjAddProp(Result, 'NIF', Self.stringToJsonValue(Source.NIF));
    if Source.cNaoNIFHasValue then
      Json.ObjAddProp(Result, 'cNaoNIF', Self.IntegerToJsonValue(Source.cNaoNIF));
    if Source.CAEPFHasValue then
      Json.ObjAddProp(Result, 'CAEPF', Self.stringToJsonValue(Source.CAEPF));
    if Source.IMHasValue then
      Json.ObjAddProp(Result, 'IM', Self.stringToJsonValue(Source.IM));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Assigned(Source.&end) then
      Json.ObjAddProp(Result, 'end', Self.TEnderecoToJsonValue(Source.&end));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    if Source.emailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfoFornecDocDedRedToJson(Source: TInfoFornecDocDedRed): string;
var
  JValue: TJSONValue;
begin
  JValue := TInfoFornecDocDedRedToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfoFornecDocDedRedFromJsonValue(Source: TJSONValue): TInfoFornecDocDedRed;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TInfoFornecDocDedRed.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'NIF', JValue) then
      Result.NIF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cNaoNIF', JValue) then
      Result.cNaoNIF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CAEPF', JValue) then
      Result.CAEPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IM', JValue) then
      Result.IM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'end', JValue) then
      Result.&end := Self.TEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfoFornecDocDedRedFromJson(Source: string): TInfoFornecDocDedRed;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TInfoFornecDocDedRedFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDocDedRedToJsonValue(Source: TDocDedRed): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.chNFSeHasValue then
      Json.ObjAddProp(Result, 'chNFSe', Self.stringToJsonValue(Source.chNFSe));
    if Source.chNFeHasValue then
      Json.ObjAddProp(Result, 'chNFe', Self.stringToJsonValue(Source.chNFe));
    if Assigned(Source.NFSeMun) then
      Json.ObjAddProp(Result, 'NFSeMun', Self.TDocOutNFSeToJsonValue(Source.NFSeMun));
    if Assigned(Source.NFNFS) then
      Json.ObjAddProp(Result, 'NFNFS', Self.TDocNFNFSToJsonValue(Source.NFNFS));
    if Source.nDocFiscHasValue then
      Json.ObjAddProp(Result, 'nDocFisc', Self.stringToJsonValue(Source.nDocFisc));
    if Source.nDocHasValue then
      Json.ObjAddProp(Result, 'nDoc', Self.stringToJsonValue(Source.nDoc));
    Json.ObjAddProp(Result, 'tpDedRed', Self.IntegerToJsonValue(Source.tpDedRed));
    if Source.xDescOutDedHasValue then
      Json.ObjAddProp(Result, 'xDescOutDed', Self.stringToJsonValue(Source.xDescOutDed));
    Json.ObjAddProp(Result, 'dtEmiDoc', Self.TDateToJsonValue(Source.dtEmiDoc));
    Json.ObjAddProp(Result, 'vDedutivelRedutivel', Self.DoubleToJsonValue(Source.vDedutivelRedutivel));
    Json.ObjAddProp(Result, 'vDeducaoReducao', Self.DoubleToJsonValue(Source.vDeducaoReducao));
    if Assigned(Source.fornec) then
      Json.ObjAddProp(Result, 'fornec', Self.TInfoFornecDocDedRedToJsonValue(Source.fornec));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDocDedRedToJson(Source: TDocDedRed): string;
var
  JValue: TJSONValue;
begin
  JValue := TDocDedRedToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDocDedRedFromJsonValue(Source: TJSONValue): TDocDedRed;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDocDedRed.Create;
  try
    if Json.ObjContains(Source, 'chNFSe', JValue) then
      Result.chNFSe := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chNFe', JValue) then
      Result.chNFe := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'NFSeMun', JValue) then
      Result.NFSeMun := Self.TDocOutNFSeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'NFNFS', JValue) then
      Result.NFNFS := Self.TDocNFNFSFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nDocFisc', JValue) then
      Result.nDocFisc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nDoc', JValue) then
      Result.nDoc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpDedRed', JValue) then
      Result.tpDedRed := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xDescOutDed', JValue) then
      Result.xDescOutDed := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dtEmiDoc', JValue) then
      Result.dtEmiDoc := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDedutivelRedutivel', JValue) then
      Result.vDedutivelRedutivel := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDeducaoReducao', JValue) then
      Result.vDeducaoReducao := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fornec', JValue) then
      Result.fornec := Self.TInfoFornecDocDedRedFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDocDedRedFromJson(Source: string): TDocDedRed;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDocDedRedFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDocDedRedListToJsonValue(Source: TDocDedRedList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TDocDedRedToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDocDedRedListToJson(Source: TDocDedRedList): string;
var
  JValue: TJSONValue;
begin
  JValue := TDocDedRedListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDocDedRedListFromJsonValue(Source: TJSONValue): TDocDedRedList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDocDedRedList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TDocDedRedFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDocDedRedListFromJson(Source: string): TDocDedRedList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDocDedRedListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TListaDocDedRedToJsonValue(Source: TListaDocDedRed): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'docDedRed', Self.TDocDedRedListToJsonValue(Source.docDedRed));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TListaDocDedRedToJson(Source: TListaDocDedRed): string;
var
  JValue: TJSONValue;
begin
  JValue := TListaDocDedRedToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TListaDocDedRedFromJsonValue(Source: TJSONValue): TListaDocDedRed;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TListaDocDedRed.Create;
  try
    if Json.ObjContains(Source, 'docDedRed', JValue) then
      Result.docDedRed := Self.TDocDedRedListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TListaDocDedRedFromJson(Source: string): TListaDocDedRed;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TListaDocDedRedFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfoDedRedToJsonValue(Source: TInfoDedRed): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.pDRHasValue then
      Json.ObjAddProp(Result, 'pDR', Self.DoubleToJsonValue(Source.pDR));
    if Source.vDRHasValue then
      Json.ObjAddProp(Result, 'vDR', Self.DoubleToJsonValue(Source.vDR));
    if Assigned(Source.documentos) then
      Json.ObjAddProp(Result, 'documentos', Self.TListaDocDedRedToJsonValue(Source.documentos));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfoDedRedToJson(Source: TInfoDedRed): string;
var
  JValue: TJSONValue;
begin
  JValue := TInfoDedRedToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfoDedRedFromJsonValue(Source: TJSONValue): TInfoDedRed;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TInfoDedRed.Create;
  try
    if Json.ObjContains(Source, 'pDR', JValue) then
      Result.pDR := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDR', JValue) then
      Result.vDR := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'documentos', JValue) then
      Result.documentos := Self.TListaDocDedRedFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfoDedRedFromJson(Source: string): TInfoDedRed;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TInfoDedRedFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TBeneficioMunicipalToJsonValue(Source: TBeneficioMunicipal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpBM', Self.IntegerToJsonValue(Source.tpBM));
    Json.ObjAddProp(Result, 'nBM', Self.stringToJsonValue(Source.nBM));
    if Source.vRedBCBMHasValue then
      Json.ObjAddProp(Result, 'vRedBCBM', Self.DoubleToJsonValue(Source.vRedBCBM));
    if Source.pRedBCBMHasValue then
      Json.ObjAddProp(Result, 'pRedBCBM', Self.DoubleToJsonValue(Source.pRedBCBM));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TBeneficioMunicipalToJson(Source: TBeneficioMunicipal): string;
var
  JValue: TJSONValue;
begin
  JValue := TBeneficioMunicipalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TBeneficioMunicipalFromJsonValue(Source: TJSONValue): TBeneficioMunicipal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TBeneficioMunicipal.Create;
  try
    if Json.ObjContains(Source, 'tpBM', JValue) then
      Result.tpBM := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nBM', JValue) then
      Result.nBM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vRedBCBM', JValue) then
      Result.vRedBCBM := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCBM', JValue) then
      Result.pRedBCBM := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TBeneficioMunicipalFromJson(Source: string): TBeneficioMunicipal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TBeneficioMunicipalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TExigSuspensaToJsonValue(Source: TExigSuspensa): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpSusp', Self.IntegerToJsonValue(Source.tpSusp));
    Json.ObjAddProp(Result, 'nProcesso', Self.stringToJsonValue(Source.nProcesso));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TExigSuspensaToJson(Source: TExigSuspensa): string;
var
  JValue: TJSONValue;
begin
  JValue := TExigSuspensaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TExigSuspensaFromJsonValue(Source: TJSONValue): TExigSuspensa;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TExigSuspensa.Create;
  try
    if Json.ObjContains(Source, 'tpSusp', JValue) then
      Result.tpSusp := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nProcesso', JValue) then
      Result.nProcesso := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TExigSuspensaFromJson(Source: string): TExigSuspensa;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TExigSuspensaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TTribMunicipalToJsonValue(Source: TTribMunicipal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tribISSQN', Self.IntegerToJsonValue(Source.tribISSQN));
    if Source.cLocIncidHasValue then
      Json.ObjAddProp(Result, 'cLocIncid', Self.stringToJsonValue(Source.cLocIncid));
    if Source.cPaisResultHasValue then
      Json.ObjAddProp(Result, 'cPaisResult', Self.stringToJsonValue(Source.cPaisResult));
    if Assigned(Source.BM) then
      Json.ObjAddProp(Result, 'BM', Self.TBeneficioMunicipalToJsonValue(Source.BM));
    if Assigned(Source.exigSusp) then
      Json.ObjAddProp(Result, 'exigSusp', Self.TExigSuspensaToJsonValue(Source.exigSusp));
    if Source.tpImunidadeHasValue then
      Json.ObjAddProp(Result, 'tpImunidade', Self.IntegerToJsonValue(Source.tpImunidade));
    if Source.vBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    if Source.pAliqHasValue then
      Json.ObjAddProp(Result, 'pAliq', Self.DoubleToJsonValue(Source.pAliq));
    if Source.vISSQNHasValue then
      Json.ObjAddProp(Result, 'vISSQN', Self.DoubleToJsonValue(Source.vISSQN));
    if Source.tpRetISSQNHasValue then
      Json.ObjAddProp(Result, 'tpRetISSQN', Self.IntegerToJsonValue(Source.tpRetISSQN));
    if Source.vLiqHasValue then
      Json.ObjAddProp(Result, 'vLiq', Self.DoubleToJsonValue(Source.vLiq));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TTribMunicipalToJson(Source: TTribMunicipal): string;
var
  JValue: TJSONValue;
begin
  JValue := TTribMunicipalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TTribMunicipalFromJsonValue(Source: TJSONValue): TTribMunicipal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TTribMunicipal.Create;
  try
    if Json.ObjContains(Source, 'tribISSQN', JValue) then
      Result.tribISSQN := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cLocIncid', JValue) then
      Result.cLocIncid := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPaisResult', JValue) then
      Result.cPaisResult := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'BM', JValue) then
      Result.BM := Self.TBeneficioMunicipalFromJsonValue(JValue);
    if Json.ObjContains(Source, 'exigSusp', JValue) then
      Result.exigSusp := Self.TExigSuspensaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpImunidade', JValue) then
      Result.tpImunidade := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pAliq', JValue) then
      Result.pAliq := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vISSQN', JValue) then
      Result.vISSQN := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpRetISSQN', JValue) then
      Result.tpRetISSQN := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vLiq', JValue) then
      Result.vLiq := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TTribMunicipalFromJson(Source: string): TTribMunicipal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TTribMunicipalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TTribOutrosPisCofinsToJsonValue(Source: TTribOutrosPisCofins): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.vBCPisCofinsHasValue then
      Json.ObjAddProp(Result, 'vBCPisCofins', Self.DoubleToJsonValue(Source.vBCPisCofins));
    if Source.pAliqPisHasValue then
      Json.ObjAddProp(Result, 'pAliqPis', Self.DoubleToJsonValue(Source.pAliqPis));
    if Source.pAliqCofinsHasValue then
      Json.ObjAddProp(Result, 'pAliqCofins', Self.DoubleToJsonValue(Source.pAliqCofins));
    if Source.vPisHasValue then
      Json.ObjAddProp(Result, 'vPis', Self.DoubleToJsonValue(Source.vPis));
    if Source.vCofinsHasValue then
      Json.ObjAddProp(Result, 'vCofins', Self.DoubleToJsonValue(Source.vCofins));
    if Source.tpRetPisCofinsHasValue then
      Json.ObjAddProp(Result, 'tpRetPisCofins', Self.IntegerToJsonValue(Source.tpRetPisCofins));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TTribOutrosPisCofinsToJson(Source: TTribOutrosPisCofins): string;
var
  JValue: TJSONValue;
begin
  JValue := TTribOutrosPisCofinsToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TTribOutrosPisCofinsFromJsonValue(Source: TJSONValue): TTribOutrosPisCofins;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TTribOutrosPisCofins.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCPisCofins', JValue) then
      Result.vBCPisCofins := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pAliqPis', JValue) then
      Result.pAliqPis := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pAliqCofins', JValue) then
      Result.pAliqCofins := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPis', JValue) then
      Result.vPis := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCofins', JValue) then
      Result.vCofins := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpRetPisCofins', JValue) then
      Result.tpRetPisCofins := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TTribOutrosPisCofinsFromJson(Source: string): TTribOutrosPisCofins;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TTribOutrosPisCofinsFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TTribFederalToJsonValue(Source: TTribFederal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.piscofins) then
      Json.ObjAddProp(Result, 'piscofins', Self.TTribOutrosPisCofinsToJsonValue(Source.piscofins));
    if Source.vRetCPHasValue then
      Json.ObjAddProp(Result, 'vRetCP', Self.DoubleToJsonValue(Source.vRetCP));
    if Source.vRetIRRFHasValue then
      Json.ObjAddProp(Result, 'vRetIRRF', Self.DoubleToJsonValue(Source.vRetIRRF));
    if Source.vRetCSLLHasValue then
      Json.ObjAddProp(Result, 'vRetCSLL', Self.DoubleToJsonValue(Source.vRetCSLL));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TTribFederalToJson(Source: TTribFederal): string;
var
  JValue: TJSONValue;
begin
  JValue := TTribFederalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TTribFederalFromJsonValue(Source: TJSONValue): TTribFederal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TTribFederal.Create;
  try
    if Json.ObjContains(Source, 'piscofins', JValue) then
      Result.piscofins := Self.TTribOutrosPisCofinsFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vRetCP', JValue) then
      Result.vRetCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vRetIRRF', JValue) then
      Result.vRetIRRF := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vRetCSLL', JValue) then
      Result.vRetCSLL := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TTribFederalFromJson(Source: string): TTribFederal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TTribFederalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TTribTotalMonetToJsonValue(Source: TTribTotalMonet): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vTotTribFed', Self.DoubleToJsonValue(Source.vTotTribFed));
    Json.ObjAddProp(Result, 'vTotTribEst', Self.DoubleToJsonValue(Source.vTotTribEst));
    Json.ObjAddProp(Result, 'vTotTribMun', Self.DoubleToJsonValue(Source.vTotTribMun));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TTribTotalMonetToJson(Source: TTribTotalMonet): string;
var
  JValue: TJSONValue;
begin
  JValue := TTribTotalMonetToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TTribTotalMonetFromJsonValue(Source: TJSONValue): TTribTotalMonet;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TTribTotalMonet.Create;
  try
    if Json.ObjContains(Source, 'vTotTribFed', JValue) then
      Result.vTotTribFed := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vTotTribEst', JValue) then
      Result.vTotTribEst := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vTotTribMun', JValue) then
      Result.vTotTribMun := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TTribTotalMonetFromJson(Source: string): TTribTotalMonet;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TTribTotalMonetFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TTribTotalPercentToJsonValue(Source: TTribTotalPercent): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'pTotTribFed', Self.DoubleToJsonValue(Source.pTotTribFed));
    Json.ObjAddProp(Result, 'pTotTribEst', Self.DoubleToJsonValue(Source.pTotTribEst));
    Json.ObjAddProp(Result, 'pTotTribMun', Self.DoubleToJsonValue(Source.pTotTribMun));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TTribTotalPercentToJson(Source: TTribTotalPercent): string;
var
  JValue: TJSONValue;
begin
  JValue := TTribTotalPercentToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TTribTotalPercentFromJsonValue(Source: TJSONValue): TTribTotalPercent;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TTribTotalPercent.Create;
  try
    if Json.ObjContains(Source, 'pTotTribFed', JValue) then
      Result.pTotTribFed := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pTotTribEst', JValue) then
      Result.pTotTribEst := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pTotTribMun', JValue) then
      Result.pTotTribMun := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TTribTotalPercentFromJson(Source: string): TTribTotalPercent;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TTribTotalPercentFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TTribTotalToJsonValue(Source: TTribTotal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.vTotTrib) then
      Json.ObjAddProp(Result, 'vTotTrib', Self.TTribTotalMonetToJsonValue(Source.vTotTrib));
    if Assigned(Source.pTotTrib) then
      Json.ObjAddProp(Result, 'pTotTrib', Self.TTribTotalPercentToJsonValue(Source.pTotTrib));
    if Source.indTotTribHasValue then
      Json.ObjAddProp(Result, 'indTotTrib', Self.IntegerToJsonValue(Source.indTotTrib));
    if Source.pTotTribSNHasValue then
      Json.ObjAddProp(Result, 'pTotTribSN', Self.DoubleToJsonValue(Source.pTotTribSN));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TTribTotalToJson(Source: TTribTotal): string;
var
  JValue: TJSONValue;
begin
  JValue := TTribTotalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TTribTotalFromJsonValue(Source: TJSONValue): TTribTotal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TTribTotal.Create;
  try
    if Json.ObjContains(Source, 'vTotTrib', JValue) then
      Result.vTotTrib := Self.TTribTotalMonetFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pTotTrib', JValue) then
      Result.pTotTrib := Self.TTribTotalPercentFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indTotTrib', JValue) then
      Result.indTotTrib := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pTotTribSN', JValue) then
      Result.pTotTribSN := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TTribTotalFromJson(Source: string): TTribTotal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TTribTotalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfoTributacaoToJsonValue(Source: TInfoTributacao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tribMun', Self.TTribMunicipalToJsonValue(Source.tribMun));
    if Assigned(Source.tribFed) then
      Json.ObjAddProp(Result, 'tribFed', Self.TTribFederalToJsonValue(Source.tribFed));
    if Assigned(Source.totTrib) then
      Json.ObjAddProp(Result, 'totTrib', Self.TTribTotalToJsonValue(Source.totTrib));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfoTributacaoToJson(Source: TInfoTributacao): string;
var
  JValue: TJSONValue;
begin
  JValue := TInfoTributacaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfoTributacaoFromJsonValue(Source: TJSONValue): TInfoTributacao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TInfoTributacao.Create;
  try
    if Json.ObjContains(Source, 'tribMun', JValue) then
      Result.tribMun := Self.TTribMunicipalFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tribFed', JValue) then
      Result.tribFed := Self.TTribFederalFromJsonValue(JValue);
    if Json.ObjContains(Source, 'totTrib', JValue) then
      Result.totTrib := Self.TTribTotalFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfoTributacaoFromJson(Source: string): TInfoTributacao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TInfoTributacaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfoValoresToJsonValue(Source: TInfoValores): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vServPrest', Self.TVServPrestToJsonValue(Source.vServPrest));
    if Assigned(Source.vDescCondIncond) then
      Json.ObjAddProp(Result, 'vDescCondIncond', Self.TVDescCondIncondToJsonValue(Source.vDescCondIncond));
    if Assigned(Source.vDedRed) then
      Json.ObjAddProp(Result, 'vDedRed', Self.TInfoDedRedToJsonValue(Source.vDedRed));
    Json.ObjAddProp(Result, 'trib', Self.TInfoTributacaoToJsonValue(Source.trib));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfoValoresToJson(Source: TInfoValores): string;
var
  JValue: TJSONValue;
begin
  JValue := TInfoValoresToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfoValoresFromJsonValue(Source: TJSONValue): TInfoValores;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TInfoValores.Create;
  try
    if Json.ObjContains(Source, 'vServPrest', JValue) then
      Result.vServPrest := Self.TVServPrestFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDescCondIncond', JValue) then
      Result.vDescCondIncond := Self.TVDescCondIncondFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDedRed', JValue) then
      Result.vDedRed := Self.TInfoDedRedFromJsonValue(JValue);
    if Json.ObjContains(Source, 'trib', JValue) then
      Result.trib := Self.TInfoTributacaoFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfoValoresFromJson(Source: string): TInfoValores;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TInfoValoresFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfDPSToJsonValue(Source: TInfDPS): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.tpAmbHasValue then
      Json.ObjAddProp(Result, 'tpAmb', Self.IntegerToJsonValue(Source.tpAmb));
    Json.ObjAddProp(Result, 'dhEmi', Self.TDateTimeToJsonValue(Source.dhEmi));
    if Source.verAplicHasValue then
      Json.ObjAddProp(Result, 'verAplic', Self.stringToJsonValue(Source.verAplic));
    if Source.dCompetHasValue then
      Json.ObjAddProp(Result, 'dCompet', Self.TDateToJsonValue(Source.dCompet));
    if Assigned(Source.subst) then
      Json.ObjAddProp(Result, 'subst', Self.TSubstituicaoToJsonValue(Source.subst));
    Json.ObjAddProp(Result, 'prest', Self.TInfoPrestadorToJsonValue(Source.prest));
    if Assigned(Source.toma) then
      Json.ObjAddProp(Result, 'toma', Self.TInfoTomadorToJsonValue(Source.toma));
    if Assigned(Source.interm) then
      Json.ObjAddProp(Result, 'interm', Self.TInfoIntermediarioToJsonValue(Source.interm));
    Json.ObjAddProp(Result, 'serv', Self.TServToJsonValue(Source.serv));
    Json.ObjAddProp(Result, 'valores', Self.TInfoValoresToJsonValue(Source.valores));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfDPSToJson(Source: TInfDPS): string;
var
  JValue: TJSONValue;
begin
  JValue := TInfDPSToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TInfDPSFromJsonValue(Source: TJSONValue): TInfDPS;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TInfDPS.Create;
  try
    if Json.ObjContains(Source, 'tpAmb', JValue) then
      Result.tpAmb := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhEmi', JValue) then
      Result.dhEmi := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'verAplic', JValue) then
      Result.verAplic := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dCompet', JValue) then
      Result.dCompet := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'subst', JValue) then
      Result.subst := Self.TSubstituicaoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prest', JValue) then
      Result.prest := Self.TInfoPrestadorFromJsonValue(JValue);
    if Json.ObjContains(Source, 'toma', JValue) then
      Result.toma := Self.TInfoTomadorFromJsonValue(JValue);
    if Json.ObjContains(Source, 'interm', JValue) then
      Result.interm := Self.TInfoIntermediarioFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serv', JValue) then
      Result.serv := Self.TServFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valores', JValue) then
      Result.valores := Self.TInfoValoresFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TInfDPSFromJson(Source: string): TInfDPS;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TInfDPSFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseDpsPedidoEmissaoToJsonValue(Source: TNfseDpsPedidoEmissao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.provedorHasValue then
      Json.ObjAddProp(Result, 'provedor', Self.stringToJsonValue(Source.provedor));
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.referenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.referencia));
    Json.ObjAddProp(Result, 'infDPS', Self.TInfDPSToJsonValue(Source.infDPS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseDpsPedidoEmissaoToJson(Source: TNfseDpsPedidoEmissao): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfseDpsPedidoEmissaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseDpsPedidoEmissaoFromJsonValue(Source: TJSONValue): TNfseDpsPedidoEmissao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfseDpsPedidoEmissao.Create;
  try
    if Json.ObjContains(Source, 'provedor', JValue) then
      Result.provedor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infDPS', JValue) then
      Result.infDPS := Self.TInfDPSFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseDpsPedidoEmissaoFromJson(Source: string): TNfseDpsPedidoEmissao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfseDpsPedidoEmissaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseDpsPedidoEmissaoListToJsonValue(Source: TNfseDpsPedidoEmissaoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfseDpsPedidoEmissaoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseDpsPedidoEmissaoListToJson(Source: TNfseDpsPedidoEmissaoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfseDpsPedidoEmissaoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseDpsPedidoEmissaoListFromJsonValue(Source: TJSONValue): TNfseDpsPedidoEmissaoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfseDpsPedidoEmissaoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfseDpsPedidoEmissaoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseDpsPedidoEmissaoListFromJson(Source: string): TNfseDpsPedidoEmissaoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfseDpsPedidoEmissaoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseLoteDpsPedidoEmissaoToJsonValue(Source: TNfseLoteDpsPedidoEmissao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.provedorHasValue then
      Json.ObjAddProp(Result, 'provedor', Self.stringToJsonValue(Source.provedor));
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.referenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.referencia));
    if Assigned(Source.documentos) then
      Json.ObjAddProp(Result, 'documentos', Self.TNfseDpsPedidoEmissaoListToJsonValue(Source.documentos));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseLoteDpsPedidoEmissaoToJson(Source: TNfseLoteDpsPedidoEmissao): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfseLoteDpsPedidoEmissaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseLoteDpsPedidoEmissaoFromJsonValue(Source: TJSONValue): TNfseLoteDpsPedidoEmissao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfseLoteDpsPedidoEmissao.Create;
  try
    if Json.ObjContains(Source, 'provedor', JValue) then
      Result.provedor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'documentos', JValue) then
      Result.documentos := Self.TNfseDpsPedidoEmissaoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseLoteDpsPedidoEmissaoFromJson(Source: string): TNfseLoteDpsPedidoEmissao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfseLoteDpsPedidoEmissaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsLoteListToJsonValue(Source: TRpsLoteList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TRpsLoteToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsLoteListToJson(Source: TRpsLoteList): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsLoteListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsLoteListFromJsonValue(Source: TJSONValue): TRpsLoteList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsLoteList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TRpsLoteFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsLoteListFromJson(Source: string): TRpsLoteList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsLoteListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsLoteListagemToJsonValue(Source: TRpsLoteListagem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source._countHasValue then
      Json.ObjAddProp(Result, '@count', Self.IntegerToJsonValue(Source._count));
    if Assigned(Source.data) then
      Json.ObjAddProp(Result, 'data', Self.TRpsLoteListToJsonValue(Source.data));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsLoteListagemToJson(Source: TRpsLoteListagem): string;
var
  JValue: TJSONValue;
begin
  JValue := TRpsLoteListagemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TRpsLoteListagemFromJsonValue(Source: TJSONValue): TRpsLoteListagem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TRpsLoteListagem.Create;
  try
    if Json.ObjContains(Source, '@count', JValue) then
      Result._count := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data', JValue) then
      Result.data := Self.TRpsLoteListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TRpsLoteListagemFromJson(Source: string): TRpsLoteListagem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TRpsLoteListagemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfsePedidoEmissaoToJsonValue(Source: TNfsePedidoEmissao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    Json.ObjAddProp(Result, 'rps', Self.TRpsPedidoEmissaoToJsonValue(Source.rps));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfsePedidoEmissaoToJson(Source: TNfsePedidoEmissao): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfsePedidoEmissaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfsePedidoEmissaoFromJsonValue(Source: TJSONValue): TNfsePedidoEmissao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfsePedidoEmissao.Create;
  try
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'rps', JValue) then
      Result.rps := Self.TRpsPedidoEmissaoFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfsePedidoEmissaoFromJson(Source: string): TNfsePedidoEmissao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfsePedidoEmissaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseListagemToJsonValue(Source: TNfseListagem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source._countHasValue then
      Json.ObjAddProp(Result, '@count', Self.IntegerToJsonValue(Source._count));
    if Assigned(Source.data) then
      Json.ObjAddProp(Result, 'data', Self.TNfseListToJsonValue(Source.data));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseListagemToJson(Source: TNfseListagem): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfseListagemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseListagemFromJsonValue(Source: TJSONValue): TNfseListagem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfseListagem.Create;
  try
    if Json.ObjContains(Source, '@count', JValue) then
      Result._count := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data', JValue) then
      Result.data := Self.TNfseListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseListagemFromJson(Source: string): TNfseListagem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfseListagemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfsePedidoCancelamentoToJsonValue(Source: TNfsePedidoCancelamento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.codigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.codigo));
    if Source.motivoHasValue then
      Json.ObjAddProp(Result, 'motivo', Self.stringToJsonValue(Source.motivo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfsePedidoCancelamentoToJson(Source: TNfsePedidoCancelamento): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfsePedidoCancelamentoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfsePedidoCancelamentoFromJsonValue(Source: TJSONValue): TNfsePedidoCancelamento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfsePedidoCancelamento.Create;
  try
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo', JValue) then
      Result.motivo := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfsePedidoCancelamentoFromJson(Source: string): TNfsePedidoCancelamento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfsePedidoCancelamentoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfsePedidoSincronizacaoToJsonValue(Source: TNfsePedidoSincronizacao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.identificadorHasValue then
      Json.ObjAddProp(Result, 'identificador', Self.stringToJsonValue(Source.identificador));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfsePedidoSincronizacaoToJson(Source: TNfsePedidoSincronizacao): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfsePedidoSincronizacaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfsePedidoSincronizacaoFromJsonValue(Source: TJSONValue): TNfsePedidoSincronizacao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfsePedidoSincronizacao.Create;
  try
    if Json.ObjContains(Source, 'identificador', JValue) then
      Result.identificador := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfsePedidoSincronizacaoFromJson(Source: string): TNfsePedidoSincronizacao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfsePedidoSincronizacaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseSincronizacaoToJsonValue(Source: TNfseSincronizacao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Assigned(Source.mensagens) then
      Json.ObjAddProp(Result, 'mensagens', Self.TNfseMensagemRetornoListToJsonValue(Source.mensagens));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseSincronizacaoToJson(Source: TNfseSincronizacao): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfseSincronizacaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfseSincronizacaoFromJsonValue(Source: TJSONValue): TNfseSincronizacao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfseSincronizacao.Create;
  try
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagens', JValue) then
      Result.mensagens := Self.TNfseMensagemRetornoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfseSincronizacaoFromJson(Source: string): TNfseSincronizacao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfseSincronizacaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.THttpRequestDebugToJsonValue(Source: THttpRequestDebug): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.methodHasValue then
      Json.ObjAddProp(Result, 'method', Self.stringToJsonValue(Source.method));
    if Source.uriHasValue then
      Json.ObjAddProp(Result, 'uri', Self.stringToJsonValue(Source.uri));
    if Source.headersHasValue then
      Json.ObjAddProp(Result, 'headers', Self.stringToJsonValue(Source.headers));
    if Source.response_status_codeHasValue then
      Json.ObjAddProp(Result, 'response_status_code', Self.IntegerToJsonValue(Source.response_status_code));
    if Source.response_status_reasonHasValue then
      Json.ObjAddProp(Result, 'response_status_reason', Self.stringToJsonValue(Source.response_status_reason));
    if Source.response_headersHasValue then
      Json.ObjAddProp(Result, 'response_headers', Self.stringToJsonValue(Source.response_headers));
    if Source.response_timeHasValue then
      Json.ObjAddProp(Result, 'response_time', Self.IntegerToJsonValue(Source.response_time));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.THttpRequestDebugToJson(Source: THttpRequestDebug): string;
var
  JValue: TJSONValue;
begin
  JValue := THttpRequestDebugToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.THttpRequestDebugFromJsonValue(Source: TJSONValue): THttpRequestDebug;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := THttpRequestDebug.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'method', JValue) then
      Result.method := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uri', JValue) then
      Result.uri := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'headers', JValue) then
      Result.headers := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'response_status_code', JValue) then
      Result.response_status_code := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'response_status_reason', JValue) then
      Result.response_status_reason := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'response_headers', JValue) then
      Result.response_headers := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'response_time', JValue) then
      Result.response_time := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.THttpRequestDebugFromJson(Source: string): THttpRequestDebug;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := THttpRequestDebugFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeRequisicaoDebugToJsonValue(Source: TDfeRequisicaoDebug): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.created_atHasValue then
      Json.ObjAddProp(Result, 'created_at', Self.TDateTimeToJsonValue(Source.created_at));
    if Source.tipoHasValue then
      Json.ObjAddProp(Result, 'tipo', Self.stringToJsonValue(Source.tipo));
    if Source.lote_idHasValue then
      Json.ObjAddProp(Result, 'lote_id', Self.stringToJsonValue(Source.lote_id));
    if Source.codigo_statusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.codigo_status));
    if Source.motivo_statusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.motivo_status));
    if Assigned(Source.http_request) then
      Json.ObjAddProp(Result, 'http_request', Self.THttpRequestDebugToJsonValue(Source.http_request));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeRequisicaoDebugToJson(Source: TDfeRequisicaoDebug): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeRequisicaoDebugToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeRequisicaoDebugFromJsonValue(Source: TJSONValue): TDfeRequisicaoDebug;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeRequisicaoDebug.Create;
  try
    if Json.ObjContains(Source, 'created_at', JValue) then
      Result.created_at := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo', JValue) then
      Result.tipo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lote_id', JValue) then
      Result.lote_id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.codigo_status := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.motivo_status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'http_request', JValue) then
      Result.http_request := Self.THttpRequestDebugFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeRequisicaoDebugFromJson(Source: string): TDfeRequisicaoDebug;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeRequisicaoDebugFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeRequisicaoDebugListToJsonValue(Source: TDfeRequisicaoDebugList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TDfeRequisicaoDebugToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeRequisicaoDebugListToJson(Source: TDfeRequisicaoDebugList): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeRequisicaoDebugListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeRequisicaoDebugListFromJsonValue(Source: TJSONValue): TDfeRequisicaoDebugList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeRequisicaoDebugList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TDfeRequisicaoDebugFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeRequisicaoDebugListFromJson(Source: string): TDfeRequisicaoDebugList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeRequisicaoDebugListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeDebugToJsonValue(Source: TDfeDebug): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.tipoHasValue then
      Json.ObjAddProp(Result, 'tipo', Self.stringToJsonValue(Source.tipo));
    if Source.created_atHasValue then
      Json.ObjAddProp(Result, 'created_at', Self.TDateTimeToJsonValue(Source.created_at));
    if Assigned(Source.requisicoes) then
      Json.ObjAddProp(Result, 'requisicoes', Self.TDfeRequisicaoDebugListToJsonValue(Source.requisicoes));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeDebugToJson(Source: TDfeDebug): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeDebugToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeDebugFromJsonValue(Source: TJSONValue): TDfeDebug;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeDebug.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo', JValue) then
      Result.tipo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'created_at', JValue) then
      Result.created_at := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'requisicoes', JValue) then
      Result.requisicoes := Self.TDfeRequisicaoDebugListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeDebugFromJson(Source: string): TDfeDebug;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeDebugFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeSefazStatusToJsonValue(Source: TDfeSefazStatus): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.autorizadorHasValue then
      Json.ObjAddProp(Result, 'autorizador', Self.stringToJsonValue(Source.autorizador));
    if Source.ambienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.data_hora_consultaHasValue then
      Json.ObjAddProp(Result, 'data_hora_consulta', Self.TDateTimeToJsonValue(Source.data_hora_consulta));
    if Source.codigo_statusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.codigo_status));
    if Source.motivo_statusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.motivo_status));
    if Source.tempo_medio_respostaHasValue then
      Json.ObjAddProp(Result, 'tempo_medio_resposta', Self.IntegerToJsonValue(Source.tempo_medio_resposta));
    if Source.data_hora_retornoHasValue then
      Json.ObjAddProp(Result, 'data_hora_retorno', Self.TDateTimeToJsonValue(Source.data_hora_retorno));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeSefazStatusToJson(Source: TDfeSefazStatus): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeSefazStatusToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeSefazStatusFromJsonValue(Source: TJSONValue): TDfeSefazStatus;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeSefazStatus.Create;
  try
    if Json.ObjContains(Source, 'autorizador', JValue) then
      Result.autorizador := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_hora_consulta', JValue) then
      Result.data_hora_consulta := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.codigo_status := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.motivo_status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tempo_medio_resposta', JValue) then
      Result.tempo_medio_resposta := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_hora_retorno', JValue) then
      Result.data_hora_retorno := Self.TDateTimeFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeSefazStatusFromJson(Source: string): TDfeSefazStatus;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeSefazStatusFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazIdeToJsonValue(Source: TDceSefazIde): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cUF', Self.IntegerToJsonValue(Source.cUF));
    if Source.cDCHasValue then
      Json.ObjAddProp(Result, 'cDC', Self.stringToJsonValue(Source.cDC));
    if Source.&modHasValue then
      Json.ObjAddProp(Result, 'mod', Self.IntegerToJsonValue(Source.&mod));
    Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.serie));
    Json.ObjAddProp(Result, 'nDC', Self.IntegerToJsonValue(Source.nDC));
    Json.ObjAddProp(Result, 'dhEmi', Self.TDateTimeToJsonValue(Source.dhEmi));
    Json.ObjAddProp(Result, 'tpEmis', Self.IntegerToJsonValue(Source.tpEmis));
    Json.ObjAddProp(Result, 'tpEmit', Self.IntegerToJsonValue(Source.tpEmit));
    Json.ObjAddProp(Result, 'nSiteAutoriz', Self.IntegerToJsonValue(Source.nSiteAutoriz));
    if Source.cDVHasValue then
      Json.ObjAddProp(Result, 'cDV', Self.IntegerToJsonValue(Source.cDV));
    if Source.tpAmbHasValue then
      Json.ObjAddProp(Result, 'tpAmb', Self.IntegerToJsonValue(Source.tpAmb));
    Json.ObjAddProp(Result, 'verProc', Self.stringToJsonValue(Source.verProc));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazIdeToJson(Source: TDceSefazIde): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazIdeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazIdeFromJsonValue(Source: TJSONValue): TDceSefazIde;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazIde.Create;
  try
    if Json.ObjContains(Source, 'cUF', JValue) then
      Result.cUF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cDC', JValue) then
      Result.cDC := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&mod := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nDC', JValue) then
      Result.nDC := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhEmi', JValue) then
      Result.dhEmi := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpEmis', JValue) then
      Result.tpEmis := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpEmit', JValue) then
      Result.tpEmit := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nSiteAutoriz', JValue) then
      Result.nSiteAutoriz := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cDV', JValue) then
      Result.cDV := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpAmb', JValue) then
      Result.tpAmb := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'verProc', JValue) then
      Result.verProc := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazIdeFromJson(Source: string): TDceSefazIde;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazIdeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazEndeEmiToJsonValue(Source: TDceSefazEndeEmi): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xLgrHasValue then
      Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.xLgr));
    if Source.nroHasValue then
      Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.nro));
    if Source.xCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.xCpl));
    if Source.xBairroHasValue then
      Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.xBairro));
    if Source.cMunHasValue then
      Json.ObjAddProp(Result, 'cMun', Self.stringToJsonValue(Source.cMun));
    if Source.xMunHasValue then
      Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.xMun));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.stringToJsonValue(Source.CEP));
    Json.ObjAddProp(Result, 'cPais', Self.stringToJsonValue(Source.cPais));
    Json.ObjAddProp(Result, 'xPais', Self.stringToJsonValue(Source.xPais));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazEndeEmiToJson(Source: TDceSefazEndeEmi): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazEndeEmiToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazEndeEmiFromJsonValue(Source: TJSONValue): TDceSefazEndeEmi;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazEndeEmi.Create;
  try
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.xLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.xCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.xBairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.cMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.xMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPais', JValue) then
      Result.cPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xPais', JValue) then
      Result.xPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazEndeEmiFromJson(Source: string): TDceSefazEndeEmi;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazEndeEmiFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazEmitToJsonValue(Source: TDceSefazEmit): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.xNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Assigned(Source.enderEmit) then
      Json.ObjAddProp(Result, 'enderEmit', Self.TDceSefazEndeEmiToJsonValue(Source.enderEmit));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazEmitToJson(Source: TDceSefazEmit): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazEmitToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazEmitFromJsonValue(Source: TJSONValue): TDceSefazEmit;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazEmit.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderEmit', JValue) then
      Result.enderEmit := Self.TDceSefazEndeEmiFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazEmitFromJson(Source: string): TDceSefazEmit;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazEmitFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazFiscoToJsonValue(Source: TDceSefazFisco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    Json.ObjAddProp(Result, 'xOrgao', Self.stringToJsonValue(Source.xOrgao));
    Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazFiscoToJson(Source: TDceSefazFisco): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazFiscoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazFiscoFromJsonValue(Source: TJSONValue): TDceSefazFisco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazFisco.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xOrgao', JValue) then
      Result.xOrgao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazFiscoFromJson(Source: string): TDceSefazFisco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazFiscoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazMarketplaceToJsonValue(Source: TDceSefazMarketplace): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    Json.ObjAddProp(Result, 'Site', Self.stringToJsonValue(Source.Site));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazMarketplaceToJson(Source: TDceSefazMarketplace): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazMarketplaceToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazMarketplaceFromJsonValue(Source: TJSONValue): TDceSefazMarketplace;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazMarketplace.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'Site', JValue) then
      Result.Site := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazMarketplaceFromJson(Source: string): TDceSefazMarketplace;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazMarketplaceFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazTransportadoraToJsonValue(Source: TDceSefazTransportadora): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazTransportadoraToJson(Source: TDceSefazTransportadora): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazTransportadoraToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazTransportadoraFromJsonValue(Source: TJSONValue): TDceSefazTransportadora;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazTransportadora.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazTransportadoraFromJson(Source: string): TDceSefazTransportadora;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazTransportadoraFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazECTToJsonValue(Source: TDceSefazECT): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazECTToJson(Source: TDceSefazECT): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazECTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazECTFromJsonValue(Source: TJSONValue): TDceSefazECT;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazECT.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazECTFromJson(Source: string): TDceSefazECT;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazECTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazEndeDestToJsonValue(Source: TDceSefazEndeDest): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.xLgr));
    Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.nro));
    if Source.xCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.xCpl));
    Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.xBairro));
    Json.ObjAddProp(Result, 'cMun', Self.stringToJsonValue(Source.cMun));
    Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.xMun));
    Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    Json.ObjAddProp(Result, 'CEP', Self.stringToJsonValue(Source.CEP));
    Json.ObjAddProp(Result, 'cPais', Self.stringToJsonValue(Source.cPais));
    Json.ObjAddProp(Result, 'xPais', Self.stringToJsonValue(Source.xPais));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    if Source.emailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazEndeDestToJson(Source: TDceSefazEndeDest): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazEndeDestToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazEndeDestFromJsonValue(Source: TJSONValue): TDceSefazEndeDest;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazEndeDest.Create;
  try
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.xLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.xCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.xBairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.cMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.xMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPais', JValue) then
      Result.cPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xPais', JValue) then
      Result.xPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazEndeDestFromJson(Source: string): TDceSefazEndeDest;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazEndeDestFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazDestToJsonValue(Source: TDceSefazDest): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.idOutrosHasValue then
      Json.ObjAddProp(Result, 'idOutros', Self.stringToJsonValue(Source.idOutros));
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    Json.ObjAddProp(Result, 'enderDest', Self.TDceSefazEndeDestToJsonValue(Source.enderDest));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazDestToJson(Source: TDceSefazDest): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazDestToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazDestFromJsonValue(Source: TJSONValue): TDceSefazDest;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazDest.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idOutros', JValue) then
      Result.idOutros := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderDest', JValue) then
      Result.enderDest := Self.TDceSefazEndeDestFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazDestFromJson(Source: string): TDceSefazDest;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazDestFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazAutXMLToJsonValue(Source: TDceSefazAutXML): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazAutXMLToJson(Source: TDceSefazAutXML): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazAutXMLToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazAutXMLFromJsonValue(Source: TJSONValue): TDceSefazAutXML;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazAutXML.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazAutXMLFromJson(Source: string): TDceSefazAutXML;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazAutXMLFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazAutXMLListToJsonValue(Source: TDceSefazAutXMLList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TDceSefazAutXMLToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazAutXMLListToJson(Source: TDceSefazAutXMLList): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazAutXMLListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazAutXMLListFromJsonValue(Source: TJSONValue): TDceSefazAutXMLList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazAutXMLList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TDceSefazAutXMLFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazAutXMLListFromJson(Source: string): TDceSefazAutXMLList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazAutXMLListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazProdToJsonValue(Source: TDceSefazProd): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xProd', Self.stringToJsonValue(Source.xProd));
    Json.ObjAddProp(Result, 'NCM', Self.stringToJsonValue(Source.NCM));
    Json.ObjAddProp(Result, 'qCom', Self.DoubleToJsonValue(Source.qCom));
    Json.ObjAddProp(Result, 'vUnCom', Self.DoubleToJsonValue(Source.vUnCom));
    Json.ObjAddProp(Result, 'vProd', Self.DoubleToJsonValue(Source.vProd));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazProdToJson(Source: TDceSefazProd): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazProdToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazProdFromJsonValue(Source: TJSONValue): TDceSefazProd;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazProd.Create;
  try
    if Json.ObjContains(Source, 'xProd', JValue) then
      Result.xProd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'NCM', JValue) then
      Result.NCM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qCom', JValue) then
      Result.qCom := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vUnCom', JValue) then
      Result.vUnCom := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vProd', JValue) then
      Result.vProd := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazProdFromJson(Source: string): TDceSefazProd;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazProdFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazDetToJsonValue(Source: TDceSefazDet): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nItem', Self.IntegerToJsonValue(Source.nItem));
    Json.ObjAddProp(Result, 'prod', Self.TDceSefazProdToJsonValue(Source.prod));
    if Source.infAdProdHasValue then
      Json.ObjAddProp(Result, 'infAdProd', Self.stringToJsonValue(Source.infAdProd));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazDetToJson(Source: TDceSefazDet): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazDetToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazDetFromJsonValue(Source: TJSONValue): TDceSefazDet;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazDet.Create;
  try
    if Json.ObjContains(Source, 'nItem', JValue) then
      Result.nItem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prod', JValue) then
      Result.prod := Self.TDceSefazProdFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infAdProd', JValue) then
      Result.infAdProd := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazDetFromJson(Source: string): TDceSefazDet;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazDetFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazDetListToJsonValue(Source: TDceSefazDetList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TDceSefazDetToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazDetListToJson(Source: TDceSefazDetList): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazDetListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazDetListFromJsonValue(Source: TJSONValue): TDceSefazDetList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazDetList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TDceSefazDetFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazDetListFromJson(Source: string): TDceSefazDetList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazDetListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazTotalToJsonValue(Source: TDceSefazTotal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vDC', Self.DoubleToJsonValue(Source.vDC));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazTotalToJson(Source: TDceSefazTotal): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazTotalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazTotalFromJsonValue(Source: TJSONValue): TDceSefazTotal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazTotal.Create;
  try
    if Json.ObjContains(Source, 'vDC', JValue) then
      Result.vDC := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazTotalFromJson(Source: string): TDceSefazTotal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazTotalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazTranspToJsonValue(Source: TDceSefazTransp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'modTrans', Self.IntegerToJsonValue(Source.modTrans));
    Json.ObjAddProp(Result, 'CNPJTransp', Self.stringToJsonValue(Source.CNPJTransp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazTranspToJson(Source: TDceSefazTransp): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazTranspToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazTranspFromJsonValue(Source: TJSONValue): TDceSefazTransp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazTransp.Create;
  try
    if Json.ObjContains(Source, 'modTrans', JValue) then
      Result.modTrans := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJTransp', JValue) then
      Result.CNPJTransp := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazTranspFromJson(Source: string): TDceSefazTransp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazTranspFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazObsEmitToJsonValue(Source: TDceSefazObsEmit): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xCampoHasValue then
      Json.ObjAddProp(Result, 'xCampo', Self.stringToJsonValue(Source.xCampo));
    Json.ObjAddProp(Result, 'xTexto', Self.stringToJsonValue(Source.xTexto));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazObsEmitToJson(Source: TDceSefazObsEmit): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazObsEmitToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazObsEmitFromJsonValue(Source: TJSONValue): TDceSefazObsEmit;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazObsEmit.Create;
  try
    if Json.ObjContains(Source, 'xCampo', JValue) then
      Result.xCampo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xTexto', JValue) then
      Result.xTexto := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazObsEmitFromJson(Source: string): TDceSefazObsEmit;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazObsEmitFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazObsEmitListToJsonValue(Source: TDceSefazObsEmitList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TDceSefazObsEmitToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazObsEmitListToJson(Source: TDceSefazObsEmitList): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazObsEmitListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazObsEmitListFromJsonValue(Source: TJSONValue): TDceSefazObsEmitList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazObsEmitList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TDceSefazObsEmitFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazObsEmitListFromJson(Source: string): TDceSefazObsEmitList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazObsEmitListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazObsFiscoToJsonValue(Source: TDceSefazObsFisco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xCampoHasValue then
      Json.ObjAddProp(Result, 'xCampo', Self.stringToJsonValue(Source.xCampo));
    Json.ObjAddProp(Result, 'xTexto', Self.stringToJsonValue(Source.xTexto));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazObsFiscoToJson(Source: TDceSefazObsFisco): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazObsFiscoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazObsFiscoFromJsonValue(Source: TJSONValue): TDceSefazObsFisco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazObsFisco.Create;
  try
    if Json.ObjContains(Source, 'xCampo', JValue) then
      Result.xCampo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xTexto', JValue) then
      Result.xTexto := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazObsFiscoFromJson(Source: string): TDceSefazObsFisco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazObsFiscoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazObsFiscoListToJsonValue(Source: TDceSefazObsFiscoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TDceSefazObsFiscoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazObsFiscoListToJson(Source: TDceSefazObsFiscoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazObsFiscoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazObsFiscoListFromJsonValue(Source: TJSONValue): TDceSefazObsFiscoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazObsFiscoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TDceSefazObsFiscoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazObsFiscoListFromJson(Source: string): TDceSefazObsFiscoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazObsFiscoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazObsMarketplaceToJsonValue(Source: TDceSefazObsMarketplace): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xCampoHasValue then
      Json.ObjAddProp(Result, 'xCampo', Self.stringToJsonValue(Source.xCampo));
    Json.ObjAddProp(Result, 'xTexto', Self.stringToJsonValue(Source.xTexto));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazObsMarketplaceToJson(Source: TDceSefazObsMarketplace): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazObsMarketplaceToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazObsMarketplaceFromJsonValue(Source: TJSONValue): TDceSefazObsMarketplace;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazObsMarketplace.Create;
  try
    if Json.ObjContains(Source, 'xCampo', JValue) then
      Result.xCampo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xTexto', JValue) then
      Result.xTexto := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazObsMarketplaceFromJson(Source: string): TDceSefazObsMarketplace;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazObsMarketplaceFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazObsMarketplaceListToJsonValue(Source: TDceSefazObsMarketplaceList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TDceSefazObsMarketplaceToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazObsMarketplaceListToJson(Source: TDceSefazObsMarketplaceList): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazObsMarketplaceListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazObsMarketplaceListFromJsonValue(Source: TJSONValue): TDceSefazObsMarketplaceList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazObsMarketplaceList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TDceSefazObsMarketplaceFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazObsMarketplaceListFromJson(Source: string): TDceSefazObsMarketplaceList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazObsMarketplaceListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazObsECTToJsonValue(Source: TDceSefazObsECT): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xCampoHasValue then
      Json.ObjAddProp(Result, 'xCampo', Self.stringToJsonValue(Source.xCampo));
    Json.ObjAddProp(Result, 'xTexto', Self.stringToJsonValue(Source.xTexto));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazObsECTToJson(Source: TDceSefazObsECT): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazObsECTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazObsECTFromJsonValue(Source: TJSONValue): TDceSefazObsECT;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazObsECT.Create;
  try
    if Json.ObjContains(Source, 'xCampo', JValue) then
      Result.xCampo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xTexto', JValue) then
      Result.xTexto := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazObsECTFromJson(Source: string): TDceSefazObsECT;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazObsECTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazObsECTListToJsonValue(Source: TDceSefazObsECTList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TDceSefazObsECTToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazObsECTListToJson(Source: TDceSefazObsECTList): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazObsECTListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazObsECTListFromJsonValue(Source: TJSONValue): TDceSefazObsECTList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazObsECTList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TDceSefazObsECTFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazObsECTListFromJson(Source: string): TDceSefazObsECTList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazObsECTListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazInfAdicToJsonValue(Source: TDceSefazInfAdic): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.infAdFiscoHasValue then
      Json.ObjAddProp(Result, 'infAdFisco', Self.stringToJsonValue(Source.infAdFisco));
    if Source.infCplHasValue then
      Json.ObjAddProp(Result, 'infCpl', Self.stringToJsonValue(Source.infCpl));
    if Source.infAdMarketplaceHasValue then
      Json.ObjAddProp(Result, 'infAdMarketplace', Self.stringToJsonValue(Source.infAdMarketplace));
    if Source.infAdECTHasValue then
      Json.ObjAddProp(Result, 'infAdECT', Self.stringToJsonValue(Source.infAdECT));
    if Assigned(Source.obsEmit) then
      Json.ObjAddProp(Result, 'obsEmit', Self.TDceSefazObsEmitListToJsonValue(Source.obsEmit));
    if Assigned(Source.obsFisco) then
      Json.ObjAddProp(Result, 'obsFisco', Self.TDceSefazObsFiscoListToJsonValue(Source.obsFisco));
    if Assigned(Source.obsMarketplace) then
      Json.ObjAddProp(Result, 'obsMarketplace', Self.TDceSefazObsMarketplaceListToJsonValue(Source.obsMarketplace));
    if Assigned(Source.obsECT) then
      Json.ObjAddProp(Result, 'obsECT', Self.TDceSefazObsECTListToJsonValue(Source.obsECT));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazInfAdicToJson(Source: TDceSefazInfAdic): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazInfAdicToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazInfAdicFromJsonValue(Source: TJSONValue): TDceSefazInfAdic;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazInfAdic.Create;
  try
    if Json.ObjContains(Source, 'infAdFisco', JValue) then
      Result.infAdFisco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCpl', JValue) then
      Result.infCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infAdMarketplace', JValue) then
      Result.infAdMarketplace := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infAdECT', JValue) then
      Result.infAdECT := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'obsEmit', JValue) then
      Result.obsEmit := Self.TDceSefazObsEmitListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'obsFisco', JValue) then
      Result.obsFisco := Self.TDceSefazObsFiscoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'obsMarketplace', JValue) then
      Result.obsMarketplace := Self.TDceSefazObsMarketplaceListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'obsECT', JValue) then
      Result.obsECT := Self.TDceSefazObsECTListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazInfAdicFromJson(Source: string): TDceSefazInfAdic;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazInfAdicFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazInfDecToJsonValue(Source: TDceSefazInfDec): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xObs1HasValue then
      Json.ObjAddProp(Result, 'xObs1', Self.stringToJsonValue(Source.xObs1));
    if Source.xObs2HasValue then
      Json.ObjAddProp(Result, 'xObs2', Self.stringToJsonValue(Source.xObs2));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazInfDecToJson(Source: TDceSefazInfDec): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazInfDecToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazInfDecFromJsonValue(Source: TJSONValue): TDceSefazInfDec;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazInfDec.Create;
  try
    if Json.ObjContains(Source, 'xObs1', JValue) then
      Result.xObs1 := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xObs2', JValue) then
      Result.xObs2 := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazInfDecFromJson(Source: string): TDceSefazInfDec;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazInfDecFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazInfDCeToJsonValue(Source: TDceSefazInfDCe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'versao', Self.stringToJsonValue(Source.versao));
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'Id', Self.stringToJsonValue(Source.Id));
    Json.ObjAddProp(Result, 'ide', Self.TDceSefazIdeToJsonValue(Source.ide));
    Json.ObjAddProp(Result, 'emit', Self.TDceSefazEmitToJsonValue(Source.emit));
    if Assigned(Source.Fisco) then
      Json.ObjAddProp(Result, 'Fisco', Self.TDceSefazFiscoToJsonValue(Source.Fisco));
    if Assigned(Source.Marketplace) then
      Json.ObjAddProp(Result, 'Marketplace', Self.TDceSefazMarketplaceToJsonValue(Source.Marketplace));
    if Assigned(Source.Transportadora) then
      Json.ObjAddProp(Result, 'Transportadora', Self.TDceSefazTransportadoraToJsonValue(Source.Transportadora));
    if Assigned(Source.ECT) then
      Json.ObjAddProp(Result, 'ECT', Self.TDceSefazECTToJsonValue(Source.ECT));
    Json.ObjAddProp(Result, 'dest', Self.TDceSefazDestToJsonValue(Source.dest));
    if Assigned(Source.autXML) then
      Json.ObjAddProp(Result, 'autXML', Self.TDceSefazAutXMLListToJsonValue(Source.autXML));
    Json.ObjAddProp(Result, 'det', Self.TDceSefazDetListToJsonValue(Source.det));
    Json.ObjAddProp(Result, 'total', Self.TDceSefazTotalToJsonValue(Source.total));
    Json.ObjAddProp(Result, 'transp', Self.TDceSefazTranspToJsonValue(Source.transp));
    if Assigned(Source.infAdic) then
      Json.ObjAddProp(Result, 'infAdic', Self.TDceSefazInfAdicToJsonValue(Source.infAdic));
    if Assigned(Source.infDec) then
      Json.ObjAddProp(Result, 'infDec', Self.TDceSefazInfDecToJsonValue(Source.infDec));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazInfDCeToJson(Source: TDceSefazInfDCe): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazInfDCeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazInfDCeFromJsonValue(Source: TJSONValue): TDceSefazInfDCe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazInfDCe.Create;
  try
    if Json.ObjContains(Source, 'versao', JValue) then
      Result.versao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'Id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ide', JValue) then
      Result.ide := Self.TDceSefazIdeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'emit', JValue) then
      Result.emit := Self.TDceSefazEmitFromJsonValue(JValue);
    if Json.ObjContains(Source, 'Fisco', JValue) then
      Result.Fisco := Self.TDceSefazFiscoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'Marketplace', JValue) then
      Result.Marketplace := Self.TDceSefazMarketplaceFromJsonValue(JValue);
    if Json.ObjContains(Source, 'Transportadora', JValue) then
      Result.Transportadora := Self.TDceSefazTransportadoraFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ECT', JValue) then
      Result.ECT := Self.TDceSefazECTFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dest', JValue) then
      Result.dest := Self.TDceSefazDestFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autXML', JValue) then
      Result.autXML := Self.TDceSefazAutXMLListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'det', JValue) then
      Result.det := Self.TDceSefazDetListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'total', JValue) then
      Result.total := Self.TDceSefazTotalFromJsonValue(JValue);
    if Json.ObjContains(Source, 'transp', JValue) then
      Result.transp := Self.TDceSefazTranspFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infAdic', JValue) then
      Result.infAdic := Self.TDceSefazInfAdicFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infDec', JValue) then
      Result.infDec := Self.TDceSefazInfDecFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazInfDCeFromJson(Source: string): TDceSefazInfDCe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazInfDCeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazInfSolicDCeToJsonValue(Source: TDceSefazInfSolicDCe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xSolic', Self.stringToJsonValue(Source.xSolic));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazInfSolicDCeToJson(Source: TDceSefazInfSolicDCe): string;
var
  JValue: TJSONValue;
begin
  JValue := TDceSefazInfSolicDCeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDceSefazInfSolicDCeFromJsonValue(Source: TJSONValue): TDceSefazInfSolicDCe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDceSefazInfSolicDCe.Create;
  try
    if Json.ObjContains(Source, 'xSolic', JValue) then
      Result.xSolic := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDceSefazInfSolicDCeFromJson(Source: string): TDceSefazInfSolicDCe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDceSefazInfSolicDCeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDcePedidoEmissaoToJsonValue(Source: TDcePedidoEmissao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'infDCe', Self.TDceSefazInfDCeToJsonValue(Source.infDCe));
    Json.ObjAddProp(Result, 'infSolicDCe', Self.TDceSefazInfSolicDCeToJsonValue(Source.infSolicDCe));
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.referenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.referencia));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDcePedidoEmissaoToJson(Source: TDcePedidoEmissao): string;
var
  JValue: TJSONValue;
begin
  JValue := TDcePedidoEmissaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDcePedidoEmissaoFromJsonValue(Source: TJSONValue): TDcePedidoEmissao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDcePedidoEmissao.Create;
  try
    if Json.ObjContains(Source, 'infDCe', JValue) then
      Result.infDCe := Self.TDceSefazInfDCeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infSolicDCe', JValue) then
      Result.infSolicDCe := Self.TDceSefazInfSolicDCeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.referencia := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDcePedidoEmissaoFromJson(Source: string): TDcePedidoEmissao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDcePedidoEmissaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeAutorEventoToJsonValue(Source: TDfeAutorEvento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.cpf_cnpjHasValue then
      Json.ObjAddProp(Result, 'cpf_cnpj', Self.stringToJsonValue(Source.cpf_cnpj));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeAutorEventoToJson(Source: TDfeAutorEvento): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeAutorEventoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeAutorEventoFromJsonValue(Source: TJSONValue): TDfeAutorEvento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeAutorEvento.Create;
  try
    if Json.ObjContains(Source, 'cpf_cnpj', JValue) then
      Result.cpf_cnpj := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeAutorEventoFromJson(Source: string): TDfeAutorEvento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeAutorEventoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeAutorizacaoToJsonValue(Source: TDfeAutorizacao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.digest_valueHasValue then
      Json.ObjAddProp(Result, 'digest_value', Self.stringToJsonValue(Source.digest_value));
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.ambienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Assigned(Source.autor) then
      Json.ObjAddProp(Result, 'autor', Self.TDfeAutorEventoToJsonValue(Source.autor));
    if Source.chave_acessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.chave_acesso));
    if Source.data_eventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.data_evento));
    if Source.numero_sequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.numero_sequencial));
    if Source.data_recebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.data_recebimento));
    if Source.codigo_statusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.codigo_status));
    if Source.motivo_statusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.motivo_status));
    if Source.numero_protocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.numero_protocolo));
    if Source.codigo_mensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.codigo_mensagem));
    if Source.mensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.mensagem));
    if Source.tipo_eventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.tipo_evento));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeAutorizacaoToJson(Source: TDfeAutorizacao): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeAutorizacaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeAutorizacaoFromJsonValue(Source: TJSONValue): TDfeAutorizacao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeAutorizacao.Create;
  try
    if Json.ObjContains(Source, 'digest_value', JValue) then
      Result.digest_value := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autor', JValue) then
      Result.autor := Self.TDfeAutorEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.chave_acesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.data_evento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.numero_sequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.data_recebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.codigo_status := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.motivo_status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.numero_protocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.codigo_mensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.mensagem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.tipo_evento := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeAutorizacaoFromJson(Source: string): TDfeAutorizacao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeAutorizacaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeToJsonValue(Source: TDfe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.ambienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.created_atHasValue then
      Json.ObjAddProp(Result, 'created_at', Self.TDateTimeToJsonValue(Source.created_at));
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Source.referenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.referencia));
    if Source.data_emissaoHasValue then
      Json.ObjAddProp(Result, 'data_emissao', Self.TDateTimeToJsonValue(Source.data_emissao));
    if Source.modeloHasValue then
      Json.ObjAddProp(Result, 'modelo', Self.IntegerToJsonValue(Source.modelo));
    if Source.serieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.serie));
    if Source.numeroHasValue then
      Json.ObjAddProp(Result, 'numero', Self.IntegerToJsonValue(Source.numero));
    if Source.tipo_emissaoHasValue then
      Json.ObjAddProp(Result, 'tipo_emissao', Self.IntegerToJsonValue(Source.tipo_emissao));
    if Source.valor_totalHasValue then
      Json.ObjAddProp(Result, 'valor_total', Self.DoubleToJsonValue(Source.valor_total));
    if Source.chaveHasValue then
      Json.ObjAddProp(Result, 'chave', Self.stringToJsonValue(Source.chave));
    if Assigned(Source.autorizacao) then
      Json.ObjAddProp(Result, 'autorizacao', Self.TDfeAutorizacaoToJsonValue(Source.autorizacao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeToJson(Source: TDfe): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeFromJsonValue(Source: TJSONValue): TDfe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfe.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'created_at', JValue) then
      Result.created_at := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_emissao', JValue) then
      Result.data_emissao := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modelo', JValue) then
      Result.modelo := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.numero := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_emissao', JValue) then
      Result.tipo_emissao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_total', JValue) then
      Result.valor_total := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave', JValue) then
      Result.chave := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autorizacao', JValue) then
      Result.autorizacao := Self.TDfeAutorizacaoFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeFromJson(Source: string): TDfe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeListToJsonValue(Source: TDfeList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TDfeToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeListToJson(Source: TDfeList): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeListFromJsonValue(Source: TJSONValue): TDfeList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TDfeFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeListFromJson(Source: string): TDfeList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeListagemToJsonValue(Source: TDfeListagem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source._countHasValue then
      Json.ObjAddProp(Result, '@count', Self.IntegerToJsonValue(Source._count));
    if Assigned(Source.data) then
      Json.ObjAddProp(Result, 'data', Self.TDfeListToJsonValue(Source.data));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeListagemToJson(Source: TDfeListagem): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeListagemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeListagemFromJsonValue(Source: TJSONValue): TDfeListagem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeListagem.Create;
  try
    if Json.ObjContains(Source, '@count', JValue) then
      Result._count := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data', JValue) then
      Result.data := Self.TDfeListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeListagemFromJson(Source: string): TDfeListagem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeListagemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDcePedidoCancelamentoToJsonValue(Source: TDcePedidoCancelamento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.justificativaHasValue then
      Json.ObjAddProp(Result, 'justificativa', Self.stringToJsonValue(Source.justificativa));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDcePedidoCancelamentoToJson(Source: TDcePedidoCancelamento): string;
var
  JValue: TJSONValue;
begin
  JValue := TDcePedidoCancelamentoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDcePedidoCancelamentoFromJsonValue(Source: TJSONValue): TDcePedidoCancelamento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDcePedidoCancelamento.Create;
  try
    if Json.ObjContains(Source, 'justificativa', JValue) then
      Result.justificativa := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDcePedidoCancelamentoFromJson(Source: string): TDcePedidoCancelamento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDcePedidoCancelamentoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeCancelamentoToJsonValue(Source: TDfeCancelamento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.justificativaHasValue then
      Json.ObjAddProp(Result, 'justificativa', Self.stringToJsonValue(Source.justificativa));
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.ambienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Assigned(Source.autor) then
      Json.ObjAddProp(Result, 'autor', Self.TDfeAutorEventoToJsonValue(Source.autor));
    if Source.chave_acessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.chave_acesso));
    if Source.data_eventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.data_evento));
    if Source.numero_sequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.numero_sequencial));
    if Source.data_recebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.data_recebimento));
    if Source.codigo_statusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.codigo_status));
    if Source.motivo_statusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.motivo_status));
    if Source.numero_protocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.numero_protocolo));
    if Source.codigo_mensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.codigo_mensagem));
    if Source.mensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.mensagem));
    if Source.tipo_eventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.tipo_evento));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeCancelamentoToJson(Source: TDfeCancelamento): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeCancelamentoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeCancelamentoFromJsonValue(Source: TJSONValue): TDfeCancelamento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeCancelamento.Create;
  try
    if Json.ObjContains(Source, 'justificativa', JValue) then
      Result.justificativa := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autor', JValue) then
      Result.autor := Self.TDfeAutorEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.chave_acesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.data_evento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.numero_sequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.data_recebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.codigo_status := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.motivo_status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.numero_protocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.codigo_mensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.mensagem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.tipo_evento := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeCancelamentoFromJson(Source: string): TDfeCancelamento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeCancelamentoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmailResumoToJsonValue(Source: TEmailResumo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Source.sent_atHasValue then
      Json.ObjAddProp(Result, 'sent_at', Self.TDateTimeToJsonValue(Source.sent_at));
    if Assigned(Source.recipients) then
      Json.ObjAddProp(Result, 'recipients', Self.stringListToJsonValue(Source.recipients));
    if Source.subjectHasValue then
      Json.ObjAddProp(Result, 'subject', Self.stringToJsonValue(Source.subject));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmailResumoToJson(Source: TEmailResumo): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmailResumoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmailResumoFromJsonValue(Source: TJSONValue): TEmailResumo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmailResumo.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'sent_at', JValue) then
      Result.sent_at := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'recipients', JValue) then
      Result.recipients := Self.stringListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'subject', JValue) then
      Result.subject := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmailResumoFromJson(Source: string): TEmailResumo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmailResumoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmailResumoListToJsonValue(Source: TEmailResumoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TEmailResumoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmailResumoListToJson(Source: TEmailResumoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmailResumoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmailResumoListFromJsonValue(Source: TJSONValue): TEmailResumoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmailResumoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TEmailResumoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmailResumoListFromJson(Source: string): TEmailResumoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmailResumoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmailListagemToJsonValue(Source: TEmailListagem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source._countHasValue then
      Json.ObjAddProp(Result, '@count', Self.IntegerToJsonValue(Source._count));
    if Assigned(Source.data) then
      Json.ObjAddProp(Result, 'data', Self.TEmailResumoListToJsonValue(Source.data));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmailListagemToJson(Source: TEmailListagem): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmailListagemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmailListagemFromJsonValue(Source: TJSONValue): TEmailListagem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmailListagem.Create;
  try
    if Json.ObjContains(Source, '@count', JValue) then
      Result._count := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data', JValue) then
      Result.data := Self.TEmailResumoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmailListagemFromJson(Source: string): TEmailListagem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmailListagemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmailAttachmentToJsonValue(Source: TEmailAttachment): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.content_typeHasValue then
      Json.ObjAddProp(Result, 'content_type', Self.stringToJsonValue(Source.content_type));
    if Source.filenameHasValue then
      Json.ObjAddProp(Result, 'filename', Self.stringToJsonValue(Source.filename));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmailAttachmentToJson(Source: TEmailAttachment): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmailAttachmentToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmailAttachmentFromJsonValue(Source: TJSONValue): TEmailAttachment;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmailAttachment.Create;
  try
    if Json.ObjContains(Source, 'content_type', JValue) then
      Result.content_type := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'filename', JValue) then
      Result.filename := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmailAttachmentFromJson(Source: string): TEmailAttachment;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmailAttachmentFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmailAttachmentListToJsonValue(Source: TEmailAttachmentList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TEmailAttachmentToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmailAttachmentListToJson(Source: TEmailAttachmentList): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmailAttachmentListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmailAttachmentListFromJsonValue(Source: TJSONValue): TEmailAttachmentList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmailAttachmentList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TEmailAttachmentFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmailAttachmentListFromJson(Source: string): TEmailAttachmentList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmailAttachmentListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmailEventToJsonValue(Source: TEmailEvent): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.event_typeHasValue then
      Json.ObjAddProp(Result, 'event_type', Self.stringToJsonValue(Source.event_type));
    if Source.timestampHasValue then
      Json.ObjAddProp(Result, 'timestamp', Self.TDateTimeToJsonValue(Source.timestamp));
    if Source.messageHasValue then
      Json.ObjAddProp(Result, 'message', Self.stringToJsonValue(Source.message));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmailEventToJson(Source: TEmailEvent): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmailEventToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmailEventFromJsonValue(Source: TJSONValue): TEmailEvent;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmailEvent.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'event_type', JValue) then
      Result.event_type := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'timestamp', JValue) then
      Result.timestamp := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'message', JValue) then
      Result.message := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmailEventFromJson(Source: string): TEmailEvent;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmailEventFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmailEventListToJsonValue(Source: TEmailEventList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TEmailEventToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmailEventListToJson(Source: TEmailEventList): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmailEventListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmailEventListFromJsonValue(Source: TJSONValue): TEmailEventList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmailEventList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TEmailEventFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmailEventListFromJson(Source: string): TEmailEventList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmailEventListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmailToJsonValue(Source: TEmail): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Source.sent_atHasValue then
      Json.ObjAddProp(Result, 'sent_at', Self.TDateTimeToJsonValue(Source.sent_at));
    if Assigned(Source.&to) then
      Json.ObjAddProp(Result, 'to', Self.stringListToJsonValue(Source.&to));
    if Assigned(Source.cc) then
      Json.ObjAddProp(Result, 'cc', Self.stringListToJsonValue(Source.cc));
    if Source.reply_toHasValue then
      Json.ObjAddProp(Result, 'reply_to', Self.stringToJsonValue(Source.reply_to));
    if Source.subjectHasValue then
      Json.ObjAddProp(Result, 'subject', Self.stringToJsonValue(Source.subject));
    if Assigned(Source.attachments) then
      Json.ObjAddProp(Result, 'attachments', Self.TEmailAttachmentListToJsonValue(Source.attachments));
    if Assigned(Source.events) then
      Json.ObjAddProp(Result, 'events', Self.TEmailEventListToJsonValue(Source.events));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmailToJson(Source: TEmail): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmailToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmailFromJsonValue(Source: TJSONValue): TEmail;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmail.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'sent_at', JValue) then
      Result.sent_at := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'to', JValue) then
      Result.&to := Self.stringListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cc', JValue) then
      Result.cc := Self.stringListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'reply_to', JValue) then
      Result.reply_to := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'subject', JValue) then
      Result.subject := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'attachments', JValue) then
      Result.attachments := Self.TEmailAttachmentListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'events', JValue) then
      Result.events := Self.TEmailEventListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmailFromJson(Source: string): TEmail;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmailFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeDocumentoToJsonValue(Source: TDistribuicaoNfeDocumento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.created_atHasValue then
      Json.ObjAddProp(Result, 'created_at', Self.TDateTimeToJsonValue(Source.created_at));
    if Source.nsuHasValue then
      Json.ObjAddProp(Result, 'nsu', Self.Int64ToJsonValue(Source.nsu));
    Json.ObjAddProp(Result, 'schema', Self.stringToJsonValue(Source.schema));
    if Source.tipo_documentoHasValue then
      Json.ObjAddProp(Result, 'tipo_documento', Self.stringToJsonValue(Source.tipo_documento));
    if Source.chave_acessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.chave_acesso));
    if Source.resumoHasValue then
      Json.ObjAddProp(Result, 'resumo', Self.BooleanToJsonValue(Source.resumo));
    if Source.tipo_eventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.tipo_evento));
    if Source.numero_sequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.numero_sequencial));
    if Source.data_eventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.data_evento));
    if Source.data_recebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.data_recebimento));
    if Source.numero_protocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.numero_protocolo));
    if Source.tipo_nfeHasValue then
      Json.ObjAddProp(Result, 'tipo_nfe', Self.IntegerToJsonValue(Source.tipo_nfe));
    if Source.valor_nfeHasValue then
      Json.ObjAddProp(Result, 'valor_nfe', Self.DoubleToJsonValue(Source.valor_nfe));
    if Source.digest_valueHasValue then
      Json.ObjAddProp(Result, 'digest_value', Self.stringToJsonValue(Source.digest_value));
    if Source.emitente_cpf_cnpjHasValue then
      Json.ObjAddProp(Result, 'emitente_cpf_cnpj', Self.stringToJsonValue(Source.emitente_cpf_cnpj));
    if Source.emitente_nome_razao_socialHasValue then
      Json.ObjAddProp(Result, 'emitente_nome_razao_social', Self.stringToJsonValue(Source.emitente_nome_razao_social));
    if Source.emitente_inscricao_estadualHasValue then
      Json.ObjAddProp(Result, 'emitente_inscricao_estadual', Self.stringToJsonValue(Source.emitente_inscricao_estadual));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeDocumentoToJson(Source: TDistribuicaoNfeDocumento): string;
var
  JValue: TJSONValue;
begin
  JValue := TDistribuicaoNfeDocumentoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeDocumentoFromJsonValue(Source: TJSONValue): TDistribuicaoNfeDocumento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDistribuicaoNfeDocumento.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'created_at', JValue) then
      Result.created_at := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nsu', JValue) then
      Result.nsu := Self.Int64FromJsonValue(JValue);
    if Json.ObjContains(Source, 'schema', JValue) then
      Result.schema := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_documento', JValue) then
      Result.tipo_documento := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.chave_acesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'resumo', JValue) then
      Result.resumo := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.tipo_evento := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.numero_sequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.data_evento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.data_recebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.numero_protocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_nfe', JValue) then
      Result.tipo_nfe := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_nfe', JValue) then
      Result.valor_nfe := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'digest_value', JValue) then
      Result.digest_value := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'emitente_cpf_cnpj', JValue) then
      Result.emitente_cpf_cnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'emitente_nome_razao_social', JValue) then
      Result.emitente_nome_razao_social := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'emitente_inscricao_estadual', JValue) then
      Result.emitente_inscricao_estadual := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeDocumentoFromJson(Source: string): TDistribuicaoNfeDocumento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDistribuicaoNfeDocumentoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeDocumentoListToJsonValue(Source: TDistribuicaoNfeDocumentoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TDistribuicaoNfeDocumentoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeDocumentoListToJson(Source: TDistribuicaoNfeDocumentoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TDistribuicaoNfeDocumentoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeDocumentoListFromJsonValue(Source: TJSONValue): TDistribuicaoNfeDocumentoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDistribuicaoNfeDocumentoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TDistribuicaoNfeDocumentoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeDocumentoListFromJson(Source: string): TDistribuicaoNfeDocumentoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDistribuicaoNfeDocumentoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeToJsonValue(Source: TDistribuicaoNfe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.created_atHasValue then
      Json.ObjAddProp(Result, 'created_at', Self.TDateTimeToJsonValue(Source.created_at));
    Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.uf_autorHasValue then
      Json.ObjAddProp(Result, 'uf_autor', Self.stringToJsonValue(Source.uf_autor));
    Json.ObjAddProp(Result, 'tipo_consulta', Self.stringToJsonValue(Source.tipo_consulta));
    if Source.dist_nsuHasValue then
      Json.ObjAddProp(Result, 'dist_nsu', Self.Int64ToJsonValue(Source.dist_nsu));
    if Source.cons_nsuHasValue then
      Json.ObjAddProp(Result, 'cons_nsu', Self.Int64ToJsonValue(Source.cons_nsu));
    if Source.cons_chaveHasValue then
      Json.ObjAddProp(Result, 'cons_chave', Self.stringToJsonValue(Source.cons_chave));
    Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.codigo_status));
    if Source.motivo_statusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.motivo_status));
    Json.ObjAddProp(Result, 'data_hora_resposta', Self.TDateTimeToJsonValue(Source.data_hora_resposta));
    Json.ObjAddProp(Result, 'ultimo_nsu', Self.Int64ToJsonValue(Source.ultimo_nsu));
    Json.ObjAddProp(Result, 'max_nsu', Self.Int64ToJsonValue(Source.max_nsu));
    if Assigned(Source.documentos) then
      Json.ObjAddProp(Result, 'documentos', Self.TDistribuicaoNfeDocumentoListToJsonValue(Source.documentos));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeToJson(Source: TDistribuicaoNfe): string;
var
  JValue: TJSONValue;
begin
  JValue := TDistribuicaoNfeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeFromJsonValue(Source: TJSONValue): TDistribuicaoNfe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDistribuicaoNfe.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'created_at', JValue) then
      Result.created_at := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uf_autor', JValue) then
      Result.uf_autor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_consulta', JValue) then
      Result.tipo_consulta := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dist_nsu', JValue) then
      Result.dist_nsu := Self.Int64FromJsonValue(JValue);
    if Json.ObjContains(Source, 'cons_nsu', JValue) then
      Result.cons_nsu := Self.Int64FromJsonValue(JValue);
    if Json.ObjContains(Source, 'cons_chave', JValue) then
      Result.cons_chave := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.codigo_status := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.motivo_status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_hora_resposta', JValue) then
      Result.data_hora_resposta := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ultimo_nsu', JValue) then
      Result.ultimo_nsu := Self.Int64FromJsonValue(JValue);
    if Json.ObjContains(Source, 'max_nsu', JValue) then
      Result.max_nsu := Self.Int64FromJsonValue(JValue);
    if Json.ObjContains(Source, 'documentos', JValue) then
      Result.documentos := Self.TDistribuicaoNfeDocumentoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeFromJson(Source: string): TDistribuicaoNfe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDistribuicaoNfeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeListToJsonValue(Source: TDistribuicaoNfeList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TDistribuicaoNfeToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeListToJson(Source: TDistribuicaoNfeList): string;
var
  JValue: TJSONValue;
begin
  JValue := TDistribuicaoNfeListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeListFromJsonValue(Source: TJSONValue): TDistribuicaoNfeList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDistribuicaoNfeList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TDistribuicaoNfeFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeListFromJson(Source: string): TDistribuicaoNfeList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDistribuicaoNfeListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeListagemToJsonValue(Source: TDistribuicaoNfeListagem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source._countHasValue then
      Json.ObjAddProp(Result, '@count', Self.IntegerToJsonValue(Source._count));
    if Assigned(Source.data) then
      Json.ObjAddProp(Result, 'data', Self.TDistribuicaoNfeListToJsonValue(Source.data));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeListagemToJson(Source: TDistribuicaoNfeListagem): string;
var
  JValue: TJSONValue;
begin
  JValue := TDistribuicaoNfeListagemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeListagemFromJsonValue(Source: TJSONValue): TDistribuicaoNfeListagem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDistribuicaoNfeListagem.Create;
  try
    if Json.ObjContains(Source, '@count', JValue) then
      Result._count := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data', JValue) then
      Result.data := Self.TDistribuicaoNfeListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeListagemFromJson(Source: string): TDistribuicaoNfeListagem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDistribuicaoNfeListagemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfePedidoToJsonValue(Source: TDistribuicaoNfePedido): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cpf_cnpj', Self.stringToJsonValue(Source.cpf_cnpj));
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.uf_autorHasValue then
      Json.ObjAddProp(Result, 'uf_autor', Self.stringToJsonValue(Source.uf_autor));
    Json.ObjAddProp(Result, 'tipo_consulta', Self.stringToJsonValue(Source.tipo_consulta));
    if Source.dist_nsuHasValue then
      Json.ObjAddProp(Result, 'dist_nsu', Self.Int64ToJsonValue(Source.dist_nsu));
    if Source.cons_nsuHasValue then
      Json.ObjAddProp(Result, 'cons_nsu', Self.Int64ToJsonValue(Source.cons_nsu));
    if Source.cons_chaveHasValue then
      Json.ObjAddProp(Result, 'cons_chave', Self.stringToJsonValue(Source.cons_chave));
    if Source.ignorar_tempo_esperaHasValue then
      Json.ObjAddProp(Result, 'ignorar_tempo_espera', Self.BooleanToJsonValue(Source.ignorar_tempo_espera));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfePedidoToJson(Source: TDistribuicaoNfePedido): string;
var
  JValue: TJSONValue;
begin
  JValue := TDistribuicaoNfePedidoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfePedidoFromJsonValue(Source: TJSONValue): TDistribuicaoNfePedido;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDistribuicaoNfePedido.Create;
  try
    if Json.ObjContains(Source, 'cpf_cnpj', JValue) then
      Result.cpf_cnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uf_autor', JValue) then
      Result.uf_autor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_consulta', JValue) then
      Result.tipo_consulta := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dist_nsu', JValue) then
      Result.dist_nsu := Self.Int64FromJsonValue(JValue);
    if Json.ObjContains(Source, 'cons_nsu', JValue) then
      Result.cons_nsu := Self.Int64FromJsonValue(JValue);
    if Json.ObjContains(Source, 'cons_chave', JValue) then
      Result.cons_chave := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ignorar_tempo_espera', JValue) then
      Result.ignorar_tempo_espera := Self.BooleanFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfePedidoFromJson(Source: string): TDistribuicaoNfePedido;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDistribuicaoNfePedidoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeDocumentoListagemToJsonValue(Source: TDistribuicaoNfeDocumentoListagem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source._countHasValue then
      Json.ObjAddProp(Result, '@count', Self.IntegerToJsonValue(Source._count));
    if Assigned(Source.data) then
      Json.ObjAddProp(Result, 'data', Self.TDistribuicaoNfeDocumentoListToJsonValue(Source.data));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeDocumentoListagemToJson(Source: TDistribuicaoNfeDocumentoListagem): string;
var
  JValue: TJSONValue;
begin
  JValue := TDistribuicaoNfeDocumentoListagemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeDocumentoListagemFromJsonValue(Source: TJSONValue): TDistribuicaoNfeDocumentoListagem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDistribuicaoNfeDocumentoListagem.Create;
  try
    if Json.ObjContains(Source, '@count', JValue) then
      Result._count := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data', JValue) then
      Result.data := Self.TDistribuicaoNfeDocumentoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeDocumentoListagemFromJson(Source: string): TDistribuicaoNfeDocumentoListagem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDistribuicaoNfeDocumentoListagemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeNotaToJsonValue(Source: TDistribuicaoNfeNota): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.chave_acessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.chave_acesso));
    if Source.numero_protocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.numero_protocolo));
    if Source.tipo_nfeHasValue then
      Json.ObjAddProp(Result, 'tipo_nfe', Self.IntegerToJsonValue(Source.tipo_nfe));
    if Source.data_emissaoHasValue then
      Json.ObjAddProp(Result, 'data_emissao', Self.TDateTimeToJsonValue(Source.data_emissao));
    if Source.valor_nfeHasValue then
      Json.ObjAddProp(Result, 'valor_nfe', Self.DoubleToJsonValue(Source.valor_nfe));
    if Source.digest_valueHasValue then
      Json.ObjAddProp(Result, 'digest_value', Self.stringToJsonValue(Source.digest_value));
    if Source.emitente_cpf_cnpjHasValue then
      Json.ObjAddProp(Result, 'emitente_cpf_cnpj', Self.stringToJsonValue(Source.emitente_cpf_cnpj));
    if Source.emitente_nome_razao_socialHasValue then
      Json.ObjAddProp(Result, 'emitente_nome_razao_social', Self.stringToJsonValue(Source.emitente_nome_razao_social));
    if Source.emitente_inscricao_estadualHasValue then
      Json.ObjAddProp(Result, 'emitente_inscricao_estadual', Self.stringToJsonValue(Source.emitente_inscricao_estadual));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeNotaToJson(Source: TDistribuicaoNfeNota): string;
var
  JValue: TJSONValue;
begin
  JValue := TDistribuicaoNfeNotaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeNotaFromJsonValue(Source: TJSONValue): TDistribuicaoNfeNota;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDistribuicaoNfeNota.Create;
  try
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.chave_acesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.numero_protocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_nfe', JValue) then
      Result.tipo_nfe := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_emissao', JValue) then
      Result.data_emissao := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_nfe', JValue) then
      Result.valor_nfe := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'digest_value', JValue) then
      Result.digest_value := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'emitente_cpf_cnpj', JValue) then
      Result.emitente_cpf_cnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'emitente_nome_razao_social', JValue) then
      Result.emitente_nome_razao_social := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'emitente_inscricao_estadual', JValue) then
      Result.emitente_inscricao_estadual := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeNotaFromJson(Source: string): TDistribuicaoNfeNota;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDistribuicaoNfeNotaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeNotaListToJsonValue(Source: TDistribuicaoNfeNotaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TDistribuicaoNfeNotaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeNotaListToJson(Source: TDistribuicaoNfeNotaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TDistribuicaoNfeNotaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeNotaListFromJsonValue(Source: TJSONValue): TDistribuicaoNfeNotaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDistribuicaoNfeNotaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TDistribuicaoNfeNotaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeNotaListFromJson(Source: string): TDistribuicaoNfeNotaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDistribuicaoNfeNotaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeNotaListagemToJsonValue(Source: TDistribuicaoNfeNotaListagem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source._countHasValue then
      Json.ObjAddProp(Result, '@count', Self.IntegerToJsonValue(Source._count));
    if Assigned(Source.data) then
      Json.ObjAddProp(Result, 'data', Self.TDistribuicaoNfeNotaListToJsonValue(Source.data));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeNotaListagemToJson(Source: TDistribuicaoNfeNotaListagem): string;
var
  JValue: TJSONValue;
begin
  JValue := TDistribuicaoNfeNotaListagemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeNotaListagemFromJsonValue(Source: TJSONValue): TDistribuicaoNfeNotaListagem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDistribuicaoNfeNotaListagem.Create;
  try
    if Json.ObjContains(Source, '@count', JValue) then
      Result._count := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data', JValue) then
      Result.data := Self.TDistribuicaoNfeNotaListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeNotaListagemFromJson(Source: string): TDistribuicaoNfeNotaListagem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDistribuicaoNfeNotaListagemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeEventoToJsonValue(Source: TDistribuicaoNfeEvento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.created_atHasValue then
      Json.ObjAddProp(Result, 'created_at', Self.TDateTimeToJsonValue(Source.created_at));
    if Source.ambienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Source.cpf_cnpj_autorHasValue then
      Json.ObjAddProp(Result, 'cpf_cnpj_autor', Self.stringToJsonValue(Source.cpf_cnpj_autor));
    if Source.chave_acessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.chave_acesso));
    if Source.tipo_eventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.tipo_evento));
    if Source.data_eventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.data_evento));
    if Source.numero_sequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.numero_sequencial));
    if Source.justificativaHasValue then
      Json.ObjAddProp(Result, 'justificativa', Self.stringToJsonValue(Source.justificativa));
    if Source.data_registroHasValue then
      Json.ObjAddProp(Result, 'data_registro', Self.TDateTimeToJsonValue(Source.data_registro));
    if Source.codigo_statusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.codigo_status));
    if Source.motivo_statusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.motivo_status));
    if Source.numero_protocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.numero_protocolo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeEventoToJson(Source: TDistribuicaoNfeEvento): string;
var
  JValue: TJSONValue;
begin
  JValue := TDistribuicaoNfeEventoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeEventoFromJsonValue(Source: TJSONValue): TDistribuicaoNfeEvento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDistribuicaoNfeEvento.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'created_at', JValue) then
      Result.created_at := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cpf_cnpj_autor', JValue) then
      Result.cpf_cnpj_autor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.chave_acesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.tipo_evento := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.data_evento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.numero_sequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'justificativa', JValue) then
      Result.justificativa := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_registro', JValue) then
      Result.data_registro := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.codigo_status := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.motivo_status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.numero_protocolo := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeEventoFromJson(Source: string): TDistribuicaoNfeEvento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDistribuicaoNfeEventoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeEventoListToJsonValue(Source: TDistribuicaoNfeEventoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TDistribuicaoNfeEventoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeEventoListToJson(Source: TDistribuicaoNfeEventoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TDistribuicaoNfeEventoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfeEventoListFromJsonValue(Source: TJSONValue): TDistribuicaoNfeEventoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDistribuicaoNfeEventoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TDistribuicaoNfeEventoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfeEventoListFromJson(Source: string): TDistribuicaoNfeEventoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDistribuicaoNfeEventoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TManifestacaoNfeListagemToJsonValue(Source: TManifestacaoNfeListagem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source._countHasValue then
      Json.ObjAddProp(Result, '@count', Self.IntegerToJsonValue(Source._count));
    if Assigned(Source.data) then
      Json.ObjAddProp(Result, 'data', Self.TDistribuicaoNfeEventoListToJsonValue(Source.data));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TManifestacaoNfeListagemToJson(Source: TManifestacaoNfeListagem): string;
var
  JValue: TJSONValue;
begin
  JValue := TManifestacaoNfeListagemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TManifestacaoNfeListagemFromJsonValue(Source: TJSONValue): TManifestacaoNfeListagem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TManifestacaoNfeListagem.Create;
  try
    if Json.ObjContains(Source, '@count', JValue) then
      Result._count := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data', JValue) then
      Result.data := Self.TDistribuicaoNfeEventoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TManifestacaoNfeListagemFromJson(Source: string): TManifestacaoNfeListagem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TManifestacaoNfeListagemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfePedidoManifestacaoToJsonValue(Source: TDistribuicaoNfePedidoManifestacao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cpf_cnpj', Self.stringToJsonValue(Source.cpf_cnpj));
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.chave_acesso));
    Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.tipo_evento));
    if Source.justificativaHasValue then
      Json.ObjAddProp(Result, 'justificativa', Self.stringToJsonValue(Source.justificativa));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfePedidoManifestacaoToJson(Source: TDistribuicaoNfePedidoManifestacao): string;
var
  JValue: TJSONValue;
begin
  JValue := TDistribuicaoNfePedidoManifestacaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDistribuicaoNfePedidoManifestacaoFromJsonValue(Source: TJSONValue): TDistribuicaoNfePedidoManifestacao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDistribuicaoNfePedidoManifestacao.Create;
  try
    if Json.ObjContains(Source, 'cpf_cnpj', JValue) then
      Result.cpf_cnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.chave_acesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.tipo_evento := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'justificativa', JValue) then
      Result.justificativa := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDistribuicaoNfePedidoManifestacaoFromJson(Source: string): TDistribuicaoNfePedidoManifestacao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDistribuicaoNfePedidoManifestacaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazIdeToJsonValue(Source: TNfcomSefazIde): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cUF', Self.IntegerToJsonValue(Source.cUF));
    if Source.tpAmbHasValue then
      Json.ObjAddProp(Result, 'tpAmb', Self.IntegerToJsonValue(Source.tpAmb));
    if Source.&modHasValue then
      Json.ObjAddProp(Result, 'mod', Self.IntegerToJsonValue(Source.&mod));
    Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.serie));
    Json.ObjAddProp(Result, 'nNF', Self.IntegerToJsonValue(Source.nNF));
    if Source.cNFHasValue then
      Json.ObjAddProp(Result, 'cNF', Self.stringToJsonValue(Source.cNF));
    if Source.cDVHasValue then
      Json.ObjAddProp(Result, 'cDV', Self.IntegerToJsonValue(Source.cDV));
    Json.ObjAddProp(Result, 'dhEmi', Self.TDateTimeToJsonValue(Source.dhEmi));
    Json.ObjAddProp(Result, 'tpEmis', Self.IntegerToJsonValue(Source.tpEmis));
    Json.ObjAddProp(Result, 'nSiteAutoriz', Self.IntegerToJsonValue(Source.nSiteAutoriz));
    Json.ObjAddProp(Result, 'cMunFG', Self.stringToJsonValue(Source.cMunFG));
    Json.ObjAddProp(Result, 'finNFCom', Self.IntegerToJsonValue(Source.finNFCom));
    Json.ObjAddProp(Result, 'tpFat', Self.IntegerToJsonValue(Source.tpFat));
    Json.ObjAddProp(Result, 'verProc', Self.stringToJsonValue(Source.verProc));
    if Source.indPrePagoHasValue then
      Json.ObjAddProp(Result, 'indPrePago', Self.IntegerToJsonValue(Source.indPrePago));
    if Source.indCessaoMeiosRedeHasValue then
      Json.ObjAddProp(Result, 'indCessaoMeiosRede', Self.IntegerToJsonValue(Source.indCessaoMeiosRede));
    if Source.indNotaEntradaHasValue then
      Json.ObjAddProp(Result, 'indNotaEntrada', Self.IntegerToJsonValue(Source.indNotaEntrada));
    if Source.dhContHasValue then
      Json.ObjAddProp(Result, 'dhCont', Self.TDateTimeToJsonValue(Source.dhCont));
    if Source.xJustHasValue then
      Json.ObjAddProp(Result, 'xJust', Self.stringToJsonValue(Source.xJust));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazIdeToJson(Source: TNfcomSefazIde): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazIdeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazIdeFromJsonValue(Source: TJSONValue): TNfcomSefazIde;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazIde.Create;
  try
    if Json.ObjContains(Source, 'cUF', JValue) then
      Result.cUF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpAmb', JValue) then
      Result.tpAmb := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&mod := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nNF', JValue) then
      Result.nNF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cNF', JValue) then
      Result.cNF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cDV', JValue) then
      Result.cDV := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhEmi', JValue) then
      Result.dhEmi := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpEmis', JValue) then
      Result.tpEmis := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nSiteAutoriz', JValue) then
      Result.nSiteAutoriz := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMunFG', JValue) then
      Result.cMunFG := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'finNFCom', JValue) then
      Result.finNFCom := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpFat', JValue) then
      Result.tpFat := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'verProc', JValue) then
      Result.verProc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indPrePago', JValue) then
      Result.indPrePago := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indCessaoMeiosRede', JValue) then
      Result.indCessaoMeiosRede := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indNotaEntrada', JValue) then
      Result.indNotaEntrada := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhCont', JValue) then
      Result.dhCont := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xJust', JValue) then
      Result.xJust := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazIdeFromJson(Source: string): TNfcomSefazIde;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazIdeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazEndeEmiToJsonValue(Source: TNfcomSefazEndeEmi): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xLgrHasValue then
      Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.xLgr));
    if Source.nroHasValue then
      Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.nro));
    if Source.xCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.xCpl));
    if Source.xBairroHasValue then
      Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.xBairro));
    if Source.cMunHasValue then
      Json.ObjAddProp(Result, 'cMun', Self.stringToJsonValue(Source.cMun));
    if Source.xMunHasValue then
      Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.xMun));
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.stringToJsonValue(Source.CEP));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    if Source.emailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazEndeEmiToJson(Source: TNfcomSefazEndeEmi): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazEndeEmiToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazEndeEmiFromJsonValue(Source: TJSONValue): TNfcomSefazEndeEmi;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazEndeEmi.Create;
  try
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.xLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.xCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.xBairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.cMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.xMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazEndeEmiFromJson(Source: string): TNfcomSefazEndeEmi;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazEndeEmiFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazEmitToJsonValue(Source: TNfcomSefazEmit): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.IEUFDestHasValue then
      Json.ObjAddProp(Result, 'IEUFDest', Self.stringToJsonValue(Source.IEUFDest));
    if Source.CRTHasValue then
      Json.ObjAddProp(Result, 'CRT', Self.IntegerToJsonValue(Source.CRT));
    if Source.xNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Source.xFantHasValue then
      Json.ObjAddProp(Result, 'xFant', Self.stringToJsonValue(Source.xFant));
    if Assigned(Source.enderEmit) then
      Json.ObjAddProp(Result, 'enderEmit', Self.TNfcomSefazEndeEmiToJsonValue(Source.enderEmit));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazEmitToJson(Source: TNfcomSefazEmit): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazEmitToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazEmitFromJsonValue(Source: TJSONValue): TNfcomSefazEmit;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazEmit.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IEUFDest', JValue) then
      Result.IEUFDest := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CRT', JValue) then
      Result.CRT := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xFant', JValue) then
      Result.xFant := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderEmit', JValue) then
      Result.enderEmit := Self.TNfcomSefazEndeEmiFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazEmitFromJson(Source: string): TNfcomSefazEmit;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazEmitFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazEndeDestToJsonValue(Source: TNfcomSefazEndeDest): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.xLgr));
    Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.nro));
    if Source.xCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.xCpl));
    Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.xBairro));
    Json.ObjAddProp(Result, 'cMun', Self.stringToJsonValue(Source.cMun));
    Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.xMun));
    Json.ObjAddProp(Result, 'CEP', Self.stringToJsonValue(Source.CEP));
    Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.cPaisHasValue then
      Json.ObjAddProp(Result, 'cPais', Self.stringToJsonValue(Source.cPais));
    if Source.xPaisHasValue then
      Json.ObjAddProp(Result, 'xPais', Self.stringToJsonValue(Source.xPais));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    if Source.emailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazEndeDestToJson(Source: TNfcomSefazEndeDest): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazEndeDestToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazEndeDestFromJsonValue(Source: TJSONValue): TNfcomSefazEndeDest;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazEndeDest.Create;
  try
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.xLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.xCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.xBairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.cMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.xMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPais', JValue) then
      Result.cPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xPais', JValue) then
      Result.xPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazEndeDestFromJson(Source: string): TNfcomSefazEndeDest;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazEndeDestFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazDestToJsonValue(Source: TNfcomSefazDest): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.idOutrosHasValue then
      Json.ObjAddProp(Result, 'idOutros', Self.stringToJsonValue(Source.idOutros));
    Json.ObjAddProp(Result, 'indIEDest', Self.IntegerToJsonValue(Source.indIEDest));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.IMHasValue then
      Json.ObjAddProp(Result, 'IM', Self.stringToJsonValue(Source.IM));
    Json.ObjAddProp(Result, 'enderDest', Self.TNfcomSefazEndeDestToJsonValue(Source.enderDest));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazDestToJson(Source: TNfcomSefazDest): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazDestToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazDestFromJsonValue(Source: TJSONValue): TNfcomSefazDest;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazDest.Create;
  try
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idOutros', JValue) then
      Result.idOutros := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indIEDest', JValue) then
      Result.indIEDest := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IM', JValue) then
      Result.IM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderDest', JValue) then
      Result.enderDest := Self.TNfcomSefazEndeDestFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazDestFromJson(Source: string): TNfcomSefazDest;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazDestFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazAssinanteToJsonValue(Source: TNfcomSefazAssinante): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'iCodAssinante', Self.stringToJsonValue(Source.iCodAssinante));
    Json.ObjAddProp(Result, 'tpAssinante', Self.IntegerToJsonValue(Source.tpAssinante));
    Json.ObjAddProp(Result, 'tpServUtil', Self.IntegerToJsonValue(Source.tpServUtil));
    if Source.nContratoHasValue then
      Json.ObjAddProp(Result, 'nContrato', Self.stringToJsonValue(Source.nContrato));
    if Source.dContratoIniHasValue then
      Json.ObjAddProp(Result, 'dContratoIni', Self.TDateToJsonValue(Source.dContratoIni));
    if Source.dContratoFimHasValue then
      Json.ObjAddProp(Result, 'dContratoFim', Self.TDateToJsonValue(Source.dContratoFim));
    if Source.NroTermPrincHasValue then
      Json.ObjAddProp(Result, 'NroTermPrinc', Self.stringToJsonValue(Source.NroTermPrinc));
    if Source.cUFPrincHasValue then
      Json.ObjAddProp(Result, 'cUFPrinc', Self.IntegerToJsonValue(Source.cUFPrinc));
    if Source.NroTermAdicHasValue then
      Json.ObjAddProp(Result, 'NroTermAdic', Self.stringToJsonValue(Source.NroTermAdic));
    if Source.cUFAdicHasValue then
      Json.ObjAddProp(Result, 'cUFAdic', Self.IntegerToJsonValue(Source.cUFAdic));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazAssinanteToJson(Source: TNfcomSefazAssinante): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazAssinanteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazAssinanteFromJsonValue(Source: TJSONValue): TNfcomSefazAssinante;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazAssinante.Create;
  try
    if Json.ObjContains(Source, 'iCodAssinante', JValue) then
      Result.iCodAssinante := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpAssinante', JValue) then
      Result.tpAssinante := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpServUtil', JValue) then
      Result.tpServUtil := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nContrato', JValue) then
      Result.nContrato := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dContratoIni', JValue) then
      Result.dContratoIni := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dContratoFim', JValue) then
      Result.dContratoFim := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'NroTermPrinc', JValue) then
      Result.NroTermPrinc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cUFPrinc', JValue) then
      Result.cUFPrinc := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'NroTermAdic', JValue) then
      Result.NroTermAdic := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cUFAdic', JValue) then
      Result.cUFAdic := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazAssinanteFromJson(Source: string): TNfcomSefazAssinante;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazAssinanteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGNFToJsonValue(Source: TNfcomSefazGNF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    Json.ObjAddProp(Result, 'mod', Self.IntegerToJsonValue(Source.&mod));
    Json.ObjAddProp(Result, 'serie', Self.stringToJsonValue(Source.serie));
    Json.ObjAddProp(Result, 'nNF', Self.IntegerToJsonValue(Source.nNF));
    Json.ObjAddProp(Result, 'CompetEmis', Self.stringToJsonValue(Source.CompetEmis));
    if Source.hash115HasValue then
      Json.ObjAddProp(Result, 'hash115', Self.stringToJsonValue(Source.hash115));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGNFToJson(Source: TNfcomSefazGNF): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazGNFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGNFFromJsonValue(Source: TJSONValue): TNfcomSefazGNF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazGNF.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&mod := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nNF', JValue) then
      Result.nNF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CompetEmis', JValue) then
      Result.CompetEmis := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'hash115', JValue) then
      Result.hash115 := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGNFFromJson(Source: string): TNfcomSefazGNF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazGNFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGSubToJsonValue(Source: TNfcomSefazGSub): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.chNFComHasValue then
      Json.ObjAddProp(Result, 'chNFCom', Self.stringToJsonValue(Source.chNFCom));
    if Assigned(Source.gNF) then
      Json.ObjAddProp(Result, 'gNF', Self.TNfcomSefazGNFToJsonValue(Source.gNF));
    Json.ObjAddProp(Result, 'motSub', Self.stringToJsonValue(Source.motSub));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGSubToJson(Source: TNfcomSefazGSub): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazGSubToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGSubFromJsonValue(Source: TJSONValue): TNfcomSefazGSub;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazGSub.Create;
  try
    if Json.ObjContains(Source, 'chNFCom', JValue) then
      Result.chNFCom := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'gNF', JValue) then
      Result.gNF := Self.TNfcomSefazGNFFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motSub', JValue) then
      Result.motSub := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGSubFromJson(Source: string): TNfcomSefazGSub;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazGSubFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGCofatGNFToJsonValue(Source: TNfcomSefazGCofatGNF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    Json.ObjAddProp(Result, 'mod', Self.IntegerToJsonValue(Source.&mod));
    Json.ObjAddProp(Result, 'serie', Self.stringToJsonValue(Source.serie));
    Json.ObjAddProp(Result, 'nNF', Self.IntegerToJsonValue(Source.nNF));
    Json.ObjAddProp(Result, 'CompetEmis', Self.stringToJsonValue(Source.CompetEmis));
    if Source.hash115HasValue then
      Json.ObjAddProp(Result, 'hash115', Self.stringToJsonValue(Source.hash115));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGCofatGNFToJson(Source: TNfcomSefazGCofatGNF): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazGCofatGNFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGCofatGNFFromJsonValue(Source: TJSONValue): TNfcomSefazGCofatGNF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazGCofatGNF.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&mod := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nNF', JValue) then
      Result.nNF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CompetEmis', JValue) then
      Result.CompetEmis := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'hash115', JValue) then
      Result.hash115 := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGCofatGNFFromJson(Source: string): TNfcomSefazGCofatGNF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazGCofatGNFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGCofatToJsonValue(Source: TNfcomSefazGCofat): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.chNFComLocalHasValue then
      Json.ObjAddProp(Result, 'chNFComLocal', Self.stringToJsonValue(Source.chNFComLocal));
    if Assigned(Source.gNF) then
      Json.ObjAddProp(Result, 'gNF', Self.TNfcomSefazGCofatGNFToJsonValue(Source.gNF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGCofatToJson(Source: TNfcomSefazGCofat): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazGCofatToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGCofatFromJsonValue(Source: TJSONValue): TNfcomSefazGCofat;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazGCofat.Create;
  try
    if Json.ObjContains(Source, 'chNFComLocal', JValue) then
      Result.chNFComLocal := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'gNF', JValue) then
      Result.gNF := Self.TNfcomSefazGCofatGNFFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGCofatFromJson(Source: string): TNfcomSefazGCofat;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazGCofatFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazProdToJsonValue(Source: TNfcomSefazProd): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cProd', Self.stringToJsonValue(Source.cProd));
    Json.ObjAddProp(Result, 'xProd', Self.stringToJsonValue(Source.xProd));
    Json.ObjAddProp(Result, 'cClass', Self.stringToJsonValue(Source.cClass));
    if Source.CFOPHasValue then
      Json.ObjAddProp(Result, 'CFOP', Self.stringToJsonValue(Source.CFOP));
    if Source.CNPJLDHasValue then
      Json.ObjAddProp(Result, 'CNPJLD', Self.stringToJsonValue(Source.CNPJLD));
    Json.ObjAddProp(Result, 'uMed', Self.IntegerToJsonValue(Source.uMed));
    Json.ObjAddProp(Result, 'qFaturada', Self.DoubleToJsonValue(Source.qFaturada));
    Json.ObjAddProp(Result, 'vItem', Self.DoubleToJsonValue(Source.vItem));
    if Source.vDescHasValue then
      Json.ObjAddProp(Result, 'vDesc', Self.DoubleToJsonValue(Source.vDesc));
    if Source.vOutroHasValue then
      Json.ObjAddProp(Result, 'vOutro', Self.DoubleToJsonValue(Source.vOutro));
    Json.ObjAddProp(Result, 'vProd', Self.DoubleToJsonValue(Source.vProd));
    if Source.dExpiracaoHasValue then
      Json.ObjAddProp(Result, 'dExpiracao', Self.TDateToJsonValue(Source.dExpiracao));
    if Source.indDevolucaoHasValue then
      Json.ObjAddProp(Result, 'indDevolucao', Self.IntegerToJsonValue(Source.indDevolucao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazProdToJson(Source: TNfcomSefazProd): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazProdToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazProdFromJsonValue(Source: TJSONValue): TNfcomSefazProd;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazProd.Create;
  try
    if Json.ObjContains(Source, 'cProd', JValue) then
      Result.cProd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xProd', JValue) then
      Result.xProd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cClass', JValue) then
      Result.cClass := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CFOP', JValue) then
      Result.CFOP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJLD', JValue) then
      Result.CNPJLD := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uMed', JValue) then
      Result.uMed := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qFaturada', JValue) then
      Result.qFaturada := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vItem', JValue) then
      Result.vItem := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDesc', JValue) then
      Result.vDesc := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vOutro', JValue) then
      Result.vOutro := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vProd', JValue) then
      Result.vProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dExpiracao', JValue) then
      Result.dExpiracao := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indDevolucao', JValue) then
      Result.indDevolucao := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazProdFromJson(Source: string): TNfcomSefazProd;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazProdFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazICMS00ToJsonValue(Source: TNfcomSefazICMS00): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.pICMS));
    Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.vICMS));
    if Source.pFCPHasValue then
      Json.ObjAddProp(Result, 'pFCP', Self.DoubleToJsonValue(Source.pFCP));
    if Source.vFCPHasValue then
      Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.vFCP));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazICMS00ToJson(Source: TNfcomSefazICMS00): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazICMS00ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazICMS00FromJsonValue(Source: TJSONValue): TNfcomSefazICMS00;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazICMS00.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.pICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.vICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCP', JValue) then
      Result.pFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.vFCP := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazICMS00FromJson(Source: string): TNfcomSefazICMS00;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazICMS00FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazICMS20ToJsonValue(Source: TNfcomSefazICMS20): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'pRedBC', Self.DoubleToJsonValue(Source.pRedBC));
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.pICMS));
    Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.vICMS));
    if Source.vICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.vICMSDeson));
    if Source.cBenefHasValue then
      Json.ObjAddProp(Result, 'cBenef', Self.stringToJsonValue(Source.cBenef));
    if Source.pFCPHasValue then
      Json.ObjAddProp(Result, 'pFCP', Self.DoubleToJsonValue(Source.pFCP));
    if Source.vFCPHasValue then
      Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.vFCP));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazICMS20ToJson(Source: TNfcomSefazICMS20): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazICMS20ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazICMS20FromJsonValue(Source: TJSONValue): TNfcomSefazICMS20;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazICMS20.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBC', JValue) then
      Result.pRedBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.pICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.vICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.vICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cBenef', JValue) then
      Result.cBenef := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCP', JValue) then
      Result.pFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.vFCP := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazICMS20FromJson(Source: string): TNfcomSefazICMS20;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazICMS20FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazICMS40ToJsonValue(Source: TNfcomSefazICMS40): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.vICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.vICMSDeson));
    if Source.cBenefHasValue then
      Json.ObjAddProp(Result, 'cBenef', Self.stringToJsonValue(Source.cBenef));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazICMS40ToJson(Source: TNfcomSefazICMS40): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazICMS40ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazICMS40FromJsonValue(Source: TJSONValue): TNfcomSefazICMS40;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazICMS40.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.vICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cBenef', JValue) then
      Result.cBenef := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazICMS40FromJson(Source: string): TNfcomSefazICMS40;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazICMS40FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazICMS51ToJsonValue(Source: TNfcomSefazICMS51): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.vICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.vICMSDeson));
    if Source.cBenefHasValue then
      Json.ObjAddProp(Result, 'cBenef', Self.stringToJsonValue(Source.cBenef));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazICMS51ToJson(Source: TNfcomSefazICMS51): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazICMS51ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazICMS51FromJsonValue(Source: TJSONValue): TNfcomSefazICMS51;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazICMS51.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.vICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cBenef', JValue) then
      Result.cBenef := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazICMS51FromJson(Source: string): TNfcomSefazICMS51;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazICMS51FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazICMS90ToJsonValue(Source: TNfcomSefazICMS90): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.vBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    if Source.pICMSHasValue then
      Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.pICMS));
    if Source.vICMSHasValue then
      Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.vICMS));
    if Source.vICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.vICMSDeson));
    if Source.cBenefHasValue then
      Json.ObjAddProp(Result, 'cBenef', Self.stringToJsonValue(Source.cBenef));
    if Source.pFCPHasValue then
      Json.ObjAddProp(Result, 'pFCP', Self.DoubleToJsonValue(Source.pFCP));
    if Source.vFCPHasValue then
      Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.vFCP));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazICMS90ToJson(Source: TNfcomSefazICMS90): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazICMS90ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazICMS90FromJsonValue(Source: TJSONValue): TNfcomSefazICMS90;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazICMS90.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.pICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.vICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.vICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cBenef', JValue) then
      Result.cBenef := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCP', JValue) then
      Result.pFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.vFCP := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazICMS90FromJson(Source: string): TNfcomSefazICMS90;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazICMS90FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazICMSSNToJsonValue(Source: TNfcomSefazICMSSN): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'indSN', Self.IntegerToJsonValue(Source.indSN));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazICMSSNToJson(Source: TNfcomSefazICMSSN): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazICMSSNToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazICMSSNFromJsonValue(Source: TJSONValue): TNfcomSefazICMSSN;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazICMSSN.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indSN', JValue) then
      Result.indSN := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazICMSSNFromJson(Source: string): TNfcomSefazICMSSN;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazICMSSNFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazICMSUFDestToJsonValue(Source: TNfcomSefazICMSUFDest): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.cUFDestHasValue then
      Json.ObjAddProp(Result, 'cUFDest', Self.IntegerToJsonValue(Source.cUFDest));
    Json.ObjAddProp(Result, 'vBCUFDest', Self.DoubleToJsonValue(Source.vBCUFDest));
    Json.ObjAddProp(Result, 'pFCPUFDest', Self.DoubleToJsonValue(Source.pFCPUFDest));
    Json.ObjAddProp(Result, 'pICMSUFDest', Self.DoubleToJsonValue(Source.pICMSUFDest));
    Json.ObjAddProp(Result, 'vFCPUFDest', Self.DoubleToJsonValue(Source.vFCPUFDest));
    Json.ObjAddProp(Result, 'vICMSUFDest', Self.DoubleToJsonValue(Source.vICMSUFDest));
    Json.ObjAddProp(Result, 'vICMSUFEmi', Self.DoubleToJsonValue(Source.vICMSUFEmi));
    if Source.cBenefUFDestHasValue then
      Json.ObjAddProp(Result, 'cBenefUFDest', Self.stringToJsonValue(Source.cBenefUFDest));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazICMSUFDestToJson(Source: TNfcomSefazICMSUFDest): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazICMSUFDestToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazICMSUFDestFromJsonValue(Source: TJSONValue): TNfcomSefazICMSUFDest;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazICMSUFDest.Create;
  try
    if Json.ObjContains(Source, 'cUFDest', JValue) then
      Result.cUFDest := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCUFDest', JValue) then
      Result.vBCUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPUFDest', JValue) then
      Result.pFCPUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSUFDest', JValue) then
      Result.pICMSUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPUFDest', JValue) then
      Result.vFCPUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSUFDest', JValue) then
      Result.vICMSUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSUFEmi', JValue) then
      Result.vICMSUFEmi := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cBenefUFDest', JValue) then
      Result.cBenefUFDest := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazICMSUFDestFromJson(Source: string): TNfcomSefazICMSUFDest;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazICMSUFDestFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazICMSUFDestListToJsonValue(Source: TNfcomSefazICMSUFDestList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfcomSefazICMSUFDestToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazICMSUFDestListToJson(Source: TNfcomSefazICMSUFDestList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazICMSUFDestListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazICMSUFDestListFromJsonValue(Source: TJSONValue): TNfcomSefazICMSUFDestList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazICMSUFDestList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfcomSefazICMSUFDestFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazICMSUFDestListFromJson(Source: string): TNfcomSefazICMSUFDestList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazICMSUFDestListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazPISToJsonValue(Source: TNfcomSefazPIS): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'pPIS', Self.DoubleToJsonValue(Source.pPIS));
    Json.ObjAddProp(Result, 'vPIS', Self.DoubleToJsonValue(Source.vPIS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazPISToJson(Source: TNfcomSefazPIS): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazPISToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazPISFromJsonValue(Source: TJSONValue): TNfcomSefazPIS;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazPIS.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pPIS', JValue) then
      Result.pPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPIS', JValue) then
      Result.vPIS := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazPISFromJson(Source: string): TNfcomSefazPIS;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazPISFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazCOFINSToJsonValue(Source: TNfcomSefazCOFINS): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'pCOFINS', Self.DoubleToJsonValue(Source.pCOFINS));
    Json.ObjAddProp(Result, 'vCOFINS', Self.DoubleToJsonValue(Source.vCOFINS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazCOFINSToJson(Source: TNfcomSefazCOFINS): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazCOFINSToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazCOFINSFromJsonValue(Source: TJSONValue): TNfcomSefazCOFINS;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazCOFINS.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pCOFINS', JValue) then
      Result.pCOFINS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCOFINS', JValue) then
      Result.vCOFINS := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazCOFINSFromJson(Source: string): TNfcomSefazCOFINS;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazCOFINSFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazFUSTToJsonValue(Source: TNfcomSefazFUST): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'pFUST', Self.DoubleToJsonValue(Source.pFUST));
    Json.ObjAddProp(Result, 'vFUST', Self.DoubleToJsonValue(Source.vFUST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazFUSTToJson(Source: TNfcomSefazFUST): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazFUSTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazFUSTFromJsonValue(Source: TJSONValue): TNfcomSefazFUST;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazFUST.Create;
  try
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFUST', JValue) then
      Result.pFUST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFUST', JValue) then
      Result.vFUST := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazFUSTFromJson(Source: string): TNfcomSefazFUST;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazFUSTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazFUNTTELToJsonValue(Source: TNfcomSefazFUNTTEL): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'pFUNTTEL', Self.DoubleToJsonValue(Source.pFUNTTEL));
    Json.ObjAddProp(Result, 'vFUNTTEL', Self.DoubleToJsonValue(Source.vFUNTTEL));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazFUNTTELToJson(Source: TNfcomSefazFUNTTEL): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazFUNTTELToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazFUNTTELFromJsonValue(Source: TJSONValue): TNfcomSefazFUNTTEL;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazFUNTTEL.Create;
  try
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFUNTTEL', JValue) then
      Result.pFUNTTEL := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFUNTTEL', JValue) then
      Result.vFUNTTEL := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazFUNTTELFromJson(Source: string): TNfcomSefazFUNTTEL;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazFUNTTELFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazRetTribToJsonValue(Source: TNfcomSefazRetTrib): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vRetPIS', Self.DoubleToJsonValue(Source.vRetPIS));
    Json.ObjAddProp(Result, 'vRetCofins', Self.DoubleToJsonValue(Source.vRetCofins));
    Json.ObjAddProp(Result, 'vRetCSLL', Self.DoubleToJsonValue(Source.vRetCSLL));
    Json.ObjAddProp(Result, 'vBCIRRF', Self.DoubleToJsonValue(Source.vBCIRRF));
    Json.ObjAddProp(Result, 'vIRRF', Self.DoubleToJsonValue(Source.vIRRF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazRetTribToJson(Source: TNfcomSefazRetTrib): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazRetTribToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazRetTribFromJsonValue(Source: TJSONValue): TNfcomSefazRetTrib;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazRetTrib.Create;
  try
    if Json.ObjContains(Source, 'vRetPIS', JValue) then
      Result.vRetPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vRetCofins', JValue) then
      Result.vRetCofins := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vRetCSLL', JValue) then
      Result.vRetCSLL := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCIRRF', JValue) then
      Result.vBCIRRF := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vIRRF', JValue) then
      Result.vIRRF := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazRetTribFromJson(Source: string): TNfcomSefazRetTrib;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazRetTribFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazImpostoToJsonValue(Source: TNfcomSefazImposto): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.ICMS00) then
      Json.ObjAddProp(Result, 'ICMS00', Self.TNfcomSefazICMS00ToJsonValue(Source.ICMS00));
    if Assigned(Source.ICMS20) then
      Json.ObjAddProp(Result, 'ICMS20', Self.TNfcomSefazICMS20ToJsonValue(Source.ICMS20));
    if Assigned(Source.ICMS40) then
      Json.ObjAddProp(Result, 'ICMS40', Self.TNfcomSefazICMS40ToJsonValue(Source.ICMS40));
    if Assigned(Source.ICMS51) then
      Json.ObjAddProp(Result, 'ICMS51', Self.TNfcomSefazICMS51ToJsonValue(Source.ICMS51));
    if Assigned(Source.ICMS90) then
      Json.ObjAddProp(Result, 'ICMS90', Self.TNfcomSefazICMS90ToJsonValue(Source.ICMS90));
    if Assigned(Source.ICMSSN) then
      Json.ObjAddProp(Result, 'ICMSSN', Self.TNfcomSefazICMSSNToJsonValue(Source.ICMSSN));
    if Assigned(Source.ICMSUFDest) then
      Json.ObjAddProp(Result, 'ICMSUFDest', Self.TNfcomSefazICMSUFDestListToJsonValue(Source.ICMSUFDest));
    if Source.indSemCSTHasValue then
      Json.ObjAddProp(Result, 'indSemCST', Self.IntegerToJsonValue(Source.indSemCST));
    if Assigned(Source.PIS) then
      Json.ObjAddProp(Result, 'PIS', Self.TNfcomSefazPISToJsonValue(Source.PIS));
    if Assigned(Source.COFINS) then
      Json.ObjAddProp(Result, 'COFINS', Self.TNfcomSefazCOFINSToJsonValue(Source.COFINS));
    if Assigned(Source.FUST) then
      Json.ObjAddProp(Result, 'FUST', Self.TNfcomSefazFUSTToJsonValue(Source.FUST));
    if Assigned(Source.FUNTTEL) then
      Json.ObjAddProp(Result, 'FUNTTEL', Self.TNfcomSefazFUNTTELToJsonValue(Source.FUNTTEL));
    if Assigned(Source.retTrib) then
      Json.ObjAddProp(Result, 'retTrib', Self.TNfcomSefazRetTribToJsonValue(Source.retTrib));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazImpostoToJson(Source: TNfcomSefazImposto): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazImpostoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazImpostoFromJsonValue(Source: TJSONValue): TNfcomSefazImposto;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazImposto.Create;
  try
    if Json.ObjContains(Source, 'ICMS00', JValue) then
      Result.ICMS00 := Self.TNfcomSefazICMS00FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS20', JValue) then
      Result.ICMS20 := Self.TNfcomSefazICMS20FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS40', JValue) then
      Result.ICMS40 := Self.TNfcomSefazICMS40FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS51', JValue) then
      Result.ICMS51 := Self.TNfcomSefazICMS51FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS90', JValue) then
      Result.ICMS90 := Self.TNfcomSefazICMS90FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSSN', JValue) then
      Result.ICMSSN := Self.TNfcomSefazICMSSNFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSUFDest', JValue) then
      Result.ICMSUFDest := Self.TNfcomSefazICMSUFDestListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indSemCST', JValue) then
      Result.indSemCST := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PIS', JValue) then
      Result.PIS := Self.TNfcomSefazPISFromJsonValue(JValue);
    if Json.ObjContains(Source, 'COFINS', JValue) then
      Result.COFINS := Self.TNfcomSefazCOFINSFromJsonValue(JValue);
    if Json.ObjContains(Source, 'FUST', JValue) then
      Result.FUST := Self.TNfcomSefazFUSTFromJsonValue(JValue);
    if Json.ObjContains(Source, 'FUNTTEL', JValue) then
      Result.FUNTTEL := Self.TNfcomSefazFUNTTELFromJsonValue(JValue);
    if Json.ObjContains(Source, 'retTrib', JValue) then
      Result.retTrib := Self.TNfcomSefazRetTribFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazImpostoFromJson(Source: string): TNfcomSefazImposto;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazImpostoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGProcToJsonValue(Source: TNfcomSefazGProc): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpProc', Self.IntegerToJsonValue(Source.tpProc));
    Json.ObjAddProp(Result, 'nProcesso', Self.stringToJsonValue(Source.nProcesso));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGProcToJson(Source: TNfcomSefazGProc): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazGProcToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGProcFromJsonValue(Source: TJSONValue): TNfcomSefazGProc;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazGProc.Create;
  try
    if Json.ObjContains(Source, 'tpProc', JValue) then
      Result.tpProc := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nProcesso', JValue) then
      Result.nProcesso := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGProcFromJson(Source: string): TNfcomSefazGProc;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazGProcFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGProcListToJsonValue(Source: TNfcomSefazGProcList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfcomSefazGProcToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGProcListToJson(Source: TNfcomSefazGProcList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazGProcListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGProcListFromJsonValue(Source: TJSONValue): TNfcomSefazGProcList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazGProcList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfcomSefazGProcFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGProcListFromJson(Source: string): TNfcomSefazGProcList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazGProcListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGProcRefToJsonValue(Source: TNfcomSefazGProcRef): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vItem', Self.DoubleToJsonValue(Source.vItem));
    Json.ObjAddProp(Result, 'qFaturada', Self.DoubleToJsonValue(Source.qFaturada));
    Json.ObjAddProp(Result, 'vProd', Self.DoubleToJsonValue(Source.vProd));
    if Source.vDescHasValue then
      Json.ObjAddProp(Result, 'vDesc', Self.DoubleToJsonValue(Source.vDesc));
    if Source.vOutroHasValue then
      Json.ObjAddProp(Result, 'vOutro', Self.DoubleToJsonValue(Source.vOutro));
    if Source.indDevolucaoHasValue then
      Json.ObjAddProp(Result, 'indDevolucao', Self.IntegerToJsonValue(Source.indDevolucao));
    if Source.vBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    if Source.pICMSHasValue then
      Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.pICMS));
    if Source.vICMSHasValue then
      Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.vICMS));
    if Source.vPISHasValue then
      Json.ObjAddProp(Result, 'vPIS', Self.DoubleToJsonValue(Source.vPIS));
    if Source.vCOFINSHasValue then
      Json.ObjAddProp(Result, 'vCOFINS', Self.DoubleToJsonValue(Source.vCOFINS));
    if Source.vFCPHasValue then
      Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.vFCP));
    Json.ObjAddProp(Result, 'gProc', Self.TNfcomSefazGProcListToJsonValue(Source.gProc));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGProcRefToJson(Source: TNfcomSefazGProcRef): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazGProcRefToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGProcRefFromJsonValue(Source: TJSONValue): TNfcomSefazGProcRef;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazGProcRef.Create;
  try
    if Json.ObjContains(Source, 'vItem', JValue) then
      Result.vItem := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qFaturada', JValue) then
      Result.qFaturada := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vProd', JValue) then
      Result.vProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDesc', JValue) then
      Result.vDesc := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vOutro', JValue) then
      Result.vOutro := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indDevolucao', JValue) then
      Result.indDevolucao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.pICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.vICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPIS', JValue) then
      Result.vPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCOFINS', JValue) then
      Result.vCOFINS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.vFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'gProc', JValue) then
      Result.gProc := Self.TNfcomSefazGProcListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGProcRefFromJson(Source: string): TNfcomSefazGProcRef;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazGProcRefFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGRessarcToJsonValue(Source: TNfcomSefazGRessarc): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpRessarc', Self.IntegerToJsonValue(Source.tpRessarc));
    Json.ObjAddProp(Result, 'dRef', Self.TDateToJsonValue(Source.dRef));
    if Source.nProcessoHasValue then
      Json.ObjAddProp(Result, 'nProcesso', Self.stringToJsonValue(Source.nProcesso));
    if Source.nProtReclamaHasValue then
      Json.ObjAddProp(Result, 'nProtReclama', Self.stringToJsonValue(Source.nProtReclama));
    if Source.xObsHasValue then
      Json.ObjAddProp(Result, 'xObs', Self.stringToJsonValue(Source.xObs));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGRessarcToJson(Source: TNfcomSefazGRessarc): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazGRessarcToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGRessarcFromJsonValue(Source: TJSONValue): TNfcomSefazGRessarc;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazGRessarc.Create;
  try
    if Json.ObjContains(Source, 'tpRessarc', JValue) then
      Result.tpRessarc := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dRef', JValue) then
      Result.dRef := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nProcesso', JValue) then
      Result.nProcesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nProtReclama', JValue) then
      Result.nProtReclama := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xObs', JValue) then
      Result.xObs := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGRessarcFromJson(Source: string): TNfcomSefazGRessarc;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazGRessarcFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazDetToJsonValue(Source: TNfcomSefazDet): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nItem', Self.IntegerToJsonValue(Source.nItem));
    if Source.chNFComAntHasValue then
      Json.ObjAddProp(Result, 'chNFComAnt', Self.stringToJsonValue(Source.chNFComAnt));
    if Source.nItemAntHasValue then
      Json.ObjAddProp(Result, 'nItemAnt', Self.stringToJsonValue(Source.nItemAnt));
    if Source.indNFComAntPapelFatCentralHasValue then
      Json.ObjAddProp(Result, 'indNFComAntPapelFatCentral', Self.IntegerToJsonValue(Source.indNFComAntPapelFatCentral));
    Json.ObjAddProp(Result, 'prod', Self.TNfcomSefazProdToJsonValue(Source.prod));
    Json.ObjAddProp(Result, 'imposto', Self.TNfcomSefazImpostoToJsonValue(Source.imposto));
    if Assigned(Source.gProcRef) then
      Json.ObjAddProp(Result, 'gProcRef', Self.TNfcomSefazGProcRefToJsonValue(Source.gProcRef));
    if Assigned(Source.gRessarc) then
      Json.ObjAddProp(Result, 'gRessarc', Self.TNfcomSefazGRessarcToJsonValue(Source.gRessarc));
    if Source.infAdProdHasValue then
      Json.ObjAddProp(Result, 'infAdProd', Self.stringToJsonValue(Source.infAdProd));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazDetToJson(Source: TNfcomSefazDet): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazDetToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazDetFromJsonValue(Source: TJSONValue): TNfcomSefazDet;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazDet.Create;
  try
    if Json.ObjContains(Source, 'nItem', JValue) then
      Result.nItem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chNFComAnt', JValue) then
      Result.chNFComAnt := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nItemAnt', JValue) then
      Result.nItemAnt := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indNFComAntPapelFatCentral', JValue) then
      Result.indNFComAntPapelFatCentral := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prod', JValue) then
      Result.prod := Self.TNfcomSefazProdFromJsonValue(JValue);
    if Json.ObjContains(Source, 'imposto', JValue) then
      Result.imposto := Self.TNfcomSefazImpostoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'gProcRef', JValue) then
      Result.gProcRef := Self.TNfcomSefazGProcRefFromJsonValue(JValue);
    if Json.ObjContains(Source, 'gRessarc', JValue) then
      Result.gRessarc := Self.TNfcomSefazGRessarcFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infAdProd', JValue) then
      Result.infAdProd := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazDetFromJson(Source: string): TNfcomSefazDet;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazDetFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazDetListToJsonValue(Source: TNfcomSefazDetList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfcomSefazDetToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazDetListToJson(Source: TNfcomSefazDetList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazDetListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazDetListFromJsonValue(Source: TJSONValue): TNfcomSefazDetList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazDetList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfcomSefazDetFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazDetListFromJson(Source: string): TNfcomSefazDetList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazDetListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazICMSTotToJsonValue(Source: TNfcomSefazICMSTot): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.vICMS));
    Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.vICMSDeson));
    Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.vFCP));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazICMSTotToJson(Source: TNfcomSefazICMSTot): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazICMSTotToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazICMSTotFromJsonValue(Source: TJSONValue): TNfcomSefazICMSTot;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazICMSTot.Create;
  try
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.vICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.vICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.vFCP := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazICMSTotFromJson(Source: string): TNfcomSefazICMSTot;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazICMSTotFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazVRetTribTotToJsonValue(Source: TNfcomSefazVRetTribTot): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vRetPIS', Self.DoubleToJsonValue(Source.vRetPIS));
    Json.ObjAddProp(Result, 'vRetCofins', Self.DoubleToJsonValue(Source.vRetCofins));
    Json.ObjAddProp(Result, 'vRetCSLL', Self.DoubleToJsonValue(Source.vRetCSLL));
    Json.ObjAddProp(Result, 'vIRRF', Self.DoubleToJsonValue(Source.vIRRF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazVRetTribTotToJson(Source: TNfcomSefazVRetTribTot): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazVRetTribTotToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazVRetTribTotFromJsonValue(Source: TJSONValue): TNfcomSefazVRetTribTot;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazVRetTribTot.Create;
  try
    if Json.ObjContains(Source, 'vRetPIS', JValue) then
      Result.vRetPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vRetCofins', JValue) then
      Result.vRetCofins := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vRetCSLL', JValue) then
      Result.vRetCSLL := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vIRRF', JValue) then
      Result.vIRRF := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazVRetTribTotFromJson(Source: string): TNfcomSefazVRetTribTot;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazVRetTribTotFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazTotalToJsonValue(Source: TNfcomSefazTotal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vProd', Self.DoubleToJsonValue(Source.vProd));
    Json.ObjAddProp(Result, 'ICMSTot', Self.TNfcomSefazICMSTotToJsonValue(Source.ICMSTot));
    Json.ObjAddProp(Result, 'vCOFINS', Self.DoubleToJsonValue(Source.vCOFINS));
    Json.ObjAddProp(Result, 'vPIS', Self.DoubleToJsonValue(Source.vPIS));
    Json.ObjAddProp(Result, 'vFUNTTEL', Self.DoubleToJsonValue(Source.vFUNTTEL));
    Json.ObjAddProp(Result, 'vFUST', Self.DoubleToJsonValue(Source.vFUST));
    Json.ObjAddProp(Result, 'vRetTribTot', Self.TNfcomSefazVRetTribTotToJsonValue(Source.vRetTribTot));
    Json.ObjAddProp(Result, 'vDesc', Self.DoubleToJsonValue(Source.vDesc));
    Json.ObjAddProp(Result, 'vOutro', Self.DoubleToJsonValue(Source.vOutro));
    Json.ObjAddProp(Result, 'vNF', Self.DoubleToJsonValue(Source.vNF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazTotalToJson(Source: TNfcomSefazTotal): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazTotalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazTotalFromJsonValue(Source: TJSONValue): TNfcomSefazTotal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazTotal.Create;
  try
    if Json.ObjContains(Source, 'vProd', JValue) then
      Result.vProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSTot', JValue) then
      Result.ICMSTot := Self.TNfcomSefazICMSTotFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCOFINS', JValue) then
      Result.vCOFINS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPIS', JValue) then
      Result.vPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFUNTTEL', JValue) then
      Result.vFUNTTEL := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFUST', JValue) then
      Result.vFUST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vRetTribTot', JValue) then
      Result.vRetTribTot := Self.TNfcomSefazVRetTribTotFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDesc', JValue) then
      Result.vDesc := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vOutro', JValue) then
      Result.vOutro := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vNF', JValue) then
      Result.vNF := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazTotalFromJson(Source: string): TNfcomSefazTotal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazTotalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGFidelidadeToJsonValue(Source: TNfcomSefazGFidelidade): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'qtdSaldoPts', Self.stringToJsonValue(Source.qtdSaldoPts));
    Json.ObjAddProp(Result, 'dRefSaldoPts', Self.TDateToJsonValue(Source.dRefSaldoPts));
    Json.ObjAddProp(Result, 'qtdPtsResg', Self.stringToJsonValue(Source.qtdPtsResg));
    Json.ObjAddProp(Result, 'dRefResgPts', Self.TDateToJsonValue(Source.dRefResgPts));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGFidelidadeToJson(Source: TNfcomSefazGFidelidade): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazGFidelidadeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGFidelidadeFromJsonValue(Source: TJSONValue): TNfcomSefazGFidelidade;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazGFidelidade.Create;
  try
    if Json.ObjContains(Source, 'qtdSaldoPts', JValue) then
      Result.qtdSaldoPts := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dRefSaldoPts', JValue) then
      Result.dRefSaldoPts := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qtdPtsResg', JValue) then
      Result.qtdPtsResg := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dRefResgPts', JValue) then
      Result.dRefResgPts := Self.TDateFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGFidelidadeFromJson(Source: string): TNfcomSefazGFidelidade;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazGFidelidadeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGPIXToJsonValue(Source: TNfcomSefazGPIX): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'urlQRCodePIX', Self.stringToJsonValue(Source.urlQRCodePIX));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGPIXToJson(Source: TNfcomSefazGPIX): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazGPIXToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGPIXFromJsonValue(Source: TJSONValue): TNfcomSefazGPIX;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazGPIX.Create;
  try
    if Json.ObjContains(Source, 'urlQRCodePIX', JValue) then
      Result.urlQRCodePIX := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGPIXFromJson(Source: string): TNfcomSefazGPIX;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazGPIXFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGFatToJsonValue(Source: TNfcomSefazGFat): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CompetFat', Self.stringToJsonValue(Source.CompetFat));
    Json.ObjAddProp(Result, 'dVencFat', Self.TDateToJsonValue(Source.dVencFat));
    if Source.dPerUsoIniHasValue then
      Json.ObjAddProp(Result, 'dPerUsoIni', Self.TDateToJsonValue(Source.dPerUsoIni));
    if Source.dPerUsoFimHasValue then
      Json.ObjAddProp(Result, 'dPerUsoFim', Self.TDateToJsonValue(Source.dPerUsoFim));
    Json.ObjAddProp(Result, 'codBarras', Self.stringToJsonValue(Source.codBarras));
    if Source.codDebAutoHasValue then
      Json.ObjAddProp(Result, 'codDebAuto', Self.stringToJsonValue(Source.codDebAuto));
    if Source.codBancoHasValue then
      Json.ObjAddProp(Result, 'codBanco', Self.stringToJsonValue(Source.codBanco));
    if Source.codAgenciaHasValue then
      Json.ObjAddProp(Result, 'codAgencia', Self.stringToJsonValue(Source.codAgencia));
    if Assigned(Source.enderCorresp) then
      Json.ObjAddProp(Result, 'enderCorresp', Self.TNfcomSefazEndeEmiToJsonValue(Source.enderCorresp));
    if Assigned(Source.gPIX) then
      Json.ObjAddProp(Result, 'gPIX', Self.TNfcomSefazGPIXToJsonValue(Source.gPIX));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGFatToJson(Source: TNfcomSefazGFat): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazGFatToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGFatFromJsonValue(Source: TJSONValue): TNfcomSefazGFat;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazGFat.Create;
  try
    if Json.ObjContains(Source, 'CompetFat', JValue) then
      Result.CompetFat := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dVencFat', JValue) then
      Result.dVencFat := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dPerUsoIni', JValue) then
      Result.dPerUsoIni := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dPerUsoFim', JValue) then
      Result.dPerUsoFim := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codBarras', JValue) then
      Result.codBarras := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codDebAuto', JValue) then
      Result.codDebAuto := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codBanco', JValue) then
      Result.codBanco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codAgencia', JValue) then
      Result.codAgencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderCorresp', JValue) then
      Result.enderCorresp := Self.TNfcomSefazEndeEmiFromJsonValue(JValue);
    if Json.ObjContains(Source, 'gPIX', JValue) then
      Result.gPIX := Self.TNfcomSefazGPIXFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGFatFromJson(Source: string): TNfcomSefazGFat;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazGFatFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGFatCentralToJsonValue(Source: TNfcomSefazGFatCentral): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    Json.ObjAddProp(Result, 'cUF', Self.IntegerToJsonValue(Source.cUF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGFatCentralToJson(Source: TNfcomSefazGFatCentral): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazGFatCentralToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazGFatCentralFromJsonValue(Source: TJSONValue): TNfcomSefazGFatCentral;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazGFatCentral.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cUF', JValue) then
      Result.cUF := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazGFatCentralFromJson(Source: string): TNfcomSefazGFatCentral;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazGFatCentralFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazAutXMLToJsonValue(Source: TNfcomSefazAutXML): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazAutXMLToJson(Source: TNfcomSefazAutXML): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazAutXMLToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazAutXMLFromJsonValue(Source: TJSONValue): TNfcomSefazAutXML;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazAutXML.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazAutXMLFromJson(Source: string): TNfcomSefazAutXML;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazAutXMLFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazAutXMLListToJsonValue(Source: TNfcomSefazAutXMLList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfcomSefazAutXMLToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazAutXMLListToJson(Source: TNfcomSefazAutXMLList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazAutXMLListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazAutXMLListFromJsonValue(Source: TJSONValue): TNfcomSefazAutXMLList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazAutXMLList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfcomSefazAutXMLFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazAutXMLListFromJson(Source: string): TNfcomSefazAutXMLList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazAutXMLListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazInfAdicToJsonValue(Source: TNfcomSefazInfAdic): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.infAdFiscoHasValue then
      Json.ObjAddProp(Result, 'infAdFisco', Self.stringToJsonValue(Source.infAdFisco));
    if Assigned(Source.infCpl) then
      Json.ObjAddProp(Result, 'infCpl', Self.stringListToJsonValue(Source.infCpl));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazInfAdicToJson(Source: TNfcomSefazInfAdic): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazInfAdicToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazInfAdicFromJsonValue(Source: TJSONValue): TNfcomSefazInfAdic;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazInfAdic.Create;
  try
    if Json.ObjContains(Source, 'infAdFisco', JValue) then
      Result.infAdFisco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCpl', JValue) then
      Result.infCpl := Self.stringListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazInfAdicFromJson(Source: string): TNfcomSefazInfAdic;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazInfAdicFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazRespTecToJsonValue(Source: TNfcomSefazRespTec): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    Json.ObjAddProp(Result, 'xContato', Self.stringToJsonValue(Source.xContato));
    Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
    Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    if Source.idCSRTHasValue then
      Json.ObjAddProp(Result, 'idCSRT', Self.IntegerToJsonValue(Source.idCSRT));
    if Source.CSRTHasValue then
      Json.ObjAddProp(Result, 'CSRT', Self.stringToJsonValue(Source.CSRT));
    if Source.hashCSRTHasValue then
      Json.ObjAddProp(Result, 'hashCSRT', Self.stringToJsonValue(Source.hashCSRT));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazRespTecToJson(Source: TNfcomSefazRespTec): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazRespTecToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazRespTecFromJsonValue(Source: TJSONValue): TNfcomSefazRespTec;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazRespTec.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xContato', JValue) then
      Result.xContato := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idCSRT', JValue) then
      Result.idCSRT := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CSRT', JValue) then
      Result.CSRT := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'hashCSRT', JValue) then
      Result.hashCSRT := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazRespTecFromJson(Source: string): TNfcomSefazRespTec;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazRespTecFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazInfNFComToJsonValue(Source: TNfcomSefazInfNFCom): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'versao', Self.stringToJsonValue(Source.versao));
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'Id', Self.stringToJsonValue(Source.Id));
    Json.ObjAddProp(Result, 'ide', Self.TNfcomSefazIdeToJsonValue(Source.ide));
    Json.ObjAddProp(Result, 'emit', Self.TNfcomSefazEmitToJsonValue(Source.emit));
    Json.ObjAddProp(Result, 'dest', Self.TNfcomSefazDestToJsonValue(Source.dest));
    Json.ObjAddProp(Result, 'assinante', Self.TNfcomSefazAssinanteToJsonValue(Source.assinante));
    if Assigned(Source.gSub) then
      Json.ObjAddProp(Result, 'gSub', Self.TNfcomSefazGSubToJsonValue(Source.gSub));
    if Assigned(Source.gCofat) then
      Json.ObjAddProp(Result, 'gCofat', Self.TNfcomSefazGCofatToJsonValue(Source.gCofat));
    Json.ObjAddProp(Result, 'det', Self.TNfcomSefazDetListToJsonValue(Source.det));
    Json.ObjAddProp(Result, 'total', Self.TNfcomSefazTotalToJsonValue(Source.total));
    if Assigned(Source.gFidelidade) then
      Json.ObjAddProp(Result, 'gFidelidade', Self.TNfcomSefazGFidelidadeToJsonValue(Source.gFidelidade));
    if Assigned(Source.gFat) then
      Json.ObjAddProp(Result, 'gFat', Self.TNfcomSefazGFatToJsonValue(Source.gFat));
    if Assigned(Source.gFatCentral) then
      Json.ObjAddProp(Result, 'gFatCentral', Self.TNfcomSefazGFatCentralToJsonValue(Source.gFatCentral));
    if Assigned(Source.autXML) then
      Json.ObjAddProp(Result, 'autXML', Self.TNfcomSefazAutXMLListToJsonValue(Source.autXML));
    if Assigned(Source.infAdic) then
      Json.ObjAddProp(Result, 'infAdic', Self.TNfcomSefazInfAdicToJsonValue(Source.infAdic));
    if Assigned(Source.gRespTec) then
      Json.ObjAddProp(Result, 'gRespTec', Self.TNfcomSefazRespTecToJsonValue(Source.gRespTec));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazInfNFComToJson(Source: TNfcomSefazInfNFCom): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomSefazInfNFComToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomSefazInfNFComFromJsonValue(Source: TJSONValue): TNfcomSefazInfNFCom;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomSefazInfNFCom.Create;
  try
    if Json.ObjContains(Source, 'versao', JValue) then
      Result.versao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'Id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ide', JValue) then
      Result.ide := Self.TNfcomSefazIdeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'emit', JValue) then
      Result.emit := Self.TNfcomSefazEmitFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dest', JValue) then
      Result.dest := Self.TNfcomSefazDestFromJsonValue(JValue);
    if Json.ObjContains(Source, 'assinante', JValue) then
      Result.assinante := Self.TNfcomSefazAssinanteFromJsonValue(JValue);
    if Json.ObjContains(Source, 'gSub', JValue) then
      Result.gSub := Self.TNfcomSefazGSubFromJsonValue(JValue);
    if Json.ObjContains(Source, 'gCofat', JValue) then
      Result.gCofat := Self.TNfcomSefazGCofatFromJsonValue(JValue);
    if Json.ObjContains(Source, 'det', JValue) then
      Result.det := Self.TNfcomSefazDetListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'total', JValue) then
      Result.total := Self.TNfcomSefazTotalFromJsonValue(JValue);
    if Json.ObjContains(Source, 'gFidelidade', JValue) then
      Result.gFidelidade := Self.TNfcomSefazGFidelidadeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'gFat', JValue) then
      Result.gFat := Self.TNfcomSefazGFatFromJsonValue(JValue);
    if Json.ObjContains(Source, 'gFatCentral', JValue) then
      Result.gFatCentral := Self.TNfcomSefazGFatCentralFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autXML', JValue) then
      Result.autXML := Self.TNfcomSefazAutXMLListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infAdic', JValue) then
      Result.infAdic := Self.TNfcomSefazInfAdicFromJsonValue(JValue);
    if Json.ObjContains(Source, 'gRespTec', JValue) then
      Result.gRespTec := Self.TNfcomSefazRespTecFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomSefazInfNFComFromJson(Source: string): TNfcomSefazInfNFCom;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomSefazInfNFComFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomPedidoEmissaoToJsonValue(Source: TNfcomPedidoEmissao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'infNFCom', Self.TNfcomSefazInfNFComToJsonValue(Source.infNFCom));
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.referenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.referencia));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomPedidoEmissaoToJson(Source: TNfcomPedidoEmissao): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomPedidoEmissaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomPedidoEmissaoFromJsonValue(Source: TJSONValue): TNfcomPedidoEmissao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomPedidoEmissao.Create;
  try
    if Json.ObjContains(Source, 'infNFCom', JValue) then
      Result.infNFCom := Self.TNfcomSefazInfNFComFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.referencia := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomPedidoEmissaoFromJson(Source: string): TNfcomPedidoEmissao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomPedidoEmissaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomPedidoCancelamentoToJsonValue(Source: TNfcomPedidoCancelamento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.justificativaHasValue then
      Json.ObjAddProp(Result, 'justificativa', Self.stringToJsonValue(Source.justificativa));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomPedidoCancelamentoToJson(Source: TNfcomPedidoCancelamento): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfcomPedidoCancelamentoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfcomPedidoCancelamentoFromJsonValue(Source: TJSONValue): TNfcomPedidoCancelamento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfcomPedidoCancelamento.Create;
  try
    if Json.ObjContains(Source, 'justificativa', JValue) then
      Result.justificativa := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfcomPedidoCancelamentoFromJson(Source: string): TNfcomPedidoCancelamento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfcomPedidoCancelamentoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TContaCotaToJsonValue(Source: TContaCota): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.nomeHasValue then
      Json.ObjAddProp(Result, 'nome', Self.stringToJsonValue(Source.nome));
    if Source.consumoHasValue then
      Json.ObjAddProp(Result, 'consumo', Self.IntegerToJsonValue(Source.consumo));
    if Source.limiteHasValue then
      Json.ObjAddProp(Result, 'limite', Self.IntegerToJsonValue(Source.limite));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TContaCotaToJson(Source: TContaCota): string;
var
  JValue: TJSONValue;
begin
  JValue := TContaCotaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TContaCotaFromJsonValue(Source: TJSONValue): TContaCota;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TContaCota.Create;
  try
    if Json.ObjContains(Source, 'nome', JValue) then
      Result.nome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'consumo', JValue) then
      Result.consumo := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'limite', JValue) then
      Result.limite := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TContaCotaFromJson(Source: string): TContaCota;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TContaCotaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TContaCotaListToJsonValue(Source: TContaCotaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TContaCotaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TContaCotaListToJson(Source: TContaCotaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TContaCotaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TContaCotaListFromJsonValue(Source: TJSONValue): TContaCotaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TContaCotaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TContaCotaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TContaCotaListFromJson(Source: string): TContaCotaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TContaCotaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TContaCotaListagemToJsonValue(Source: TContaCotaListagem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source._countHasValue then
      Json.ObjAddProp(Result, '@count', Self.IntegerToJsonValue(Source._count));
    if Assigned(Source.data) then
      Json.ObjAddProp(Result, 'data', Self.TContaCotaListToJsonValue(Source.data));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TContaCotaListagemToJson(Source: TContaCotaListagem): string;
var
  JValue: TJSONValue;
begin
  JValue := TContaCotaListagemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TContaCotaListagemFromJsonValue(Source: TJSONValue): TContaCotaListagem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TContaCotaListagem.Create;
  try
    if Json.ObjContains(Source, '@count', JValue) then
      Result._count := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data', JValue) then
      Result.data := Self.TContaCotaListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TContaCotaListagemFromJson(Source: string): TContaCotaListagem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TContaCotaListagemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazToma3ToJsonValue(Source: TCteSefazToma3): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'toma', Self.IntegerToJsonValue(Source.toma));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazToma3ToJson(Source: TCteSefazToma3): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazToma3ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazToma3FromJsonValue(Source: TJSONValue): TCteSefazToma3;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazToma3.Create;
  try
    if Json.ObjContains(Source, 'toma', JValue) then
      Result.toma := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazToma3FromJson(Source: string): TCteSefazToma3;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazToma3FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEnderecoToJsonValue(Source: TCteSefazEndereco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.xLgr));
    Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.nro));
    if Source.xCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.xCpl));
    Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.xBairro));
    Json.ObjAddProp(Result, 'cMun', Self.stringToJsonValue(Source.cMun));
    Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.xMun));
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.stringToJsonValue(Source.CEP));
    Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.cPaisHasValue then
      Json.ObjAddProp(Result, 'cPais', Self.stringToJsonValue(Source.cPais));
    if Source.xPaisHasValue then
      Json.ObjAddProp(Result, 'xPais', Self.stringToJsonValue(Source.xPais));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEnderecoToJson(Source: TCteSefazEndereco): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazEnderecoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEnderecoFromJsonValue(Source: TJSONValue): TCteSefazEndereco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazEndereco.Create;
  try
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.xLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.xCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.xBairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.cMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.xMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPais', JValue) then
      Result.cPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xPais', JValue) then
      Result.xPais := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEnderecoFromJson(Source: string): TCteSefazEndereco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazEnderecoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazToma4ToJsonValue(Source: TCteSefazToma4): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'toma', Self.IntegerToJsonValue(Source.toma));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Source.xFantHasValue then
      Json.ObjAddProp(Result, 'xFant', Self.stringToJsonValue(Source.xFant));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    Json.ObjAddProp(Result, 'enderToma', Self.TCteSefazEnderecoToJsonValue(Source.enderToma));
    if Source.emailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazToma4ToJson(Source: TCteSefazToma4): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazToma4ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazToma4FromJsonValue(Source: TJSONValue): TCteSefazToma4;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazToma4.Create;
  try
    if Json.ObjContains(Source, 'toma', JValue) then
      Result.toma := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xFant', JValue) then
      Result.xFant := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderToma', JValue) then
      Result.enderToma := Self.TCteSefazEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazToma4FromJson(Source: string): TCteSefazToma4;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazToma4FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdeToJsonValue(Source: TCteSefazIde): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cUF', Self.IntegerToJsonValue(Source.cUF));
    if Source.cCTHasValue then
      Json.ObjAddProp(Result, 'cCT', Self.stringToJsonValue(Source.cCT));
    Json.ObjAddProp(Result, 'CFOP', Self.stringToJsonValue(Source.CFOP));
    Json.ObjAddProp(Result, 'natOp', Self.stringToJsonValue(Source.natOp));
    if Source.&modHasValue then
      Json.ObjAddProp(Result, 'mod', Self.IntegerToJsonValue(Source.&mod));
    Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.serie));
    Json.ObjAddProp(Result, 'nCT', Self.IntegerToJsonValue(Source.nCT));
    Json.ObjAddProp(Result, 'dhEmi', Self.TDateTimeToJsonValue(Source.dhEmi));
    Json.ObjAddProp(Result, 'tpImp', Self.IntegerToJsonValue(Source.tpImp));
    Json.ObjAddProp(Result, 'tpEmis', Self.IntegerToJsonValue(Source.tpEmis));
    if Source.cDVHasValue then
      Json.ObjAddProp(Result, 'cDV', Self.IntegerToJsonValue(Source.cDV));
    if Source.tpAmbHasValue then
      Json.ObjAddProp(Result, 'tpAmb', Self.IntegerToJsonValue(Source.tpAmb));
    Json.ObjAddProp(Result, 'tpCTe', Self.IntegerToJsonValue(Source.tpCTe));
    Json.ObjAddProp(Result, 'procEmi', Self.IntegerToJsonValue(Source.procEmi));
    Json.ObjAddProp(Result, 'verProc', Self.stringToJsonValue(Source.verProc));
    if Source.indGlobalizadoHasValue then
      Json.ObjAddProp(Result, 'indGlobalizado', Self.IntegerToJsonValue(Source.indGlobalizado));
    Json.ObjAddProp(Result, 'cMunEnv', Self.stringToJsonValue(Source.cMunEnv));
    Json.ObjAddProp(Result, 'xMunEnv', Self.stringToJsonValue(Source.xMunEnv));
    Json.ObjAddProp(Result, 'UFEnv', Self.stringToJsonValue(Source.UFEnv));
    Json.ObjAddProp(Result, 'modal', Self.stringToJsonValue(Source.modal));
    Json.ObjAddProp(Result, 'tpServ', Self.IntegerToJsonValue(Source.tpServ));
    Json.ObjAddProp(Result, 'cMunIni', Self.stringToJsonValue(Source.cMunIni));
    Json.ObjAddProp(Result, 'xMunIni', Self.stringToJsonValue(Source.xMunIni));
    Json.ObjAddProp(Result, 'UFIni', Self.stringToJsonValue(Source.UFIni));
    Json.ObjAddProp(Result, 'cMunFim', Self.stringToJsonValue(Source.cMunFim));
    Json.ObjAddProp(Result, 'xMunFim', Self.stringToJsonValue(Source.xMunFim));
    Json.ObjAddProp(Result, 'UFFim', Self.stringToJsonValue(Source.UFFim));
    Json.ObjAddProp(Result, 'retira', Self.IntegerToJsonValue(Source.retira));
    if Source.xDetRetiraHasValue then
      Json.ObjAddProp(Result, 'xDetRetira', Self.stringToJsonValue(Source.xDetRetira));
    Json.ObjAddProp(Result, 'indIEToma', Self.IntegerToJsonValue(Source.indIEToma));
    if Assigned(Source.toma3) then
      Json.ObjAddProp(Result, 'toma3', Self.TCteSefazToma3ToJsonValue(Source.toma3));
    if Assigned(Source.toma4) then
      Json.ObjAddProp(Result, 'toma4', Self.TCteSefazToma4ToJsonValue(Source.toma4));
    if Source.dhContHasValue then
      Json.ObjAddProp(Result, 'dhCont', Self.TDateTimeToJsonValue(Source.dhCont));
    if Source.xJustHasValue then
      Json.ObjAddProp(Result, 'xJust', Self.stringToJsonValue(Source.xJust));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdeToJson(Source: TCteSefazIde): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazIdeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdeFromJsonValue(Source: TJSONValue): TCteSefazIde;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazIde.Create;
  try
    if Json.ObjContains(Source, 'cUF', JValue) then
      Result.cUF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cCT', JValue) then
      Result.cCT := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CFOP', JValue) then
      Result.CFOP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'natOp', JValue) then
      Result.natOp := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&mod := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nCT', JValue) then
      Result.nCT := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhEmi', JValue) then
      Result.dhEmi := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpImp', JValue) then
      Result.tpImp := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpEmis', JValue) then
      Result.tpEmis := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cDV', JValue) then
      Result.cDV := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpAmb', JValue) then
      Result.tpAmb := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpCTe', JValue) then
      Result.tpCTe := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'procEmi', JValue) then
      Result.procEmi := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'verProc', JValue) then
      Result.verProc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indGlobalizado', JValue) then
      Result.indGlobalizado := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMunEnv', JValue) then
      Result.cMunEnv := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMunEnv', JValue) then
      Result.xMunEnv := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFEnv', JValue) then
      Result.UFEnv := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modal', JValue) then
      Result.modal := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpServ', JValue) then
      Result.tpServ := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMunIni', JValue) then
      Result.cMunIni := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMunIni', JValue) then
      Result.xMunIni := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFIni', JValue) then
      Result.UFIni := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMunFim', JValue) then
      Result.cMunFim := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMunFim', JValue) then
      Result.xMunFim := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFFim', JValue) then
      Result.UFFim := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'retira', JValue) then
      Result.retira := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xDetRetira', JValue) then
      Result.xDetRetira := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indIEToma', JValue) then
      Result.indIEToma := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'toma3', JValue) then
      Result.toma3 := Self.TCteSefazToma3FromJsonValue(JValue);
    if Json.ObjContains(Source, 'toma4', JValue) then
      Result.toma4 := Self.TCteSefazToma4FromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhCont', JValue) then
      Result.dhCont := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xJust', JValue) then
      Result.xJust := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdeFromJson(Source: string): TCteSefazIde;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazIdeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazPassToJsonValue(Source: TCteSefazPass): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xPassHasValue then
      Json.ObjAddProp(Result, 'xPass', Self.stringToJsonValue(Source.xPass));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazPassToJson(Source: TCteSefazPass): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazPassToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazPassFromJsonValue(Source: TJSONValue): TCteSefazPass;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazPass.Create;
  try
    if Json.ObjContains(Source, 'xPass', JValue) then
      Result.xPass := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazPassFromJson(Source: string): TCteSefazPass;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazPassFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazPassListToJsonValue(Source: TCteSefazPassList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazPassToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazPassListToJson(Source: TCteSefazPassList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazPassListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazPassListFromJsonValue(Source: TJSONValue): TCteSefazPassList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazPassList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazPassFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazPassListFromJson(Source: string): TCteSefazPassList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazPassListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFluxoToJsonValue(Source: TCteSefazFluxo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xOrigHasValue then
      Json.ObjAddProp(Result, 'xOrig', Self.stringToJsonValue(Source.xOrig));
    if Assigned(Source.pass) then
      Json.ObjAddProp(Result, 'pass', Self.TCteSefazPassListToJsonValue(Source.pass));
    if Source.xDestHasValue then
      Json.ObjAddProp(Result, 'xDest', Self.stringToJsonValue(Source.xDest));
    if Source.xRotaHasValue then
      Json.ObjAddProp(Result, 'xRota', Self.stringToJsonValue(Source.xRota));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFluxoToJson(Source: TCteSefazFluxo): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazFluxoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFluxoFromJsonValue(Source: TJSONValue): TCteSefazFluxo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazFluxo.Create;
  try
    if Json.ObjContains(Source, 'xOrig', JValue) then
      Result.xOrig := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pass', JValue) then
      Result.pass := Self.TCteSefazPassListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xDest', JValue) then
      Result.xDest := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xRota', JValue) then
      Result.xRota := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFluxoFromJson(Source: string): TCteSefazFluxo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazFluxoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazSemDataToJsonValue(Source: TCteSefazSemData): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpPer', Self.IntegerToJsonValue(Source.tpPer));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazSemDataToJson(Source: TCteSefazSemData): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazSemDataToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazSemDataFromJsonValue(Source: TJSONValue): TCteSefazSemData;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazSemData.Create;
  try
    if Json.ObjContains(Source, 'tpPer', JValue) then
      Result.tpPer := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazSemDataFromJson(Source: string): TCteSefazSemData;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazSemDataFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazComDataToJsonValue(Source: TCteSefazComData): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpPer', Self.IntegerToJsonValue(Source.tpPer));
    Json.ObjAddProp(Result, 'dProg', Self.TDateToJsonValue(Source.dProg));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazComDataToJson(Source: TCteSefazComData): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazComDataToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazComDataFromJsonValue(Source: TJSONValue): TCteSefazComData;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazComData.Create;
  try
    if Json.ObjContains(Source, 'tpPer', JValue) then
      Result.tpPer := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dProg', JValue) then
      Result.dProg := Self.TDateFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazComDataFromJson(Source: string): TCteSefazComData;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazComDataFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazNoPeriodoToJsonValue(Source: TCteSefazNoPeriodo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpPer', Self.IntegerToJsonValue(Source.tpPer));
    Json.ObjAddProp(Result, 'dIni', Self.TDateToJsonValue(Source.dIni));
    Json.ObjAddProp(Result, 'dFim', Self.TDateToJsonValue(Source.dFim));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazNoPeriodoToJson(Source: TCteSefazNoPeriodo): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazNoPeriodoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazNoPeriodoFromJsonValue(Source: TJSONValue): TCteSefazNoPeriodo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazNoPeriodo.Create;
  try
    if Json.ObjContains(Source, 'tpPer', JValue) then
      Result.tpPer := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dIni', JValue) then
      Result.dIni := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dFim', JValue) then
      Result.dFim := Self.TDateFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazNoPeriodoFromJson(Source: string): TCteSefazNoPeriodo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazNoPeriodoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazSemHoraToJsonValue(Source: TCteSefazSemHora): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpHor', Self.IntegerToJsonValue(Source.tpHor));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazSemHoraToJson(Source: TCteSefazSemHora): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazSemHoraToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazSemHoraFromJsonValue(Source: TJSONValue): TCteSefazSemHora;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazSemHora.Create;
  try
    if Json.ObjContains(Source, 'tpHor', JValue) then
      Result.tpHor := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazSemHoraFromJson(Source: string): TCteSefazSemHora;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazSemHoraFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazComHoraToJsonValue(Source: TCteSefazComHora): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpHor', Self.IntegerToJsonValue(Source.tpHor));
    Json.ObjAddProp(Result, 'hProg', Self.stringToJsonValue(Source.hProg));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazComHoraToJson(Source: TCteSefazComHora): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazComHoraToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazComHoraFromJsonValue(Source: TJSONValue): TCteSefazComHora;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazComHora.Create;
  try
    if Json.ObjContains(Source, 'tpHor', JValue) then
      Result.tpHor := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'hProg', JValue) then
      Result.hProg := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazComHoraFromJson(Source: string): TCteSefazComHora;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazComHoraFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazNoInterToJsonValue(Source: TCteSefazNoInter): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpHor', Self.IntegerToJsonValue(Source.tpHor));
    Json.ObjAddProp(Result, 'hIni', Self.stringToJsonValue(Source.hIni));
    Json.ObjAddProp(Result, 'hFim', Self.stringToJsonValue(Source.hFim));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazNoInterToJson(Source: TCteSefazNoInter): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazNoInterToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazNoInterFromJsonValue(Source: TJSONValue): TCteSefazNoInter;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazNoInter.Create;
  try
    if Json.ObjContains(Source, 'tpHor', JValue) then
      Result.tpHor := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'hIni', JValue) then
      Result.hIni := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'hFim', JValue) then
      Result.hFim := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazNoInterFromJson(Source: string): TCteSefazNoInter;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazNoInterFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEntregaToJsonValue(Source: TCteSefazEntrega): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.semData) then
      Json.ObjAddProp(Result, 'semData', Self.TCteSefazSemDataToJsonValue(Source.semData));
    if Assigned(Source.comData) then
      Json.ObjAddProp(Result, 'comData', Self.TCteSefazComDataToJsonValue(Source.comData));
    if Assigned(Source.noPeriodo) then
      Json.ObjAddProp(Result, 'noPeriodo', Self.TCteSefazNoPeriodoToJsonValue(Source.noPeriodo));
    if Assigned(Source.semHora) then
      Json.ObjAddProp(Result, 'semHora', Self.TCteSefazSemHoraToJsonValue(Source.semHora));
    if Assigned(Source.comHora) then
      Json.ObjAddProp(Result, 'comHora', Self.TCteSefazComHoraToJsonValue(Source.comHora));
    if Assigned(Source.noInter) then
      Json.ObjAddProp(Result, 'noInter', Self.TCteSefazNoInterToJsonValue(Source.noInter));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEntregaToJson(Source: TCteSefazEntrega): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazEntregaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEntregaFromJsonValue(Source: TJSONValue): TCteSefazEntrega;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazEntrega.Create;
  try
    if Json.ObjContains(Source, 'semData', JValue) then
      Result.semData := Self.TCteSefazSemDataFromJsonValue(JValue);
    if Json.ObjContains(Source, 'comData', JValue) then
      Result.comData := Self.TCteSefazComDataFromJsonValue(JValue);
    if Json.ObjContains(Source, 'noPeriodo', JValue) then
      Result.noPeriodo := Self.TCteSefazNoPeriodoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'semHora', JValue) then
      Result.semHora := Self.TCteSefazSemHoraFromJsonValue(JValue);
    if Json.ObjContains(Source, 'comHora', JValue) then
      Result.comHora := Self.TCteSefazComHoraFromJsonValue(JValue);
    if Json.ObjContains(Source, 'noInter', JValue) then
      Result.noInter := Self.TCteSefazNoInterFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEntregaFromJson(Source: string): TCteSefazEntrega;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazEntregaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazObsContToJsonValue(Source: TCteSefazObsCont): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xCampo', Self.stringToJsonValue(Source.xCampo));
    Json.ObjAddProp(Result, 'xTexto', Self.stringToJsonValue(Source.xTexto));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazObsContToJson(Source: TCteSefazObsCont): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazObsContToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazObsContFromJsonValue(Source: TJSONValue): TCteSefazObsCont;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazObsCont.Create;
  try
    if Json.ObjContains(Source, 'xCampo', JValue) then
      Result.xCampo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xTexto', JValue) then
      Result.xTexto := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazObsContFromJson(Source: string): TCteSefazObsCont;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazObsContFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazObsContListToJsonValue(Source: TCteSefazObsContList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazObsContToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazObsContListToJson(Source: TCteSefazObsContList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazObsContListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazObsContListFromJsonValue(Source: TJSONValue): TCteSefazObsContList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazObsContList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazObsContFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazObsContListFromJson(Source: string): TCteSefazObsContList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazObsContListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazObsFiscoToJsonValue(Source: TCteSefazObsFisco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xCampo', Self.stringToJsonValue(Source.xCampo));
    Json.ObjAddProp(Result, 'xTexto', Self.stringToJsonValue(Source.xTexto));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazObsFiscoToJson(Source: TCteSefazObsFisco): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazObsFiscoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazObsFiscoFromJsonValue(Source: TJSONValue): TCteSefazObsFisco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazObsFisco.Create;
  try
    if Json.ObjContains(Source, 'xCampo', JValue) then
      Result.xCampo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xTexto', JValue) then
      Result.xTexto := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazObsFiscoFromJson(Source: string): TCteSefazObsFisco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazObsFiscoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazObsFiscoListToJsonValue(Source: TCteSefazObsFiscoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazObsFiscoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazObsFiscoListToJson(Source: TCteSefazObsFiscoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazObsFiscoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazObsFiscoListFromJsonValue(Source: TJSONValue): TCteSefazObsFiscoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazObsFiscoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazObsFiscoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazObsFiscoListFromJson(Source: string): TCteSefazObsFiscoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazObsFiscoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazComplToJsonValue(Source: TCteSefazCompl): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xCaracAdHasValue then
      Json.ObjAddProp(Result, 'xCaracAd', Self.stringToJsonValue(Source.xCaracAd));
    if Source.xCaracSerHasValue then
      Json.ObjAddProp(Result, 'xCaracSer', Self.stringToJsonValue(Source.xCaracSer));
    if Source.xEmiHasValue then
      Json.ObjAddProp(Result, 'xEmi', Self.stringToJsonValue(Source.xEmi));
    if Assigned(Source.fluxo) then
      Json.ObjAddProp(Result, 'fluxo', Self.TCteSefazFluxoToJsonValue(Source.fluxo));
    if Assigned(Source.Entrega) then
      Json.ObjAddProp(Result, 'Entrega', Self.TCteSefazEntregaToJsonValue(Source.Entrega));
    if Source.origCalcHasValue then
      Json.ObjAddProp(Result, 'origCalc', Self.stringToJsonValue(Source.origCalc));
    if Source.destCalcHasValue then
      Json.ObjAddProp(Result, 'destCalc', Self.stringToJsonValue(Source.destCalc));
    if Source.xObsHasValue then
      Json.ObjAddProp(Result, 'xObs', Self.stringToJsonValue(Source.xObs));
    if Assigned(Source.ObsCont) then
      Json.ObjAddProp(Result, 'ObsCont', Self.TCteSefazObsContListToJsonValue(Source.ObsCont));
    if Assigned(Source.ObsFisco) then
      Json.ObjAddProp(Result, 'ObsFisco', Self.TCteSefazObsFiscoListToJsonValue(Source.ObsFisco));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazComplToJson(Source: TCteSefazCompl): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazComplToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazComplFromJsonValue(Source: TJSONValue): TCteSefazCompl;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazCompl.Create;
  try
    if Json.ObjContains(Source, 'xCaracAd', JValue) then
      Result.xCaracAd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCaracSer', JValue) then
      Result.xCaracSer := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xEmi', JValue) then
      Result.xEmi := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fluxo', JValue) then
      Result.fluxo := Self.TCteSefazFluxoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'Entrega', JValue) then
      Result.Entrega := Self.TCteSefazEntregaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'origCalc', JValue) then
      Result.origCalc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'destCalc', JValue) then
      Result.destCalc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xObs', JValue) then
      Result.xObs := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ObsCont', JValue) then
      Result.ObsCont := Self.TCteSefazObsContListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ObsFisco', JValue) then
      Result.ObsFisco := Self.TCteSefazObsFiscoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazComplFromJson(Source: string): TCteSefazCompl;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazComplFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEndeEmiToJsonValue(Source: TCteSefazEndeEmi): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xLgrHasValue then
      Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.xLgr));
    if Source.nroHasValue then
      Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.nro));
    if Source.xCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.xCpl));
    if Source.xBairroHasValue then
      Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.xBairro));
    if Source.cMunHasValue then
      Json.ObjAddProp(Result, 'cMun', Self.stringToJsonValue(Source.cMun));
    if Source.xMunHasValue then
      Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.xMun));
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.stringToJsonValue(Source.CEP));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEndeEmiToJson(Source: TCteSefazEndeEmi): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazEndeEmiToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEndeEmiFromJsonValue(Source: TJSONValue): TCteSefazEndeEmi;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazEndeEmi.Create;
  try
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.xLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.xCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.xBairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.cMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.xMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEndeEmiFromJson(Source: string): TCteSefazEndeEmi;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazEndeEmiFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEmitToJsonValue(Source: TCteSefazEmit): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.IESTHasValue then
      Json.ObjAddProp(Result, 'IEST', Self.stringToJsonValue(Source.IEST));
    if Source.xNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Source.xFantHasValue then
      Json.ObjAddProp(Result, 'xFant', Self.stringToJsonValue(Source.xFant));
    if Assigned(Source.enderEmit) then
      Json.ObjAddProp(Result, 'enderEmit', Self.TCteSefazEndeEmiToJsonValue(Source.enderEmit));
    if Source.CRTHasValue then
      Json.ObjAddProp(Result, 'CRT', Self.IntegerToJsonValue(Source.CRT));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEmitToJson(Source: TCteSefazEmit): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazEmitToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEmitFromJsonValue(Source: TJSONValue): TCteSefazEmit;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazEmit.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IEST', JValue) then
      Result.IEST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xFant', JValue) then
      Result.xFant := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderEmit', JValue) then
      Result.enderEmit := Self.TCteSefazEndeEmiFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CRT', JValue) then
      Result.CRT := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEmitFromJson(Source: string): TCteSefazEmit;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazEmitFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazRemToJsonValue(Source: TCteSefazRem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Source.xFantHasValue then
      Json.ObjAddProp(Result, 'xFant', Self.stringToJsonValue(Source.xFant));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    Json.ObjAddProp(Result, 'enderReme', Self.TCteSefazEnderecoToJsonValue(Source.enderReme));
    if Source.emailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazRemToJson(Source: TCteSefazRem): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazRemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazRemFromJsonValue(Source: TJSONValue): TCteSefazRem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazRem.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xFant', JValue) then
      Result.xFant := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderReme', JValue) then
      Result.enderReme := Self.TCteSefazEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazRemFromJson(Source: string): TCteSefazRem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazRemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazExpedToJsonValue(Source: TCteSefazExped): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    Json.ObjAddProp(Result, 'enderExped', Self.TCteSefazEnderecoToJsonValue(Source.enderExped));
    if Source.emailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazExpedToJson(Source: TCteSefazExped): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazExpedToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazExpedFromJsonValue(Source: TJSONValue): TCteSefazExped;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazExped.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderExped', JValue) then
      Result.enderExped := Self.TCteSefazEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazExpedFromJson(Source: string): TCteSefazExped;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazExpedFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazRecebToJsonValue(Source: TCteSefazReceb): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    Json.ObjAddProp(Result, 'enderReceb', Self.TCteSefazEnderecoToJsonValue(Source.enderReceb));
    if Source.emailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazRecebToJson(Source: TCteSefazReceb): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazRecebToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazRecebFromJsonValue(Source: TJSONValue): TCteSefazReceb;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazReceb.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderReceb', JValue) then
      Result.enderReceb := Self.TCteSefazEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazRecebFromJson(Source: string): TCteSefazReceb;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazRecebFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDestToJsonValue(Source: TCteSefazDest): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    if Source.ISUFHasValue then
      Json.ObjAddProp(Result, 'ISUF', Self.stringToJsonValue(Source.ISUF));
    Json.ObjAddProp(Result, 'enderDest', Self.TCteSefazEnderecoToJsonValue(Source.enderDest));
    if Source.emailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDestToJson(Source: TCteSefazDest): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDestToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDestFromJsonValue(Source: TJSONValue): TCteSefazDest;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDest.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ISUF', JValue) then
      Result.ISUF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderDest', JValue) then
      Result.enderDest := Self.TCteSefazEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDestFromJson(Source: string): TCteSefazDest;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDestFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazCompToJsonValue(Source: TCteSefazComp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    Json.ObjAddProp(Result, 'vComp', Self.DoubleToJsonValue(Source.vComp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazCompToJson(Source: TCteSefazComp): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazCompToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazCompFromJsonValue(Source: TJSONValue): TCteSefazComp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazComp.Create;
  try
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vComp', JValue) then
      Result.vComp := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazCompFromJson(Source: string): TCteSefazComp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazCompFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazCompListToJsonValue(Source: TCteSefazCompList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazCompToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazCompListToJson(Source: TCteSefazCompList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazCompListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazCompListFromJsonValue(Source: TJSONValue): TCteSefazCompList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazCompList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazCompFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazCompListFromJson(Source: string): TCteSefazCompList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazCompListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazVPrestToJsonValue(Source: TCteSefazVPrest): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vTPrest', Self.DoubleToJsonValue(Source.vTPrest));
    Json.ObjAddProp(Result, 'vRec', Self.DoubleToJsonValue(Source.vRec));
    if Assigned(Source.Comp) then
      Json.ObjAddProp(Result, 'Comp', Self.TCteSefazCompListToJsonValue(Source.Comp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazVPrestToJson(Source: TCteSefazVPrest): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazVPrestToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazVPrestFromJsonValue(Source: TJSONValue): TCteSefazVPrest;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazVPrest.Create;
  try
    if Json.ObjContains(Source, 'vTPrest', JValue) then
      Result.vTPrest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vRec', JValue) then
      Result.vRec := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'Comp', JValue) then
      Result.Comp := Self.TCteSefazCompListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazVPrestFromJson(Source: string): TCteSefazVPrest;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazVPrestFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS00ToJsonValue(Source: TCteSefazICMS00): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.pICMS));
    Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.vICMS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS00ToJson(Source: TCteSefazICMS00): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazICMS00ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS00FromJsonValue(Source: TJSONValue): TCteSefazICMS00;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazICMS00.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.pICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.vICMS := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS00FromJson(Source: string): TCteSefazICMS00;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazICMS00FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS20ToJsonValue(Source: TCteSefazICMS20): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'pRedBC', Self.DoubleToJsonValue(Source.pRedBC));
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.pICMS));
    Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.vICMS));
    if Source.vICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.vICMSDeson));
    if Source.cBenefHasValue then
      Json.ObjAddProp(Result, 'cBenef', Self.stringToJsonValue(Source.cBenef));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS20ToJson(Source: TCteSefazICMS20): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazICMS20ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS20FromJsonValue(Source: TJSONValue): TCteSefazICMS20;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazICMS20.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBC', JValue) then
      Result.pRedBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.pICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.vICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.vICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cBenef', JValue) then
      Result.cBenef := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS20FromJson(Source: string): TCteSefazICMS20;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazICMS20FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS45ToJsonValue(Source: TCteSefazICMS45): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.vICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.vICMSDeson));
    if Source.cBenefHasValue then
      Json.ObjAddProp(Result, 'cBenef', Self.stringToJsonValue(Source.cBenef));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS45ToJson(Source: TCteSefazICMS45): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazICMS45ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS45FromJsonValue(Source: TJSONValue): TCteSefazICMS45;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazICMS45.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.vICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cBenef', JValue) then
      Result.cBenef := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS45FromJson(Source: string): TCteSefazICMS45;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazICMS45FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS60ToJsonValue(Source: TCteSefazICMS60): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'vBCSTRet', Self.DoubleToJsonValue(Source.vBCSTRet));
    Json.ObjAddProp(Result, 'vICMSSTRet', Self.DoubleToJsonValue(Source.vICMSSTRet));
    Json.ObjAddProp(Result, 'pICMSSTRet', Self.DoubleToJsonValue(Source.pICMSSTRet));
    if Source.vCredHasValue then
      Json.ObjAddProp(Result, 'vCred', Self.DoubleToJsonValue(Source.vCred));
    if Source.vICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.vICMSDeson));
    if Source.cBenefHasValue then
      Json.ObjAddProp(Result, 'cBenef', Self.stringToJsonValue(Source.cBenef));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS60ToJson(Source: TCteSefazICMS60): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazICMS60ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS60FromJsonValue(Source: TJSONValue): TCteSefazICMS60;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazICMS60.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCSTRet', JValue) then
      Result.vBCSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSTRet', JValue) then
      Result.vICMSSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSSTRet', JValue) then
      Result.pICMSSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCred', JValue) then
      Result.vCred := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.vICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cBenef', JValue) then
      Result.cBenef := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS60FromJson(Source: string): TCteSefazICMS60;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazICMS60FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS90ToJsonValue(Source: TCteSefazICMS90): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.pRedBCHasValue then
      Json.ObjAddProp(Result, 'pRedBC', Self.DoubleToJsonValue(Source.pRedBC));
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.pICMS));
    Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.vICMS));
    if Source.vCredHasValue then
      Json.ObjAddProp(Result, 'vCred', Self.DoubleToJsonValue(Source.vCred));
    if Source.vICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.vICMSDeson));
    if Source.cBenefHasValue then
      Json.ObjAddProp(Result, 'cBenef', Self.stringToJsonValue(Source.cBenef));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS90ToJson(Source: TCteSefazICMS90): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazICMS90ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMS90FromJsonValue(Source: TJSONValue): TCteSefazICMS90;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazICMS90.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBC', JValue) then
      Result.pRedBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.pICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.vICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCred', JValue) then
      Result.vCred := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.vICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cBenef', JValue) then
      Result.cBenef := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMS90FromJson(Source: string): TCteSefazICMS90;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazICMS90FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMSOutraUFToJsonValue(Source: TCteSefazICMSOutraUF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.pRedBCOutraUFHasValue then
      Json.ObjAddProp(Result, 'pRedBCOutraUF', Self.DoubleToJsonValue(Source.pRedBCOutraUF));
    Json.ObjAddProp(Result, 'vBCOutraUF', Self.DoubleToJsonValue(Source.vBCOutraUF));
    Json.ObjAddProp(Result, 'pICMSOutraUF', Self.DoubleToJsonValue(Source.pICMSOutraUF));
    Json.ObjAddProp(Result, 'vICMSOutraUF', Self.DoubleToJsonValue(Source.vICMSOutraUF));
    if Source.vICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.vICMSDeson));
    if Source.cBenefHasValue then
      Json.ObjAddProp(Result, 'cBenef', Self.stringToJsonValue(Source.cBenef));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMSOutraUFToJson(Source: TCteSefazICMSOutraUF): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazICMSOutraUFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMSOutraUFFromJsonValue(Source: TJSONValue): TCteSefazICMSOutraUF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazICMSOutraUF.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCOutraUF', JValue) then
      Result.pRedBCOutraUF := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCOutraUF', JValue) then
      Result.vBCOutraUF := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSOutraUF', JValue) then
      Result.pICMSOutraUF := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSOutraUF', JValue) then
      Result.vICMSOutraUF := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.vICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cBenef', JValue) then
      Result.cBenef := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMSOutraUFFromJson(Source: string): TCteSefazICMSOutraUF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazICMSOutraUFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMSSNToJsonValue(Source: TCteSefazICMSSN): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'indSN', Self.IntegerToJsonValue(Source.indSN));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMSSNToJson(Source: TCteSefazICMSSN): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazICMSSNToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMSSNFromJsonValue(Source: TJSONValue): TCteSefazICMSSN;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazICMSSN.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indSN', JValue) then
      Result.indSN := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMSSNFromJson(Source: string): TCteSefazICMSSN;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazICMSSNFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazImpToJsonValue(Source: TCteSefazImp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.ICMS00) then
      Json.ObjAddProp(Result, 'ICMS00', Self.TCteSefazICMS00ToJsonValue(Source.ICMS00));
    if Assigned(Source.ICMS20) then
      Json.ObjAddProp(Result, 'ICMS20', Self.TCteSefazICMS20ToJsonValue(Source.ICMS20));
    if Assigned(Source.ICMS45) then
      Json.ObjAddProp(Result, 'ICMS45', Self.TCteSefazICMS45ToJsonValue(Source.ICMS45));
    if Assigned(Source.ICMS60) then
      Json.ObjAddProp(Result, 'ICMS60', Self.TCteSefazICMS60ToJsonValue(Source.ICMS60));
    if Assigned(Source.ICMS90) then
      Json.ObjAddProp(Result, 'ICMS90', Self.TCteSefazICMS90ToJsonValue(Source.ICMS90));
    if Assigned(Source.ICMSOutraUF) then
      Json.ObjAddProp(Result, 'ICMSOutraUF', Self.TCteSefazICMSOutraUFToJsonValue(Source.ICMSOutraUF));
    if Assigned(Source.ICMSSN) then
      Json.ObjAddProp(Result, 'ICMSSN', Self.TCteSefazICMSSNToJsonValue(Source.ICMSSN));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazImpToJson(Source: TCteSefazImp): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazImpToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazImpFromJsonValue(Source: TJSONValue): TCteSefazImp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazImp.Create;
  try
    if Json.ObjContains(Source, 'ICMS00', JValue) then
      Result.ICMS00 := Self.TCteSefazICMS00FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS20', JValue) then
      Result.ICMS20 := Self.TCteSefazICMS20FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS45', JValue) then
      Result.ICMS45 := Self.TCteSefazICMS45FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS60', JValue) then
      Result.ICMS60 := Self.TCteSefazICMS60FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS90', JValue) then
      Result.ICMS90 := Self.TCteSefazICMS90FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSOutraUF', JValue) then
      Result.ICMSOutraUF := Self.TCteSefazICMSOutraUFFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSSN', JValue) then
      Result.ICMSSN := Self.TCteSefazICMSSNFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazImpFromJson(Source: string): TCteSefazImp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazImpFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMSUFFimToJsonValue(Source: TCteSefazICMSUFFim): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vBCUFFim', Self.DoubleToJsonValue(Source.vBCUFFim));
    Json.ObjAddProp(Result, 'pFCPUFFim', Self.DoubleToJsonValue(Source.pFCPUFFim));
    Json.ObjAddProp(Result, 'pICMSUFFim', Self.DoubleToJsonValue(Source.pICMSUFFim));
    Json.ObjAddProp(Result, 'pICMSInter', Self.DoubleToJsonValue(Source.pICMSInter));
    Json.ObjAddProp(Result, 'vFCPUFFim', Self.DoubleToJsonValue(Source.vFCPUFFim));
    Json.ObjAddProp(Result, 'vICMSUFFim', Self.DoubleToJsonValue(Source.vICMSUFFim));
    Json.ObjAddProp(Result, 'vICMSUFIni', Self.DoubleToJsonValue(Source.vICMSUFIni));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMSUFFimToJson(Source: TCteSefazICMSUFFim): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazICMSUFFimToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazICMSUFFimFromJsonValue(Source: TJSONValue): TCteSefazICMSUFFim;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazICMSUFFim.Create;
  try
    if Json.ObjContains(Source, 'vBCUFFim', JValue) then
      Result.vBCUFFim := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPUFFim', JValue) then
      Result.pFCPUFFim := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSUFFim', JValue) then
      Result.pICMSUFFim := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSInter', JValue) then
      Result.pICMSInter := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPUFFim', JValue) then
      Result.vFCPUFFim := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSUFFim', JValue) then
      Result.vICMSUFFim := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSUFIni', JValue) then
      Result.vICMSUFIni := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazICMSUFFimFromJson(Source: string): TCteSefazICMSUFFim;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazICMSUFFimFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteImpToJsonValue(Source: TCteSefazInfCteImp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'ICMS', Self.TCteSefazImpToJsonValue(Source.ICMS));
    if Source.vTotTribHasValue then
      Json.ObjAddProp(Result, 'vTotTrib', Self.DoubleToJsonValue(Source.vTotTrib));
    if Source.infAdFiscoHasValue then
      Json.ObjAddProp(Result, 'infAdFisco', Self.stringToJsonValue(Source.infAdFisco));
    if Assigned(Source.ICMSUFFim) then
      Json.ObjAddProp(Result, 'ICMSUFFim', Self.TCteSefazICMSUFFimToJsonValue(Source.ICMSUFFim));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteImpToJson(Source: TCteSefazInfCteImp): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCteImpToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteImpFromJsonValue(Source: TJSONValue): TCteSefazInfCteImp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCteImp.Create;
  try
    if Json.ObjContains(Source, 'ICMS', JValue) then
      Result.ICMS := Self.TCteSefazImpFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vTotTrib', JValue) then
      Result.vTotTrib := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infAdFisco', JValue) then
      Result.infAdFisco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSUFFim', JValue) then
      Result.ICMSUFFim := Self.TCteSefazICMSUFFimFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteImpFromJson(Source: string): TCteSefazInfCteImp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCteImpFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfQToJsonValue(Source: TCteSefazInfQ): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cUnid', Self.stringToJsonValue(Source.cUnid));
    Json.ObjAddProp(Result, 'tpMed', Self.stringToJsonValue(Source.tpMed));
    Json.ObjAddProp(Result, 'qCarga', Self.DoubleToJsonValue(Source.qCarga));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfQToJson(Source: TCteSefazInfQ): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfQToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfQFromJsonValue(Source: TJSONValue): TCteSefazInfQ;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfQ.Create;
  try
    if Json.ObjContains(Source, 'cUnid', JValue) then
      Result.cUnid := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpMed', JValue) then
      Result.tpMed := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qCarga', JValue) then
      Result.qCarga := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfQFromJson(Source: string): TCteSefazInfQ;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfQFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfQListToJsonValue(Source: TCteSefazInfQList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazInfQToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfQListToJson(Source: TCteSefazInfQList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfQListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfQListFromJsonValue(Source: TJSONValue): TCteSefazInfQList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfQList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazInfQFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfQListFromJson(Source: string): TCteSefazInfQList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfQListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCargaToJsonValue(Source: TCteSefazInfCarga): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.vCargaHasValue then
      Json.ObjAddProp(Result, 'vCarga', Self.DoubleToJsonValue(Source.vCarga));
    Json.ObjAddProp(Result, 'proPred', Self.stringToJsonValue(Source.proPred));
    if Source.xOutCatHasValue then
      Json.ObjAddProp(Result, 'xOutCat', Self.stringToJsonValue(Source.xOutCat));
    Json.ObjAddProp(Result, 'infQ', Self.TCteSefazInfQListToJsonValue(Source.infQ));
    if Source.vCargaAverbHasValue then
      Json.ObjAddProp(Result, 'vCargaAverb', Self.DoubleToJsonValue(Source.vCargaAverb));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCargaToJson(Source: TCteSefazInfCarga): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCargaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCargaFromJsonValue(Source: TJSONValue): TCteSefazInfCarga;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCarga.Create;
  try
    if Json.ObjContains(Source, 'vCarga', JValue) then
      Result.vCarga := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'proPred', JValue) then
      Result.proPred := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xOutCat', JValue) then
      Result.xOutCat := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infQ', JValue) then
      Result.infQ := Self.TCteSefazInfQListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCargaAverb', JValue) then
      Result.vCargaAverb := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCargaFromJson(Source: string): TCteSefazInfCarga;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCargaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacUnidCargaToJsonValue(Source: TCteSefazLacUnidCarga): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nLacre', Self.stringToJsonValue(Source.nLacre));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacUnidCargaToJson(Source: TCteSefazLacUnidCarga): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazLacUnidCargaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacUnidCargaFromJsonValue(Source: TJSONValue): TCteSefazLacUnidCarga;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazLacUnidCarga.Create;
  try
    if Json.ObjContains(Source, 'nLacre', JValue) then
      Result.nLacre := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacUnidCargaFromJson(Source: string): TCteSefazLacUnidCarga;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazLacUnidCargaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacUnidCargaListToJsonValue(Source: TCteSefazLacUnidCargaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazLacUnidCargaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacUnidCargaListToJson(Source: TCteSefazLacUnidCargaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazLacUnidCargaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacUnidCargaListFromJsonValue(Source: TJSONValue): TCteSefazLacUnidCargaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazLacUnidCargaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazLacUnidCargaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacUnidCargaListFromJson(Source: string): TCteSefazLacUnidCargaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazLacUnidCargaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazUnidCargaToJsonValue(Source: TCteSefazUnidCarga): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpUnidCarga', Self.IntegerToJsonValue(Source.tpUnidCarga));
    Json.ObjAddProp(Result, 'idUnidCarga', Self.stringToJsonValue(Source.idUnidCarga));
    if Assigned(Source.lacUnidCarga) then
      Json.ObjAddProp(Result, 'lacUnidCarga', Self.TCteSefazLacUnidCargaListToJsonValue(Source.lacUnidCarga));
    if Source.qtdRatHasValue then
      Json.ObjAddProp(Result, 'qtdRat', Self.DoubleToJsonValue(Source.qtdRat));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazUnidCargaToJson(Source: TCteSefazUnidCarga): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazUnidCargaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazUnidCargaFromJsonValue(Source: TJSONValue): TCteSefazUnidCarga;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazUnidCarga.Create;
  try
    if Json.ObjContains(Source, 'tpUnidCarga', JValue) then
      Result.tpUnidCarga := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idUnidCarga', JValue) then
      Result.idUnidCarga := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lacUnidCarga', JValue) then
      Result.lacUnidCarga := Self.TCteSefazLacUnidCargaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qtdRat', JValue) then
      Result.qtdRat := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazUnidCargaFromJson(Source: string): TCteSefazUnidCarga;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazUnidCargaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazUnidCargaListToJsonValue(Source: TCteSefazUnidCargaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazUnidCargaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazUnidCargaListToJson(Source: TCteSefazUnidCargaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazUnidCargaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazUnidCargaListFromJsonValue(Source: TJSONValue): TCteSefazUnidCargaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazUnidCargaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazUnidCargaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazUnidCargaListFromJson(Source: string): TCteSefazUnidCargaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazUnidCargaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacUnidTranspToJsonValue(Source: TCteSefazLacUnidTransp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nLacre', Self.stringToJsonValue(Source.nLacre));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacUnidTranspToJson(Source: TCteSefazLacUnidTransp): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazLacUnidTranspToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacUnidTranspFromJsonValue(Source: TJSONValue): TCteSefazLacUnidTransp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazLacUnidTransp.Create;
  try
    if Json.ObjContains(Source, 'nLacre', JValue) then
      Result.nLacre := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacUnidTranspFromJson(Source: string): TCteSefazLacUnidTransp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazLacUnidTranspFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacUnidTranspListToJsonValue(Source: TCteSefazLacUnidTranspList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazLacUnidTranspToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacUnidTranspListToJson(Source: TCteSefazLacUnidTranspList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazLacUnidTranspListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacUnidTranspListFromJsonValue(Source: TJSONValue): TCteSefazLacUnidTranspList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazLacUnidTranspList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazLacUnidTranspFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacUnidTranspListFromJson(Source: string): TCteSefazLacUnidTranspList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazLacUnidTranspListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazUnidadeTranspToJsonValue(Source: TCteSefazUnidadeTransp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpUnidTransp', Self.IntegerToJsonValue(Source.tpUnidTransp));
    Json.ObjAddProp(Result, 'idUnidTransp', Self.stringToJsonValue(Source.idUnidTransp));
    if Assigned(Source.lacUnidTransp) then
      Json.ObjAddProp(Result, 'lacUnidTransp', Self.TCteSefazLacUnidTranspListToJsonValue(Source.lacUnidTransp));
    if Assigned(Source.infUnidCarga) then
      Json.ObjAddProp(Result, 'infUnidCarga', Self.TCteSefazUnidCargaListToJsonValue(Source.infUnidCarga));
    if Source.qtdRatHasValue then
      Json.ObjAddProp(Result, 'qtdRat', Self.DoubleToJsonValue(Source.qtdRat));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazUnidadeTranspToJson(Source: TCteSefazUnidadeTransp): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazUnidadeTranspToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazUnidadeTranspFromJsonValue(Source: TJSONValue): TCteSefazUnidadeTransp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazUnidadeTransp.Create;
  try
    if Json.ObjContains(Source, 'tpUnidTransp', JValue) then
      Result.tpUnidTransp := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idUnidTransp', JValue) then
      Result.idUnidTransp := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lacUnidTransp', JValue) then
      Result.lacUnidTransp := Self.TCteSefazLacUnidTranspListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidCarga', JValue) then
      Result.infUnidCarga := Self.TCteSefazUnidCargaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qtdRat', JValue) then
      Result.qtdRat := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazUnidadeTranspFromJson(Source: string): TCteSefazUnidadeTransp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazUnidadeTranspFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazUnidadeTranspListToJsonValue(Source: TCteSefazUnidadeTranspList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazUnidadeTranspToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazUnidadeTranspListToJson(Source: TCteSefazUnidadeTranspList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazUnidadeTranspListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazUnidadeTranspListFromJsonValue(Source: TJSONValue): TCteSefazUnidadeTranspList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazUnidadeTranspList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazUnidadeTranspFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazUnidadeTranspListFromJson(Source: string): TCteSefazUnidadeTranspList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazUnidadeTranspListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfNFToJsonValue(Source: TCteSefazInfNF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.nRomaHasValue then
      Json.ObjAddProp(Result, 'nRoma', Self.stringToJsonValue(Source.nRoma));
    if Source.nPedHasValue then
      Json.ObjAddProp(Result, 'nPed', Self.stringToJsonValue(Source.nPed));
    Json.ObjAddProp(Result, 'mod', Self.stringToJsonValue(Source.&mod));
    Json.ObjAddProp(Result, 'serie', Self.stringToJsonValue(Source.serie));
    Json.ObjAddProp(Result, 'nDoc', Self.stringToJsonValue(Source.nDoc));
    Json.ObjAddProp(Result, 'dEmi', Self.TDateToJsonValue(Source.dEmi));
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.vICMS));
    Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.vBCST));
    Json.ObjAddProp(Result, 'vST', Self.DoubleToJsonValue(Source.vST));
    Json.ObjAddProp(Result, 'vProd', Self.DoubleToJsonValue(Source.vProd));
    Json.ObjAddProp(Result, 'vNF', Self.DoubleToJsonValue(Source.vNF));
    Json.ObjAddProp(Result, 'nCFOP', Self.stringToJsonValue(Source.nCFOP));
    if Source.nPesoHasValue then
      Json.ObjAddProp(Result, 'nPeso', Self.DoubleToJsonValue(Source.nPeso));
    if Source.PINHasValue then
      Json.ObjAddProp(Result, 'PIN', Self.stringToJsonValue(Source.PIN));
    if Source.dPrevHasValue then
      Json.ObjAddProp(Result, 'dPrev', Self.TDateToJsonValue(Source.dPrev));
    if Assigned(Source.infUnidCarga) then
      Json.ObjAddProp(Result, 'infUnidCarga', Self.TCteSefazUnidCargaListToJsonValue(Source.infUnidCarga));
    if Assigned(Source.infUnidTransp) then
      Json.ObjAddProp(Result, 'infUnidTransp', Self.TCteSefazUnidadeTranspListToJsonValue(Source.infUnidTransp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfNFToJson(Source: TCteSefazInfNF): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfNFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfNFFromJsonValue(Source: TJSONValue): TCteSefazInfNF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfNF.Create;
  try
    if Json.ObjContains(Source, 'nRoma', JValue) then
      Result.nRoma := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nPed', JValue) then
      Result.nPed := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&mod := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nDoc', JValue) then
      Result.nDoc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dEmi', JValue) then
      Result.dEmi := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.vICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.vBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vST', JValue) then
      Result.vST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vProd', JValue) then
      Result.vProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vNF', JValue) then
      Result.vNF := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nCFOP', JValue) then
      Result.nCFOP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nPeso', JValue) then
      Result.nPeso := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PIN', JValue) then
      Result.PIN := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dPrev', JValue) then
      Result.dPrev := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidCarga', JValue) then
      Result.infUnidCarga := Self.TCteSefazUnidCargaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidTransp', JValue) then
      Result.infUnidTransp := Self.TCteSefazUnidadeTranspListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfNFFromJson(Source: string): TCteSefazInfNF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfNFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfNFListToJsonValue(Source: TCteSefazInfNFList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazInfNFToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfNFListToJson(Source: TCteSefazInfNFList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfNFListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfNFListFromJsonValue(Source: TJSONValue): TCteSefazInfNFList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfNFList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazInfNFFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfNFListFromJson(Source: string): TCteSefazInfNFList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfNFListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfNFeToJsonValue(Source: TCteSefazInfNFe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'chave', Self.stringToJsonValue(Source.chave));
    if Source.PINHasValue then
      Json.ObjAddProp(Result, 'PIN', Self.stringToJsonValue(Source.PIN));
    if Source.dPrevHasValue then
      Json.ObjAddProp(Result, 'dPrev', Self.TDateToJsonValue(Source.dPrev));
    if Assigned(Source.infUnidCarga) then
      Json.ObjAddProp(Result, 'infUnidCarga', Self.TCteSefazUnidCargaListToJsonValue(Source.infUnidCarga));
    if Assigned(Source.infUnidTransp) then
      Json.ObjAddProp(Result, 'infUnidTransp', Self.TCteSefazUnidadeTranspListToJsonValue(Source.infUnidTransp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfNFeToJson(Source: TCteSefazInfNFe): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfNFeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfNFeFromJsonValue(Source: TJSONValue): TCteSefazInfNFe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfNFe.Create;
  try
    if Json.ObjContains(Source, 'chave', JValue) then
      Result.chave := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PIN', JValue) then
      Result.PIN := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dPrev', JValue) then
      Result.dPrev := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidCarga', JValue) then
      Result.infUnidCarga := Self.TCteSefazUnidCargaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidTransp', JValue) then
      Result.infUnidTransp := Self.TCteSefazUnidadeTranspListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfNFeFromJson(Source: string): TCteSefazInfNFe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfNFeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfNFeListToJsonValue(Source: TCteSefazInfNFeList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazInfNFeToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfNFeListToJson(Source: TCteSefazInfNFeList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfNFeListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfNFeListFromJsonValue(Source: TJSONValue): TCteSefazInfNFeList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfNFeList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazInfNFeFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfNFeListFromJson(Source: string): TCteSefazInfNFeList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfNFeListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfOutrosToJsonValue(Source: TCteSefazInfOutros): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpDoc', Self.stringToJsonValue(Source.tpDoc));
    if Source.descOutrosHasValue then
      Json.ObjAddProp(Result, 'descOutros', Self.stringToJsonValue(Source.descOutros));
    if Source.nDocHasValue then
      Json.ObjAddProp(Result, 'nDoc', Self.stringToJsonValue(Source.nDoc));
    if Source.dEmiHasValue then
      Json.ObjAddProp(Result, 'dEmi', Self.TDateToJsonValue(Source.dEmi));
    if Source.vDocFiscHasValue then
      Json.ObjAddProp(Result, 'vDocFisc', Self.DoubleToJsonValue(Source.vDocFisc));
    if Source.dPrevHasValue then
      Json.ObjAddProp(Result, 'dPrev', Self.TDateToJsonValue(Source.dPrev));
    if Assigned(Source.infUnidCarga) then
      Json.ObjAddProp(Result, 'infUnidCarga', Self.TCteSefazUnidCargaListToJsonValue(Source.infUnidCarga));
    if Assigned(Source.infUnidTransp) then
      Json.ObjAddProp(Result, 'infUnidTransp', Self.TCteSefazUnidadeTranspListToJsonValue(Source.infUnidTransp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfOutrosToJson(Source: TCteSefazInfOutros): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfOutrosToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfOutrosFromJsonValue(Source: TJSONValue): TCteSefazInfOutros;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfOutros.Create;
  try
    if Json.ObjContains(Source, 'tpDoc', JValue) then
      Result.tpDoc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descOutros', JValue) then
      Result.descOutros := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nDoc', JValue) then
      Result.nDoc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dEmi', JValue) then
      Result.dEmi := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDocFisc', JValue) then
      Result.vDocFisc := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dPrev', JValue) then
      Result.dPrev := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidCarga', JValue) then
      Result.infUnidCarga := Self.TCteSefazUnidCargaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidTransp', JValue) then
      Result.infUnidTransp := Self.TCteSefazUnidadeTranspListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfOutrosFromJson(Source: string): TCteSefazInfOutros;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfOutrosFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfOutrosListToJsonValue(Source: TCteSefazInfOutrosList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazInfOutrosToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfOutrosListToJson(Source: TCteSefazInfOutrosList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfOutrosListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfOutrosListFromJsonValue(Source: TJSONValue): TCteSefazInfOutrosList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfOutrosList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazInfOutrosFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfOutrosListFromJson(Source: string): TCteSefazInfOutrosList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfOutrosListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfDocToJsonValue(Source: TCteSefazInfDoc): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.infNF) then
      Json.ObjAddProp(Result, 'infNF', Self.TCteSefazInfNFListToJsonValue(Source.infNF));
    if Assigned(Source.infNFe) then
      Json.ObjAddProp(Result, 'infNFe', Self.TCteSefazInfNFeListToJsonValue(Source.infNFe));
    if Assigned(Source.infOutros) then
      Json.ObjAddProp(Result, 'infOutros', Self.TCteSefazInfOutrosListToJsonValue(Source.infOutros));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfDocToJson(Source: TCteSefazInfDoc): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfDocToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfDocFromJsonValue(Source: TJSONValue): TCteSefazInfDoc;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfDoc.Create;
  try
    if Json.ObjContains(Source, 'infNF', JValue) then
      Result.infNF := Self.TCteSefazInfNFListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infNFe', JValue) then
      Result.infNFe := Self.TCteSefazInfNFeListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infOutros', JValue) then
      Result.infOutros := Self.TCteSefazInfOutrosListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfDocFromJson(Source: string): TCteSefazInfDoc;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfDocFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntPapToJsonValue(Source: TCteSefazIdDocAntPap): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpDoc', Self.stringToJsonValue(Source.tpDoc));
    Json.ObjAddProp(Result, 'serie', Self.stringToJsonValue(Source.serie));
    if Source.subserHasValue then
      Json.ObjAddProp(Result, 'subser', Self.stringToJsonValue(Source.subser));
    Json.ObjAddProp(Result, 'nDoc', Self.stringToJsonValue(Source.nDoc));
    Json.ObjAddProp(Result, 'dEmi', Self.TDateToJsonValue(Source.dEmi));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntPapToJson(Source: TCteSefazIdDocAntPap): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazIdDocAntPapToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntPapFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntPap;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazIdDocAntPap.Create;
  try
    if Json.ObjContains(Source, 'tpDoc', JValue) then
      Result.tpDoc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'subser', JValue) then
      Result.subser := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nDoc', JValue) then
      Result.nDoc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dEmi', JValue) then
      Result.dEmi := Self.TDateFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntPapFromJson(Source: string): TCteSefazIdDocAntPap;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazIdDocAntPapFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntPapListToJsonValue(Source: TCteSefazIdDocAntPapList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazIdDocAntPapToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntPapListToJson(Source: TCteSefazIdDocAntPapList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazIdDocAntPapListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntPapListFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntPapList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazIdDocAntPapList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazIdDocAntPapFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntPapListFromJson(Source: string): TCteSefazIdDocAntPapList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazIdDocAntPapListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntEleToJsonValue(Source: TCteSefazIdDocAntEle): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'chCTe', Self.stringToJsonValue(Source.chCTe));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntEleToJson(Source: TCteSefazIdDocAntEle): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazIdDocAntEleToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntEleFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntEle;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazIdDocAntEle.Create;
  try
    if Json.ObjContains(Source, 'chCTe', JValue) then
      Result.chCTe := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntEleFromJson(Source: string): TCteSefazIdDocAntEle;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazIdDocAntEleFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntEleListToJsonValue(Source: TCteSefazIdDocAntEleList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazIdDocAntEleToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntEleListToJson(Source: TCteSefazIdDocAntEleList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazIdDocAntEleListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntEleListFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntEleList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazIdDocAntEleList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazIdDocAntEleFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntEleListFromJson(Source: string): TCteSefazIdDocAntEleList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazIdDocAntEleListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntToJsonValue(Source: TCteSefazIdDocAnt): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.idDocAntPap) then
      Json.ObjAddProp(Result, 'idDocAntPap', Self.TCteSefazIdDocAntPapListToJsonValue(Source.idDocAntPap));
    if Assigned(Source.idDocAntEle) then
      Json.ObjAddProp(Result, 'idDocAntEle', Self.TCteSefazIdDocAntEleListToJsonValue(Source.idDocAntEle));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntToJson(Source: TCteSefazIdDocAnt): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazIdDocAntToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntFromJsonValue(Source: TJSONValue): TCteSefazIdDocAnt;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazIdDocAnt.Create;
  try
    if Json.ObjContains(Source, 'idDocAntPap', JValue) then
      Result.idDocAntPap := Self.TCteSefazIdDocAntPapListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idDocAntEle', JValue) then
      Result.idDocAntEle := Self.TCteSefazIdDocAntEleListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntFromJson(Source: string): TCteSefazIdDocAnt;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazIdDocAntFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntListToJsonValue(Source: TCteSefazIdDocAntList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazIdDocAntToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntListToJson(Source: TCteSefazIdDocAntList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazIdDocAntListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntListFromJsonValue(Source: TJSONValue): TCteSefazIdDocAntList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazIdDocAntList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazIdDocAntFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazIdDocAntListFromJson(Source: string): TCteSefazIdDocAntList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazIdDocAntListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEmiDocAntToJsonValue(Source: TCteSefazEmiDocAnt): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    Json.ObjAddProp(Result, 'idDocAnt', Self.TCteSefazIdDocAntListToJsonValue(Source.idDocAnt));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEmiDocAntToJson(Source: TCteSefazEmiDocAnt): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazEmiDocAntToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEmiDocAntFromJsonValue(Source: TJSONValue): TCteSefazEmiDocAnt;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazEmiDocAnt.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idDocAnt', JValue) then
      Result.idDocAnt := Self.TCteSefazIdDocAntListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEmiDocAntFromJson(Source: string): TCteSefazEmiDocAnt;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazEmiDocAntFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEmiDocAntListToJsonValue(Source: TCteSefazEmiDocAntList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazEmiDocAntToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEmiDocAntListToJson(Source: TCteSefazEmiDocAntList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazEmiDocAntListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEmiDocAntListFromJsonValue(Source: TJSONValue): TCteSefazEmiDocAntList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazEmiDocAntList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazEmiDocAntFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEmiDocAntListFromJson(Source: string): TCteSefazEmiDocAntList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazEmiDocAntListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDocAntToJsonValue(Source: TCteSefazDocAnt): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'emiDocAnt', Self.TCteSefazEmiDocAntListToJsonValue(Source.emiDocAnt));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDocAntToJson(Source: TCteSefazDocAnt): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDocAntToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDocAntFromJsonValue(Source: TJSONValue): TCteSefazDocAnt;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDocAnt.Create;
  try
    if Json.ObjContains(Source, 'emiDocAnt', JValue) then
      Result.emiDocAnt := Self.TCteSefazEmiDocAntListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDocAntFromJson(Source: string): TCteSefazDocAnt;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDocAntFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEmiOccToJsonValue(Source: TCteSefazEmiOcc): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.cIntHasValue then
      Json.ObjAddProp(Result, 'cInt', Self.stringToJsonValue(Source.cInt));
    Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEmiOccToJson(Source: TCteSefazEmiOcc): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazEmiOccToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEmiOccFromJsonValue(Source: TJSONValue): TCteSefazEmiOcc;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazEmiOcc.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cInt', JValue) then
      Result.cInt := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEmiOccFromJson(Source: string): TCteSefazEmiOcc;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazEmiOccFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazOccToJsonValue(Source: TCteSefazOcc): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.serieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.stringToJsonValue(Source.serie));
    Json.ObjAddProp(Result, 'nOcc', Self.IntegerToJsonValue(Source.nOcc));
    Json.ObjAddProp(Result, 'dEmi', Self.TDateToJsonValue(Source.dEmi));
    if Assigned(Source.emiOcc) then
      Json.ObjAddProp(Result, 'emiOcc', Self.TCteSefazEmiOccToJsonValue(Source.emiOcc));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazOccToJson(Source: TCteSefazOcc): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazOccToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazOccFromJsonValue(Source: TJSONValue): TCteSefazOcc;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazOcc.Create;
  try
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nOcc', JValue) then
      Result.nOcc := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dEmi', JValue) then
      Result.dEmi := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'emiOcc', JValue) then
      Result.emiOcc := Self.TCteSefazEmiOccFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazOccFromJson(Source: string): TCteSefazOcc;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazOccFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazOccListToJsonValue(Source: TCteSefazOccList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazOccToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazOccListToJson(Source: TCteSefazOccList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazOccListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazOccListFromJsonValue(Source: TJSONValue): TCteSefazOccList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazOccList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazOccFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazOccListFromJson(Source: string): TCteSefazOccList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazOccListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazRodoToJsonValue(Source: TCteSefazRodo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'RNTRC', Self.stringToJsonValue(Source.RNTRC));
    if Assigned(Source.occ) then
      Json.ObjAddProp(Result, 'occ', Self.TCteSefazOccListToJsonValue(Source.occ));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazRodoToJson(Source: TCteSefazRodo): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazRodoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazRodoFromJsonValue(Source: TJSONValue): TCteSefazRodo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazRodo.Create;
  try
    if Json.ObjContains(Source, 'RNTRC', JValue) then
      Result.RNTRC := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'occ', JValue) then
      Result.occ := Self.TCteSefazOccListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazRodoFromJson(Source: string): TCteSefazRodo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazRodoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazNatCargaToJsonValue(Source: TCteSefazNatCarga): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xDimeHasValue then
      Json.ObjAddProp(Result, 'xDime', Self.stringToJsonValue(Source.xDime));
    if Assigned(Source.cInfManu) then
      Json.ObjAddProp(Result, 'cInfManu', Self.stringListToJsonValue(Source.cInfManu));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazNatCargaToJson(Source: TCteSefazNatCarga): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazNatCargaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazNatCargaFromJsonValue(Source: TJSONValue): TCteSefazNatCarga;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazNatCarga.Create;
  try
    if Json.ObjContains(Source, 'xDime', JValue) then
      Result.xDime := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cInfManu', JValue) then
      Result.cInfManu := Self.stringListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazNatCargaFromJson(Source: string): TCteSefazNatCarga;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazNatCargaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazTarifaToJsonValue(Source: TCteSefazTarifa): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CL', Self.stringToJsonValue(Source.CL));
    if Source.cTarHasValue then
      Json.ObjAddProp(Result, 'cTar', Self.stringToJsonValue(Source.cTar));
    Json.ObjAddProp(Result, 'vTar', Self.DoubleToJsonValue(Source.vTar));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazTarifaToJson(Source: TCteSefazTarifa): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazTarifaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazTarifaFromJsonValue(Source: TJSONValue): TCteSefazTarifa;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazTarifa.Create;
  try
    if Json.ObjContains(Source, 'CL', JValue) then
      Result.CL := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cTar', JValue) then
      Result.cTar := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vTar', JValue) then
      Result.vTar := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazTarifaFromJson(Source: string): TCteSefazTarifa;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazTarifaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfTotAPToJsonValue(Source: TCteSefazInfTotAP): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'qTotProd', Self.DoubleToJsonValue(Source.qTotProd));
    Json.ObjAddProp(Result, 'uniAP', Self.IntegerToJsonValue(Source.uniAP));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfTotAPToJson(Source: TCteSefazInfTotAP): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfTotAPToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfTotAPFromJsonValue(Source: TJSONValue): TCteSefazInfTotAP;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfTotAP.Create;
  try
    if Json.ObjContains(Source, 'qTotProd', JValue) then
      Result.qTotProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uniAP', JValue) then
      Result.uniAP := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfTotAPFromJson(Source: string): TCteSefazInfTotAP;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfTotAPFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazPeriToJsonValue(Source: TCteSefazPeri): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nONU', Self.stringToJsonValue(Source.nONU));
    Json.ObjAddProp(Result, 'qTotEmb', Self.stringToJsonValue(Source.qTotEmb));
    Json.ObjAddProp(Result, 'infTotAP', Self.TCteSefazInfTotAPToJsonValue(Source.infTotAP));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazPeriToJson(Source: TCteSefazPeri): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazPeriToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazPeriFromJsonValue(Source: TJSONValue): TCteSefazPeri;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazPeri.Create;
  try
    if Json.ObjContains(Source, 'nONU', JValue) then
      Result.nONU := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qTotEmb', JValue) then
      Result.qTotEmb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infTotAP', JValue) then
      Result.infTotAP := Self.TCteSefazInfTotAPFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazPeriFromJson(Source: string): TCteSefazPeri;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazPeriFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazPeriListToJsonValue(Source: TCteSefazPeriList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazPeriToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazPeriListToJson(Source: TCteSefazPeriList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazPeriListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazPeriListFromJsonValue(Source: TJSONValue): TCteSefazPeriList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazPeriList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazPeriFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazPeriListFromJson(Source: string): TCteSefazPeriList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazPeriListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazAereoToJsonValue(Source: TCteSefazAereo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.nMinuHasValue then
      Json.ObjAddProp(Result, 'nMinu', Self.IntegerToJsonValue(Source.nMinu));
    if Source.nOCAHasValue then
      Json.ObjAddProp(Result, 'nOCA', Self.stringToJsonValue(Source.nOCA));
    Json.ObjAddProp(Result, 'dPrevAereo', Self.TDateToJsonValue(Source.dPrevAereo));
    Json.ObjAddProp(Result, 'natCarga', Self.TCteSefazNatCargaToJsonValue(Source.natCarga));
    Json.ObjAddProp(Result, 'tarifa', Self.TCteSefazTarifaToJsonValue(Source.tarifa));
    if Assigned(Source.peri) then
      Json.ObjAddProp(Result, 'peri', Self.TCteSefazPeriListToJsonValue(Source.peri));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazAereoToJson(Source: TCteSefazAereo): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazAereoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazAereoFromJsonValue(Source: TJSONValue): TCteSefazAereo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazAereo.Create;
  try
    if Json.ObjContains(Source, 'nMinu', JValue) then
      Result.nMinu := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nOCA', JValue) then
      Result.nOCA := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dPrevAereo', JValue) then
      Result.dPrevAereo := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'natCarga', JValue) then
      Result.natCarga := Self.TCteSefazNatCargaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tarifa', JValue) then
      Result.tarifa := Self.TCteSefazTarifaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'peri', JValue) then
      Result.peri := Self.TCteSefazPeriListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazAereoFromJson(Source: string): TCteSefazAereo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazAereoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEnderFerToJsonValue(Source: TCteSefazEnderFer): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.xLgr));
    if Source.nroHasValue then
      Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.nro));
    if Source.xCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.xCpl));
    if Source.xBairroHasValue then
      Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.xBairro));
    Json.ObjAddProp(Result, 'cMun', Self.stringToJsonValue(Source.cMun));
    Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.xMun));
    Json.ObjAddProp(Result, 'CEP', Self.stringToJsonValue(Source.CEP));
    Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEnderFerToJson(Source: TCteSefazEnderFer): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazEnderFerToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazEnderFerFromJsonValue(Source: TJSONValue): TCteSefazEnderFer;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazEnderFer.Create;
  try
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.xLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.xCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.xBairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.cMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.xMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazEnderFerFromJson(Source: string): TCteSefazEnderFer;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazEnderFerFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFerroEnvToJsonValue(Source: TCteSefazFerroEnv): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.cIntHasValue then
      Json.ObjAddProp(Result, 'cInt', Self.stringToJsonValue(Source.cInt));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    Json.ObjAddProp(Result, 'enderFerro', Self.TCteSefazEnderFerToJsonValue(Source.enderFerro));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFerroEnvToJson(Source: TCteSefazFerroEnv): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazFerroEnvToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFerroEnvFromJsonValue(Source: TJSONValue): TCteSefazFerroEnv;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazFerroEnv.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cInt', JValue) then
      Result.cInt := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderFerro', JValue) then
      Result.enderFerro := Self.TCteSefazEnderFerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFerroEnvFromJson(Source: string): TCteSefazFerroEnv;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazFerroEnvFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFerroEnvListToJsonValue(Source: TCteSefazFerroEnvList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazFerroEnvToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFerroEnvListToJson(Source: TCteSefazFerroEnvList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazFerroEnvListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFerroEnvListFromJsonValue(Source: TJSONValue): TCteSefazFerroEnvList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazFerroEnvList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazFerroEnvFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFerroEnvListFromJson(Source: string): TCteSefazFerroEnvList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazFerroEnvListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazTrafMutToJsonValue(Source: TCteSefazTrafMut): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'respFat', Self.IntegerToJsonValue(Source.respFat));
    Json.ObjAddProp(Result, 'ferrEmi', Self.IntegerToJsonValue(Source.ferrEmi));
    Json.ObjAddProp(Result, 'vFrete', Self.DoubleToJsonValue(Source.vFrete));
    if Source.chCTeFerroOrigemHasValue then
      Json.ObjAddProp(Result, 'chCTeFerroOrigem', Self.stringToJsonValue(Source.chCTeFerroOrigem));
    if Assigned(Source.ferroEnv) then
      Json.ObjAddProp(Result, 'ferroEnv', Self.TCteSefazFerroEnvListToJsonValue(Source.ferroEnv));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazTrafMutToJson(Source: TCteSefazTrafMut): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazTrafMutToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazTrafMutFromJsonValue(Source: TJSONValue): TCteSefazTrafMut;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazTrafMut.Create;
  try
    if Json.ObjContains(Source, 'respFat', JValue) then
      Result.respFat := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ferrEmi', JValue) then
      Result.ferrEmi := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFrete', JValue) then
      Result.vFrete := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chCTeFerroOrigem', JValue) then
      Result.chCTeFerroOrigem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ferroEnv', JValue) then
      Result.ferroEnv := Self.TCteSefazFerroEnvListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazTrafMutFromJson(Source: string): TCteSefazTrafMut;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazTrafMutFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFerrovToJsonValue(Source: TCteSefazFerrov): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpTraf', Self.IntegerToJsonValue(Source.tpTraf));
    if Assigned(Source.trafMut) then
      Json.ObjAddProp(Result, 'trafMut', Self.TCteSefazTrafMutToJsonValue(Source.trafMut));
    Json.ObjAddProp(Result, 'fluxo', Self.stringToJsonValue(Source.fluxo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFerrovToJson(Source: TCteSefazFerrov): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazFerrovToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFerrovFromJsonValue(Source: TJSONValue): TCteSefazFerrov;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazFerrov.Create;
  try
    if Json.ObjContains(Source, 'tpTraf', JValue) then
      Result.tpTraf := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'trafMut', JValue) then
      Result.trafMut := Self.TCteSefazTrafMutFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fluxo', JValue) then
      Result.fluxo := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFerrovFromJson(Source: string): TCteSefazFerrov;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazFerrovFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazBalsaToJsonValue(Source: TCteSefazBalsa): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xBalsa', Self.stringToJsonValue(Source.xBalsa));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazBalsaToJson(Source: TCteSefazBalsa): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazBalsaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazBalsaFromJsonValue(Source: TJSONValue): TCteSefazBalsa;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazBalsa.Create;
  try
    if Json.ObjContains(Source, 'xBalsa', JValue) then
      Result.xBalsa := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazBalsaFromJson(Source: string): TCteSefazBalsa;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazBalsaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazBalsaListToJsonValue(Source: TCteSefazBalsaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazBalsaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazBalsaListToJson(Source: TCteSefazBalsaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazBalsaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazBalsaListFromJsonValue(Source: TJSONValue): TCteSefazBalsaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazBalsaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazBalsaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazBalsaListFromJson(Source: string): TCteSefazBalsaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazBalsaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacreToJsonValue(Source: TCteSefazLacre): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nLacre', Self.stringToJsonValue(Source.nLacre));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacreToJson(Source: TCteSefazLacre): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazLacreToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacreFromJsonValue(Source: TJSONValue): TCteSefazLacre;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazLacre.Create;
  try
    if Json.ObjContains(Source, 'nLacre', JValue) then
      Result.nLacre := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacreFromJson(Source: string): TCteSefazLacre;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazLacreFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacreListToJsonValue(Source: TCteSefazLacreList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazLacreToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacreListToJson(Source: TCteSefazLacreList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazLacreListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazLacreListFromJsonValue(Source: TJSONValue): TCteSefazLacreList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazLacreList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazLacreFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazLacreListFromJson(Source: string): TCteSefazLacreList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazLacreListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFToJsonValue(Source: TCteSefazDetContInfDocInfNF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'serie', Self.stringToJsonValue(Source.serie));
    Json.ObjAddProp(Result, 'nDoc', Self.stringToJsonValue(Source.nDoc));
    if Source.unidRatHasValue then
      Json.ObjAddProp(Result, 'unidRat', Self.DoubleToJsonValue(Source.unidRat));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFToJson(Source: TCteSefazDetContInfDocInfNF): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDetContInfDocInfNFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDocInfNF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDetContInfDocInfNF.Create;
  try
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nDoc', JValue) then
      Result.nDoc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'unidRat', JValue) then
      Result.unidRat := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFFromJson(Source: string): TCteSefazDetContInfDocInfNF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDetContInfDocInfNFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFListToJsonValue(Source: TCteSefazDetContInfDocInfNFList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazDetContInfDocInfNFToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFListToJson(Source: TCteSefazDetContInfDocInfNFList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDetContInfDocInfNFListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFListFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDocInfNFList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDetContInfDocInfNFList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazDetContInfDocInfNFFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFListFromJson(Source: string): TCteSefazDetContInfDocInfNFList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDetContInfDocInfNFListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFeToJsonValue(Source: TCteSefazDetContInfDocInfNFe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'chave', Self.stringToJsonValue(Source.chave));
    if Source.unidRatHasValue then
      Json.ObjAddProp(Result, 'unidRat', Self.DoubleToJsonValue(Source.unidRat));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFeToJson(Source: TCteSefazDetContInfDocInfNFe): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDetContInfDocInfNFeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFeFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDocInfNFe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDetContInfDocInfNFe.Create;
  try
    if Json.ObjContains(Source, 'chave', JValue) then
      Result.chave := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'unidRat', JValue) then
      Result.unidRat := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFeFromJson(Source: string): TCteSefazDetContInfDocInfNFe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDetContInfDocInfNFeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFeListToJsonValue(Source: TCteSefazDetContInfDocInfNFeList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazDetContInfDocInfNFeToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFeListToJson(Source: TCteSefazDetContInfDocInfNFeList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDetContInfDocInfNFeListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFeListFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDocInfNFeList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDetContInfDocInfNFeList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazDetContInfDocInfNFeFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocInfNFeListFromJson(Source: string): TCteSefazDetContInfDocInfNFeList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDetContInfDocInfNFeListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocToJsonValue(Source: TCteSefazDetContInfDoc): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.infNF) then
      Json.ObjAddProp(Result, 'infNF', Self.TCteSefazDetContInfDocInfNFListToJsonValue(Source.infNF));
    if Assigned(Source.infNFe) then
      Json.ObjAddProp(Result, 'infNFe', Self.TCteSefazDetContInfDocInfNFeListToJsonValue(Source.infNFe));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocToJson(Source: TCteSefazDetContInfDoc): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDetContInfDocToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocFromJsonValue(Source: TJSONValue): TCteSefazDetContInfDoc;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDetContInfDoc.Create;
  try
    if Json.ObjContains(Source, 'infNF', JValue) then
      Result.infNF := Self.TCteSefazDetContInfDocInfNFListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infNFe', JValue) then
      Result.infNFe := Self.TCteSefazDetContInfDocInfNFeListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContInfDocFromJson(Source: string): TCteSefazDetContInfDoc;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDetContInfDocFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContToJsonValue(Source: TCteSefazDetCont): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nCont', Self.stringToJsonValue(Source.nCont));
    if Assigned(Source.lacre) then
      Json.ObjAddProp(Result, 'lacre', Self.TCteSefazLacreListToJsonValue(Source.lacre));
    if Assigned(Source.infDoc) then
      Json.ObjAddProp(Result, 'infDoc', Self.TCteSefazDetContInfDocToJsonValue(Source.infDoc));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContToJson(Source: TCteSefazDetCont): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDetContToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContFromJsonValue(Source: TJSONValue): TCteSefazDetCont;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDetCont.Create;
  try
    if Json.ObjContains(Source, 'nCont', JValue) then
      Result.nCont := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lacre', JValue) then
      Result.lacre := Self.TCteSefazLacreListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infDoc', JValue) then
      Result.infDoc := Self.TCteSefazDetContInfDocFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContFromJson(Source: string): TCteSefazDetCont;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDetContFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContListToJsonValue(Source: TCteSefazDetContList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazDetContToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContListToJson(Source: TCteSefazDetContList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDetContListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDetContListFromJsonValue(Source: TJSONValue): TCteSefazDetContList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDetContList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazDetContFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDetContListFromJson(Source: string): TCteSefazDetContList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDetContListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazAquavToJsonValue(Source: TCteSefazAquav): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vPrest', Self.DoubleToJsonValue(Source.vPrest));
    Json.ObjAddProp(Result, 'vAFRMM', Self.DoubleToJsonValue(Source.vAFRMM));
    Json.ObjAddProp(Result, 'xNavio', Self.stringToJsonValue(Source.xNavio));
    if Assigned(Source.balsa) then
      Json.ObjAddProp(Result, 'balsa', Self.TCteSefazBalsaListToJsonValue(Source.balsa));
    if Source.nViagHasValue then
      Json.ObjAddProp(Result, 'nViag', Self.stringToJsonValue(Source.nViag));
    Json.ObjAddProp(Result, 'direc', Self.stringToJsonValue(Source.direc));
    Json.ObjAddProp(Result, 'irin', Self.stringToJsonValue(Source.irin));
    if Assigned(Source.detCont) then
      Json.ObjAddProp(Result, 'detCont', Self.TCteSefazDetContListToJsonValue(Source.detCont));
    if Source.tpNavHasValue then
      Json.ObjAddProp(Result, 'tpNav', Self.IntegerToJsonValue(Source.tpNav));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazAquavToJson(Source: TCteSefazAquav): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazAquavToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazAquavFromJsonValue(Source: TJSONValue): TCteSefazAquav;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazAquav.Create;
  try
    if Json.ObjContains(Source, 'vPrest', JValue) then
      Result.vPrest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAFRMM', JValue) then
      Result.vAFRMM := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNavio', JValue) then
      Result.xNavio := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'balsa', JValue) then
      Result.balsa := Self.TCteSefazBalsaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nViag', JValue) then
      Result.nViag := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'direc', JValue) then
      Result.direc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'irin', JValue) then
      Result.irin := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'detCont', JValue) then
      Result.detCont := Self.TCteSefazDetContListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpNav', JValue) then
      Result.tpNav := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazAquavFromJson(Source: string): TCteSefazAquav;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazAquavFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDutoToJsonValue(Source: TCteSefazDuto): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.vTarHasValue then
      Json.ObjAddProp(Result, 'vTar', Self.DoubleToJsonValue(Source.vTar));
    Json.ObjAddProp(Result, 'dIni', Self.TDateToJsonValue(Source.dIni));
    Json.ObjAddProp(Result, 'dFim', Self.TDateToJsonValue(Source.dFim));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDutoToJson(Source: TCteSefazDuto): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDutoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDutoFromJsonValue(Source: TJSONValue): TCteSefazDuto;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDuto.Create;
  try
    if Json.ObjContains(Source, 'vTar', JValue) then
      Result.vTar := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dIni', JValue) then
      Result.dIni := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dFim', JValue) then
      Result.dFim := Self.TDateFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDutoFromJson(Source: string): TCteSefazDuto;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDutoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfSegToJsonValue(Source: TCteSefazInfSeg): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xSeg', Self.stringToJsonValue(Source.xSeg));
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfSegToJson(Source: TCteSefazInfSeg): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfSegToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfSegFromJsonValue(Source: TJSONValue): TCteSefazInfSeg;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfSeg.Create;
  try
    if Json.ObjContains(Source, 'xSeg', JValue) then
      Result.xSeg := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfSegFromJson(Source: string): TCteSefazInfSeg;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfSegFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazSegToJsonValue(Source: TCteSefazSeg): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'infSeg', Self.TCteSefazInfSegToJsonValue(Source.infSeg));
    Json.ObjAddProp(Result, 'nApol', Self.stringToJsonValue(Source.nApol));
    Json.ObjAddProp(Result, 'nAver', Self.stringToJsonValue(Source.nAver));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazSegToJson(Source: TCteSefazSeg): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazSegToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazSegFromJsonValue(Source: TJSONValue): TCteSefazSeg;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazSeg.Create;
  try
    if Json.ObjContains(Source, 'infSeg', JValue) then
      Result.infSeg := Self.TCteSefazInfSegFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nApol', JValue) then
      Result.nApol := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nAver', JValue) then
      Result.nAver := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazSegFromJson(Source: string): TCteSefazSeg;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazSegFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazMultimodalToJsonValue(Source: TCteSefazMultimodal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'COTM', Self.stringToJsonValue(Source.COTM));
    Json.ObjAddProp(Result, 'indNegociavel', Self.IntegerToJsonValue(Source.indNegociavel));
    if Assigned(Source.seg) then
      Json.ObjAddProp(Result, 'seg', Self.TCteSefazSegToJsonValue(Source.seg));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazMultimodalToJson(Source: TCteSefazMultimodal): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazMultimodalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazMultimodalFromJsonValue(Source: TJSONValue): TCteSefazMultimodal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazMultimodal.Create;
  try
    if Json.ObjContains(Source, 'COTM', JValue) then
      Result.COTM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indNegociavel', JValue) then
      Result.indNegociavel := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'seg', JValue) then
      Result.seg := Self.TCteSefazSegFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazMultimodalFromJson(Source: string): TCteSefazMultimodal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazMultimodalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfModalToJsonValue(Source: TCteSefazInfModal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'versaoModal', Self.stringToJsonValue(Source.versaoModal));
    if Assigned(Source.rodo) then
      Json.ObjAddProp(Result, 'rodo', Self.TCteSefazRodoToJsonValue(Source.rodo));
    if Assigned(Source.aereo) then
      Json.ObjAddProp(Result, 'aereo', Self.TCteSefazAereoToJsonValue(Source.aereo));
    if Assigned(Source.ferrov) then
      Json.ObjAddProp(Result, 'ferrov', Self.TCteSefazFerrovToJsonValue(Source.ferrov));
    if Assigned(Source.aquav) then
      Json.ObjAddProp(Result, 'aquav', Self.TCteSefazAquavToJsonValue(Source.aquav));
    if Assigned(Source.duto) then
      Json.ObjAddProp(Result, 'duto', Self.TCteSefazDutoToJsonValue(Source.duto));
    if Assigned(Source.multimodal) then
      Json.ObjAddProp(Result, 'multimodal', Self.TCteSefazMultimodalToJsonValue(Source.multimodal));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfModalToJson(Source: TCteSefazInfModal): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfModalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfModalFromJsonValue(Source: TJSONValue): TCteSefazInfModal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfModal.Create;
  try
    if Json.ObjContains(Source, 'versaoModal', JValue) then
      Result.versaoModal := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'rodo', JValue) then
      Result.rodo := Self.TCteSefazRodoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aereo', JValue) then
      Result.aereo := Self.TCteSefazAereoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ferrov', JValue) then
      Result.ferrov := Self.TCteSefazFerrovFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aquav', JValue) then
      Result.aquav := Self.TCteSefazAquavFromJsonValue(JValue);
    if Json.ObjContains(Source, 'duto', JValue) then
      Result.duto := Self.TCteSefazDutoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'multimodal', JValue) then
      Result.multimodal := Self.TCteSefazMultimodalFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfModalFromJson(Source: string): TCteSefazInfModal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfModalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazVeicNovosToJsonValue(Source: TCteSefazVeicNovos): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'chassi', Self.stringToJsonValue(Source.chassi));
    Json.ObjAddProp(Result, 'cCor', Self.stringToJsonValue(Source.cCor));
    Json.ObjAddProp(Result, 'xCor', Self.stringToJsonValue(Source.xCor));
    Json.ObjAddProp(Result, 'cMod', Self.stringToJsonValue(Source.cMod));
    Json.ObjAddProp(Result, 'vUnit', Self.DoubleToJsonValue(Source.vUnit));
    Json.ObjAddProp(Result, 'vFrete', Self.DoubleToJsonValue(Source.vFrete));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazVeicNovosToJson(Source: TCteSefazVeicNovos): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazVeicNovosToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazVeicNovosFromJsonValue(Source: TJSONValue): TCteSefazVeicNovos;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazVeicNovos.Create;
  try
    if Json.ObjContains(Source, 'chassi', JValue) then
      Result.chassi := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cCor', JValue) then
      Result.cCor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCor', JValue) then
      Result.xCor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMod', JValue) then
      Result.cMod := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vUnit', JValue) then
      Result.vUnit := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFrete', JValue) then
      Result.vFrete := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazVeicNovosFromJson(Source: string): TCteSefazVeicNovos;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazVeicNovosFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazVeicNovosListToJsonValue(Source: TCteSefazVeicNovosList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazVeicNovosToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazVeicNovosListToJson(Source: TCteSefazVeicNovosList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazVeicNovosListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazVeicNovosListFromJsonValue(Source: TJSONValue): TCteSefazVeicNovosList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazVeicNovosList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazVeicNovosFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazVeicNovosListFromJson(Source: string): TCteSefazVeicNovosList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazVeicNovosListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFatToJsonValue(Source: TCteSefazFat): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.nFatHasValue then
      Json.ObjAddProp(Result, 'nFat', Self.stringToJsonValue(Source.nFat));
    if Source.vOrigHasValue then
      Json.ObjAddProp(Result, 'vOrig', Self.DoubleToJsonValue(Source.vOrig));
    if Source.vDescHasValue then
      Json.ObjAddProp(Result, 'vDesc', Self.DoubleToJsonValue(Source.vDesc));
    if Source.vLiqHasValue then
      Json.ObjAddProp(Result, 'vLiq', Self.DoubleToJsonValue(Source.vLiq));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFatToJson(Source: TCteSefazFat): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazFatToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazFatFromJsonValue(Source: TJSONValue): TCteSefazFat;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazFat.Create;
  try
    if Json.ObjContains(Source, 'nFat', JValue) then
      Result.nFat := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vOrig', JValue) then
      Result.vOrig := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDesc', JValue) then
      Result.vDesc := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vLiq', JValue) then
      Result.vLiq := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazFatFromJson(Source: string): TCteSefazFat;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazFatFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDupToJsonValue(Source: TCteSefazDup): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.nDupHasValue then
      Json.ObjAddProp(Result, 'nDup', Self.stringToJsonValue(Source.nDup));
    if Source.dVencHasValue then
      Json.ObjAddProp(Result, 'dVenc', Self.TDateToJsonValue(Source.dVenc));
    if Source.vDupHasValue then
      Json.ObjAddProp(Result, 'vDup', Self.DoubleToJsonValue(Source.vDup));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDupToJson(Source: TCteSefazDup): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDupToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDupFromJsonValue(Source: TJSONValue): TCteSefazDup;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDup.Create;
  try
    if Json.ObjContains(Source, 'nDup', JValue) then
      Result.nDup := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dVenc', JValue) then
      Result.dVenc := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDup', JValue) then
      Result.vDup := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDupFromJson(Source: string): TCteSefazDup;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDupFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDupListToJsonValue(Source: TCteSefazDupList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazDupToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDupListToJson(Source: TCteSefazDupList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazDupListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazDupListFromJsonValue(Source: TJSONValue): TCteSefazDupList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazDupList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazDupFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazDupListFromJson(Source: string): TCteSefazDupList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazDupListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazCobrToJsonValue(Source: TCteSefazCobr): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.fat) then
      Json.ObjAddProp(Result, 'fat', Self.TCteSefazFatToJsonValue(Source.fat));
    if Assigned(Source.dup) then
      Json.ObjAddProp(Result, 'dup', Self.TCteSefazDupListToJsonValue(Source.dup));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazCobrToJson(Source: TCteSefazCobr): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazCobrToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazCobrFromJsonValue(Source: TJSONValue): TCteSefazCobr;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazCobr.Create;
  try
    if Json.ObjContains(Source, 'fat', JValue) then
      Result.fat := Self.TCteSefazFatFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dup', JValue) then
      Result.dup := Self.TCteSefazDupListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazCobrFromJson(Source: string): TCteSefazCobr;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazCobrFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteSubToJsonValue(Source: TCteSefazInfCteSub): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'chCte', Self.stringToJsonValue(Source.chCte));
    if Source.indAlteraTomaHasValue then
      Json.ObjAddProp(Result, 'indAlteraToma', Self.IntegerToJsonValue(Source.indAlteraToma));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteSubToJson(Source: TCteSefazInfCteSub): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCteSubToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteSubFromJsonValue(Source: TJSONValue): TCteSefazInfCteSub;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCteSub.Create;
  try
    if Json.ObjContains(Source, 'chCte', JValue) then
      Result.chCte := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indAlteraToma', JValue) then
      Result.indAlteraToma := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteSubFromJson(Source: string): TCteSefazInfCteSub;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCteSubFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfGlobalizadoToJsonValue(Source: TCteSefazInfGlobalizado): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xObs', Self.stringToJsonValue(Source.xObs));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfGlobalizadoToJson(Source: TCteSefazInfGlobalizado): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfGlobalizadoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfGlobalizadoFromJsonValue(Source: TJSONValue): TCteSefazInfGlobalizado;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfGlobalizado.Create;
  try
    if Json.ObjContains(Source, 'xObs', JValue) then
      Result.xObs := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfGlobalizadoFromJson(Source: string): TCteSefazInfGlobalizado;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfGlobalizadoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCTeMultimodalToJsonValue(Source: TCteSefazInfCTeMultimodal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'chCTeMultimodal', Self.stringToJsonValue(Source.chCTeMultimodal));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCTeMultimodalToJson(Source: TCteSefazInfCTeMultimodal): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCTeMultimodalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCTeMultimodalFromJsonValue(Source: TJSONValue): TCteSefazInfCTeMultimodal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCTeMultimodal.Create;
  try
    if Json.ObjContains(Source, 'chCTeMultimodal', JValue) then
      Result.chCTeMultimodal := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCTeMultimodalFromJson(Source: string): TCteSefazInfCTeMultimodal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCTeMultimodalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCTeMultimodalListToJsonValue(Source: TCteSefazInfCTeMultimodalList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazInfCTeMultimodalToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCTeMultimodalListToJson(Source: TCteSefazInfCTeMultimodalList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCTeMultimodalListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCTeMultimodalListFromJsonValue(Source: TJSONValue): TCteSefazInfCTeMultimodalList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCTeMultimodalList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazInfCTeMultimodalFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCTeMultimodalListFromJson(Source: string): TCteSefazInfCTeMultimodalList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCTeMultimodalListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfServVincToJsonValue(Source: TCteSefazInfServVinc): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'infCTeMultimodal', Self.TCteSefazInfCTeMultimodalListToJsonValue(Source.infCTeMultimodal));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfServVincToJson(Source: TCteSefazInfServVinc): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfServVincToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfServVincFromJsonValue(Source: TJSONValue): TCteSefazInfServVinc;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfServVinc.Create;
  try
    if Json.ObjContains(Source, 'infCTeMultimodal', JValue) then
      Result.infCTeMultimodal := Self.TCteSefazInfCTeMultimodalListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfServVincFromJson(Source: string): TCteSefazInfServVinc;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfServVincFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCTeNormToJsonValue(Source: TCteSefazInfCTeNorm): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'infCarga', Self.TCteSefazInfCargaToJsonValue(Source.infCarga));
    if Assigned(Source.infDoc) then
      Json.ObjAddProp(Result, 'infDoc', Self.TCteSefazInfDocToJsonValue(Source.infDoc));
    if Assigned(Source.docAnt) then
      Json.ObjAddProp(Result, 'docAnt', Self.TCteSefazDocAntToJsonValue(Source.docAnt));
    Json.ObjAddProp(Result, 'infModal', Self.TCteSefazInfModalToJsonValue(Source.infModal));
    if Assigned(Source.veicNovos) then
      Json.ObjAddProp(Result, 'veicNovos', Self.TCteSefazVeicNovosListToJsonValue(Source.veicNovos));
    if Assigned(Source.cobr) then
      Json.ObjAddProp(Result, 'cobr', Self.TCteSefazCobrToJsonValue(Source.cobr));
    if Assigned(Source.infCteSub) then
      Json.ObjAddProp(Result, 'infCteSub', Self.TCteSefazInfCteSubToJsonValue(Source.infCteSub));
    if Assigned(Source.infGlobalizado) then
      Json.ObjAddProp(Result, 'infGlobalizado', Self.TCteSefazInfGlobalizadoToJsonValue(Source.infGlobalizado));
    if Assigned(Source.infServVinc) then
      Json.ObjAddProp(Result, 'infServVinc', Self.TCteSefazInfServVincToJsonValue(Source.infServVinc));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCTeNormToJson(Source: TCteSefazInfCTeNorm): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCTeNormToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCTeNormFromJsonValue(Source: TJSONValue): TCteSefazInfCTeNorm;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCTeNorm.Create;
  try
    if Json.ObjContains(Source, 'infCarga', JValue) then
      Result.infCarga := Self.TCteSefazInfCargaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infDoc', JValue) then
      Result.infDoc := Self.TCteSefazInfDocFromJsonValue(JValue);
    if Json.ObjContains(Source, 'docAnt', JValue) then
      Result.docAnt := Self.TCteSefazDocAntFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infModal', JValue) then
      Result.infModal := Self.TCteSefazInfModalFromJsonValue(JValue);
    if Json.ObjContains(Source, 'veicNovos', JValue) then
      Result.veicNovos := Self.TCteSefazVeicNovosListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cobr', JValue) then
      Result.cobr := Self.TCteSefazCobrFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCteSub', JValue) then
      Result.infCteSub := Self.TCteSefazInfCteSubFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infGlobalizado', JValue) then
      Result.infGlobalizado := Self.TCteSefazInfGlobalizadoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infServVinc', JValue) then
      Result.infServVinc := Self.TCteSefazInfServVincFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCTeNormFromJson(Source: string): TCteSefazInfCTeNorm;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCTeNormFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteCompToJsonValue(Source: TCteSefazInfCteComp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'chCTe', Self.stringToJsonValue(Source.chCTe));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteCompToJson(Source: TCteSefazInfCteComp): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCteCompToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteCompFromJsonValue(Source: TJSONValue): TCteSefazInfCteComp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCteComp.Create;
  try
    if Json.ObjContains(Source, 'chCTe', JValue) then
      Result.chCTe := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteCompFromJson(Source: string): TCteSefazInfCteComp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCteCompFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteCompListToJsonValue(Source: TCteSefazInfCteCompList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazInfCteCompToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteCompListToJson(Source: TCteSefazInfCteCompList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCteCompListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteCompListFromJsonValue(Source: TJSONValue): TCteSefazInfCteCompList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCteCompList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazInfCteCompFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteCompListFromJson(Source: string): TCteSefazInfCteCompList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCteCompListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazAutXMLToJsonValue(Source: TCteSefazAutXML): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazAutXMLToJson(Source: TCteSefazAutXML): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazAutXMLToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazAutXMLFromJsonValue(Source: TJSONValue): TCteSefazAutXML;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazAutXML.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazAutXMLFromJson(Source: string): TCteSefazAutXML;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazAutXMLFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazAutXMLListToJsonValue(Source: TCteSefazAutXMLList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteSefazAutXMLToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazAutXMLListToJson(Source: TCteSefazAutXMLList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazAutXMLListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazAutXMLListFromJsonValue(Source: TJSONValue): TCteSefazAutXMLList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazAutXMLList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteSefazAutXMLFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazAutXMLListFromJson(Source: string): TCteSefazAutXMLList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazAutXMLListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazRespTecToJsonValue(Source: TCteSefazRespTec): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    Json.ObjAddProp(Result, 'xContato', Self.stringToJsonValue(Source.xContato));
    Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
    Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    if Source.idCSRTHasValue then
      Json.ObjAddProp(Result, 'idCSRT', Self.IntegerToJsonValue(Source.idCSRT));
    if Source.CSRTHasValue then
      Json.ObjAddProp(Result, 'CSRT', Self.stringToJsonValue(Source.CSRT));
    if Source.hashCSRTHasValue then
      Json.ObjAddProp(Result, 'hashCSRT', Self.stringToJsonValue(Source.hashCSRT));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazRespTecToJson(Source: TCteSefazRespTec): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazRespTecToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazRespTecFromJsonValue(Source: TJSONValue): TCteSefazRespTec;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazRespTec.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xContato', JValue) then
      Result.xContato := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idCSRT', JValue) then
      Result.idCSRT := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CSRT', JValue) then
      Result.CSRT := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'hashCSRT', JValue) then
      Result.hashCSRT := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazRespTecFromJson(Source: string): TCteSefazRespTec;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazRespTecFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfSolicNFFToJsonValue(Source: TCteSefazInfSolicNFF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xSolic', Self.stringToJsonValue(Source.xSolic));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfSolicNFFToJson(Source: TCteSefazInfSolicNFF): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfSolicNFFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfSolicNFFFromJsonValue(Source: TJSONValue): TCteSefazInfSolicNFF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfSolicNFF.Create;
  try
    if Json.ObjContains(Source, 'xSolic', JValue) then
      Result.xSolic := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfSolicNFFFromJson(Source: string): TCteSefazInfSolicNFF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfSolicNFFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteToJsonValue(Source: TCteSefazInfCte): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'versao', Self.stringToJsonValue(Source.versao));
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'Id', Self.stringToJsonValue(Source.Id));
    Json.ObjAddProp(Result, 'ide', Self.TCteSefazIdeToJsonValue(Source.ide));
    if Assigned(Source.compl) then
      Json.ObjAddProp(Result, 'compl', Self.TCteSefazComplToJsonValue(Source.compl));
    Json.ObjAddProp(Result, 'emit', Self.TCteSefazEmitToJsonValue(Source.emit));
    if Assigned(Source.rem) then
      Json.ObjAddProp(Result, 'rem', Self.TCteSefazRemToJsonValue(Source.rem));
    if Assigned(Source.exped) then
      Json.ObjAddProp(Result, 'exped', Self.TCteSefazExpedToJsonValue(Source.exped));
    if Assigned(Source.receb) then
      Json.ObjAddProp(Result, 'receb', Self.TCteSefazRecebToJsonValue(Source.receb));
    if Assigned(Source.dest) then
      Json.ObjAddProp(Result, 'dest', Self.TCteSefazDestToJsonValue(Source.dest));
    Json.ObjAddProp(Result, 'vPrest', Self.TCteSefazVPrestToJsonValue(Source.vPrest));
    Json.ObjAddProp(Result, 'imp', Self.TCteSefazInfCteImpToJsonValue(Source.imp));
    if Assigned(Source.infCTeNorm) then
      Json.ObjAddProp(Result, 'infCTeNorm', Self.TCteSefazInfCTeNormToJsonValue(Source.infCTeNorm));
    if Assigned(Source.infCteComp) then
      Json.ObjAddProp(Result, 'infCteComp', Self.TCteSefazInfCteCompListToJsonValue(Source.infCteComp));
    if Assigned(Source.autXML) then
      Json.ObjAddProp(Result, 'autXML', Self.TCteSefazAutXMLListToJsonValue(Source.autXML));
    if Assigned(Source.infRespTec) then
      Json.ObjAddProp(Result, 'infRespTec', Self.TCteSefazRespTecToJsonValue(Source.infRespTec));
    if Assigned(Source.infSolicNFF) then
      Json.ObjAddProp(Result, 'infSolicNFF', Self.TCteSefazInfSolicNFFToJsonValue(Source.infSolicNFF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteToJson(Source: TCteSefazInfCte): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCteFromJsonValue(Source: TJSONValue): TCteSefazInfCte;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCte.Create;
  try
    if Json.ObjContains(Source, 'versao', JValue) then
      Result.versao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'Id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ide', JValue) then
      Result.ide := Self.TCteSefazIdeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'compl', JValue) then
      Result.compl := Self.TCteSefazComplFromJsonValue(JValue);
    if Json.ObjContains(Source, 'emit', JValue) then
      Result.emit := Self.TCteSefazEmitFromJsonValue(JValue);
    if Json.ObjContains(Source, 'rem', JValue) then
      Result.rem := Self.TCteSefazRemFromJsonValue(JValue);
    if Json.ObjContains(Source, 'exped', JValue) then
      Result.exped := Self.TCteSefazExpedFromJsonValue(JValue);
    if Json.ObjContains(Source, 'receb', JValue) then
      Result.receb := Self.TCteSefazRecebFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dest', JValue) then
      Result.dest := Self.TCteSefazDestFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPrest', JValue) then
      Result.vPrest := Self.TCteSefazVPrestFromJsonValue(JValue);
    if Json.ObjContains(Source, 'imp', JValue) then
      Result.imp := Self.TCteSefazInfCteImpFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCTeNorm', JValue) then
      Result.infCTeNorm := Self.TCteSefazInfCTeNormFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCteComp', JValue) then
      Result.infCteComp := Self.TCteSefazInfCteCompListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autXML', JValue) then
      Result.autXML := Self.TCteSefazAutXMLListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infRespTec', JValue) then
      Result.infRespTec := Self.TCteSefazRespTecFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infSolicNFF', JValue) then
      Result.infSolicNFF := Self.TCteSefazInfSolicNFFFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCteFromJson(Source: string): TCteSefazInfCte;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCTeSuplToJsonValue(Source: TCteSefazInfCTeSupl): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.qrCodCTeHasValue then
      Json.ObjAddProp(Result, 'qrCodCTe', Self.stringToJsonValue(Source.qrCodCTe));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCTeSuplToJson(Source: TCteSefazInfCTeSupl): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteSefazInfCTeSuplToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteSefazInfCTeSuplFromJsonValue(Source: TJSONValue): TCteSefazInfCTeSupl;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteSefazInfCTeSupl.Create;
  try
    if Json.ObjContains(Source, 'qrCodCTe', JValue) then
      Result.qrCodCTe := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteSefazInfCTeSuplFromJson(Source: string): TCteSefazInfCTeSupl;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteSefazInfCTeSuplFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCtePedidoEmissaoToJsonValue(Source: TCtePedidoEmissao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'infCte', Self.TCteSefazInfCteToJsonValue(Source.infCte));
    if Assigned(Source.infCTeSupl) then
      Json.ObjAddProp(Result, 'infCTeSupl', Self.TCteSefazInfCTeSuplToJsonValue(Source.infCTeSupl));
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.referenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.referencia));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCtePedidoEmissaoToJson(Source: TCtePedidoEmissao): string;
var
  JValue: TJSONValue;
begin
  JValue := TCtePedidoEmissaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCtePedidoEmissaoFromJsonValue(Source: TJSONValue): TCtePedidoEmissao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCtePedidoEmissao.Create;
  try
    if Json.ObjContains(Source, 'infCte', JValue) then
      Result.infCte := Self.TCteSefazInfCteFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCTeSupl', JValue) then
      Result.infCTeSupl := Self.TCteSefazInfCTeSuplFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.referencia := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCtePedidoEmissaoFromJson(Source: string): TCtePedidoEmissao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCtePedidoEmissaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCtePedidoCancelamentoToJsonValue(Source: TCtePedidoCancelamento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.justificativaHasValue then
      Json.ObjAddProp(Result, 'justificativa', Self.stringToJsonValue(Source.justificativa));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCtePedidoCancelamentoToJson(Source: TCtePedidoCancelamento): string;
var
  JValue: TJSONValue;
begin
  JValue := TCtePedidoCancelamentoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCtePedidoCancelamentoFromJsonValue(Source: TJSONValue): TCtePedidoCancelamento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCtePedidoCancelamento.Create;
  try
    if Json.ObjContains(Source, 'justificativa', JValue) then
      Result.justificativa := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCtePedidoCancelamentoFromJson(Source: string): TCtePedidoCancelamento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCtePedidoCancelamentoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteInfCorrecaoToJsonValue(Source: TCteInfCorrecao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'grupo_alterado', Self.stringToJsonValue(Source.grupo_alterado));
    Json.ObjAddProp(Result, 'campo_alterado', Self.stringToJsonValue(Source.campo_alterado));
    Json.ObjAddProp(Result, 'valor_alterado', Self.stringToJsonValue(Source.valor_alterado));
    if Source.numero_item_alteradoHasValue then
      Json.ObjAddProp(Result, 'numero_item_alterado', Self.IntegerToJsonValue(Source.numero_item_alterado));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteInfCorrecaoToJson(Source: TCteInfCorrecao): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteInfCorrecaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteInfCorrecaoFromJsonValue(Source: TJSONValue): TCteInfCorrecao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteInfCorrecao.Create;
  try
    if Json.ObjContains(Source, 'grupo_alterado', JValue) then
      Result.grupo_alterado := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'campo_alterado', JValue) then
      Result.campo_alterado := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valor_alterado', JValue) then
      Result.valor_alterado := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_item_alterado', JValue) then
      Result.numero_item_alterado := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteInfCorrecaoFromJson(Source: string): TCteInfCorrecao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteInfCorrecaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteInfCorrecaoListToJsonValue(Source: TCteInfCorrecaoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCteInfCorrecaoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteInfCorrecaoListToJson(Source: TCteInfCorrecaoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteInfCorrecaoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteInfCorrecaoListFromJsonValue(Source: TJSONValue): TCteInfCorrecaoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteInfCorrecaoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCteInfCorrecaoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteInfCorrecaoListFromJson(Source: string): TCteInfCorrecaoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteInfCorrecaoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCtePedidoCartaCorrecaoToJsonValue(Source: TCtePedidoCartaCorrecao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'correcoes', Self.TCteInfCorrecaoListToJsonValue(Source.correcoes));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCtePedidoCartaCorrecaoToJson(Source: TCtePedidoCartaCorrecao): string;
var
  JValue: TJSONValue;
begin
  JValue := TCtePedidoCartaCorrecaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCtePedidoCartaCorrecaoFromJsonValue(Source: TJSONValue): TCtePedidoCartaCorrecao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCtePedidoCartaCorrecao.Create;
  try
    if Json.ObjContains(Source, 'correcoes', JValue) then
      Result.correcoes := Self.TCteInfCorrecaoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCtePedidoCartaCorrecaoFromJson(Source: string): TCtePedidoCartaCorrecao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCtePedidoCartaCorrecaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteCartaCorrecaoToJsonValue(Source: TCteCartaCorrecao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'correcoes', Self.TCteInfCorrecaoListToJsonValue(Source.correcoes));
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.ambienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Assigned(Source.autor) then
      Json.ObjAddProp(Result, 'autor', Self.TDfeAutorEventoToJsonValue(Source.autor));
    if Source.chave_acessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.chave_acesso));
    if Source.data_eventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.data_evento));
    if Source.numero_sequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.numero_sequencial));
    if Source.data_recebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.data_recebimento));
    if Source.codigo_statusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.codigo_status));
    if Source.motivo_statusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.motivo_status));
    if Source.numero_protocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.numero_protocolo));
    if Source.codigo_mensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.codigo_mensagem));
    if Source.mensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.mensagem));
    if Source.tipo_eventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.tipo_evento));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteCartaCorrecaoToJson(Source: TCteCartaCorrecao): string;
var
  JValue: TJSONValue;
begin
  JValue := TCteCartaCorrecaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCteCartaCorrecaoFromJsonValue(Source: TJSONValue): TCteCartaCorrecao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCteCartaCorrecao.Create;
  try
    if Json.ObjContains(Source, 'correcoes', JValue) then
      Result.correcoes := Self.TCteInfCorrecaoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autor', JValue) then
      Result.autor := Self.TDfeAutorEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.chave_acesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.data_evento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.numero_sequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.data_recebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.codigo_status := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.motivo_status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.numero_protocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.codigo_mensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.mensagem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.tipo_evento := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCteCartaCorrecaoFromJson(Source: string): TCteCartaCorrecao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCteCartaCorrecaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeEventoToJsonValue(Source: TDfeEvento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.ambienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Assigned(Source.autor) then
      Json.ObjAddProp(Result, 'autor', Self.TDfeAutorEventoToJsonValue(Source.autor));
    if Source.chave_acessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.chave_acesso));
    if Source.data_eventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.data_evento));
    if Source.numero_sequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.numero_sequencial));
    if Source.data_recebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.data_recebimento));
    if Source.codigo_statusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.codigo_status));
    if Source.motivo_statusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.motivo_status));
    if Source.numero_protocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.numero_protocolo));
    if Source.codigo_mensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.codigo_mensagem));
    if Source.mensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.mensagem));
    if Source.tipo_eventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.tipo_evento));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeEventoToJson(Source: TDfeEvento): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeEventoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeEventoFromJsonValue(Source: TJSONValue): TDfeEvento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeEvento.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autor', JValue) then
      Result.autor := Self.TDfeAutorEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.chave_acesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.data_evento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.numero_sequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.data_recebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.codigo_status := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.motivo_status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.numero_protocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.codigo_mensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.mensagem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.tipo_evento := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeEventoFromJson(Source: string): TDfeEvento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeEventoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeSincronizacaoToJsonValue(Source: TDfeSincronizacao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Source.codigo_statusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.codigo_status));
    if Source.motivo_statusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.motivo_status));
    if Source.data_recebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.data_recebimento));
    if Source.chaveHasValue then
      Json.ObjAddProp(Result, 'chave', Self.stringToJsonValue(Source.chave));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeSincronizacaoToJson(Source: TDfeSincronizacao): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeSincronizacaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeSincronizacaoFromJsonValue(Source: TJSONValue): TDfeSincronizacao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeSincronizacao.Create;
  try
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.codigo_status := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.motivo_status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.data_recebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave', JValue) then
      Result.chave := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeSincronizacaoFromJson(Source: string): TDfeSincronizacao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeSincronizacaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeNaoEncerradoToJsonValue(Source: TMdfeNaoEncerrado): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'chMDFe', Self.stringToJsonValue(Source.chMDFe));
    Json.ObjAddProp(Result, 'nProt', Self.stringToJsonValue(Source.nProt));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeNaoEncerradoToJson(Source: TMdfeNaoEncerrado): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeNaoEncerradoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeNaoEncerradoFromJsonValue(Source: TJSONValue): TMdfeNaoEncerrado;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeNaoEncerrado.Create;
  try
    if Json.ObjContains(Source, 'chMDFe', JValue) then
      Result.chMDFe := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nProt', JValue) then
      Result.nProt := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeNaoEncerradoFromJson(Source: string): TMdfeNaoEncerrado;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeNaoEncerradoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeNaoEncerradoListToJsonValue(Source: TMdfeNaoEncerradoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeNaoEncerradoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeNaoEncerradoListToJson(Source: TMdfeNaoEncerradoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeNaoEncerradoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeNaoEncerradoListFromJsonValue(Source: TJSONValue): TMdfeNaoEncerradoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeNaoEncerradoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeNaoEncerradoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeNaoEncerradoListFromJson(Source: string): TMdfeNaoEncerradoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeNaoEncerradoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeNaoEncerradosToJsonValue(Source: TMdfeNaoEncerrados): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.tpAmbHasValue then
      Json.ObjAddProp(Result, 'tpAmb', Self.IntegerToJsonValue(Source.tpAmb));
    if Source.verAplicHasValue then
      Json.ObjAddProp(Result, 'verAplic', Self.stringToJsonValue(Source.verAplic));
    Json.ObjAddProp(Result, 'cStat', Self.IntegerToJsonValue(Source.cStat));
    if Source.xMotivoHasValue then
      Json.ObjAddProp(Result, 'xMotivo', Self.stringToJsonValue(Source.xMotivo));
    if Source.cUFHasValue then
      Json.ObjAddProp(Result, 'cUF', Self.IntegerToJsonValue(Source.cUF));
    if Assigned(Source.infMDFe) then
      Json.ObjAddProp(Result, 'infMDFe', Self.TMdfeNaoEncerradoListToJsonValue(Source.infMDFe));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeNaoEncerradosToJson(Source: TMdfeNaoEncerrados): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeNaoEncerradosToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeNaoEncerradosFromJsonValue(Source: TJSONValue): TMdfeNaoEncerrados;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeNaoEncerrados.Create;
  try
    if Json.ObjContains(Source, 'tpAmb', JValue) then
      Result.tpAmb := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'verAplic', JValue) then
      Result.verAplic := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cStat', JValue) then
      Result.cStat := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMotivo', JValue) then
      Result.xMotivo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cUF', JValue) then
      Result.cUF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infMDFe', JValue) then
      Result.infMDFe := Self.TMdfeNaoEncerradoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeNaoEncerradosFromJson(Source: string): TMdfeNaoEncerrados;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeNaoEncerradosFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunCarregaToJsonValue(Source: TMdfeSefazInfMunCarrega): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cMunCarrega', Self.stringToJsonValue(Source.cMunCarrega));
    Json.ObjAddProp(Result, 'xMunCarrega', Self.stringToJsonValue(Source.xMunCarrega));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunCarregaToJson(Source: TMdfeSefazInfMunCarrega): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMunCarregaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunCarregaFromJsonValue(Source: TJSONValue): TMdfeSefazInfMunCarrega;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMunCarrega.Create;
  try
    if Json.ObjContains(Source, 'cMunCarrega', JValue) then
      Result.cMunCarrega := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMunCarrega', JValue) then
      Result.xMunCarrega := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunCarregaFromJson(Source: string): TMdfeSefazInfMunCarrega;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMunCarregaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunCarregaListToJsonValue(Source: TMdfeSefazInfMunCarregaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfMunCarregaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunCarregaListToJson(Source: TMdfeSefazInfMunCarregaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMunCarregaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunCarregaListFromJsonValue(Source: TJSONValue): TMdfeSefazInfMunCarregaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMunCarregaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfMunCarregaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunCarregaListFromJson(Source: string): TMdfeSefazInfMunCarregaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMunCarregaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPercursoToJsonValue(Source: TMdfeSefazInfPercurso): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'UFPer', Self.stringToJsonValue(Source.UFPer));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPercursoToJson(Source: TMdfeSefazInfPercurso): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfPercursoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPercursoFromJsonValue(Source: TJSONValue): TMdfeSefazInfPercurso;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfPercurso.Create;
  try
    if Json.ObjContains(Source, 'UFPer', JValue) then
      Result.UFPer := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPercursoFromJson(Source: string): TMdfeSefazInfPercurso;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfPercursoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPercursoListToJsonValue(Source: TMdfeSefazInfPercursoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfPercursoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPercursoListToJson(Source: TMdfeSefazInfPercursoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfPercursoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPercursoListFromJsonValue(Source: TJSONValue): TMdfeSefazInfPercursoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfPercursoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfPercursoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPercursoListFromJson(Source: string): TMdfeSefazInfPercursoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfPercursoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazIdeToJsonValue(Source: TMdfeSefazIde): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cUF', Self.IntegerToJsonValue(Source.cUF));
    if Source.tpAmbHasValue then
      Json.ObjAddProp(Result, 'tpAmb', Self.IntegerToJsonValue(Source.tpAmb));
    Json.ObjAddProp(Result, 'tpEmit', Self.IntegerToJsonValue(Source.tpEmit));
    if Source.tpTranspHasValue then
      Json.ObjAddProp(Result, 'tpTransp', Self.IntegerToJsonValue(Source.tpTransp));
    if Source.&modHasValue then
      Json.ObjAddProp(Result, 'mod', Self.IntegerToJsonValue(Source.&mod));
    Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.serie));
    Json.ObjAddProp(Result, 'nMDF', Self.IntegerToJsonValue(Source.nMDF));
    if Source.cMDFHasValue then
      Json.ObjAddProp(Result, 'cMDF', Self.stringToJsonValue(Source.cMDF));
    if Source.cDVHasValue then
      Json.ObjAddProp(Result, 'cDV', Self.IntegerToJsonValue(Source.cDV));
    Json.ObjAddProp(Result, 'modal', Self.IntegerToJsonValue(Source.modal));
    Json.ObjAddProp(Result, 'dhEmi', Self.TDateTimeToJsonValue(Source.dhEmi));
    Json.ObjAddProp(Result, 'tpEmis', Self.IntegerToJsonValue(Source.tpEmis));
    Json.ObjAddProp(Result, 'procEmi', Self.stringToJsonValue(Source.procEmi));
    Json.ObjAddProp(Result, 'verProc', Self.stringToJsonValue(Source.verProc));
    Json.ObjAddProp(Result, 'UFIni', Self.stringToJsonValue(Source.UFIni));
    Json.ObjAddProp(Result, 'UFFim', Self.stringToJsonValue(Source.UFFim));
    Json.ObjAddProp(Result, 'infMunCarrega', Self.TMdfeSefazInfMunCarregaListToJsonValue(Source.infMunCarrega));
    if Assigned(Source.infPercurso) then
      Json.ObjAddProp(Result, 'infPercurso', Self.TMdfeSefazInfPercursoListToJsonValue(Source.infPercurso));
    if Source.dhIniViagemHasValue then
      Json.ObjAddProp(Result, 'dhIniViagem', Self.TDateTimeToJsonValue(Source.dhIniViagem));
    if Source.indCanalVerdeHasValue then
      Json.ObjAddProp(Result, 'indCanalVerde', Self.IntegerToJsonValue(Source.indCanalVerde));
    if Source.indCarregaPosteriorHasValue then
      Json.ObjAddProp(Result, 'indCarregaPosterior', Self.IntegerToJsonValue(Source.indCarregaPosterior));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazIdeToJson(Source: TMdfeSefazIde): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazIdeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazIdeFromJsonValue(Source: TJSONValue): TMdfeSefazIde;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazIde.Create;
  try
    if Json.ObjContains(Source, 'cUF', JValue) then
      Result.cUF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpAmb', JValue) then
      Result.tpAmb := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpEmit', JValue) then
      Result.tpEmit := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpTransp', JValue) then
      Result.tpTransp := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&mod := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nMDF', JValue) then
      Result.nMDF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMDF', JValue) then
      Result.cMDF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cDV', JValue) then
      Result.cDV := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modal', JValue) then
      Result.modal := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhEmi', JValue) then
      Result.dhEmi := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpEmis', JValue) then
      Result.tpEmis := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'procEmi', JValue) then
      Result.procEmi := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'verProc', JValue) then
      Result.verProc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFIni', JValue) then
      Result.UFIni := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFFim', JValue) then
      Result.UFFim := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infMunCarrega', JValue) then
      Result.infMunCarrega := Self.TMdfeSefazInfMunCarregaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infPercurso', JValue) then
      Result.infPercurso := Self.TMdfeSefazInfPercursoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhIniViagem', JValue) then
      Result.dhIniViagem := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indCanalVerde', JValue) then
      Result.indCanalVerde := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indCarregaPosterior', JValue) then
      Result.indCarregaPosterior := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazIdeFromJson(Source: string): TMdfeSefazIde;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazIdeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazEndeEmiToJsonValue(Source: TMdfeSefazEndeEmi): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xLgrHasValue then
      Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.xLgr));
    if Source.nroHasValue then
      Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.nro));
    if Source.xCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.xCpl));
    if Source.xBairroHasValue then
      Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.xBairro));
    if Source.cMunHasValue then
      Json.ObjAddProp(Result, 'cMun', Self.stringToJsonValue(Source.cMun));
    if Source.xMunHasValue then
      Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.xMun));
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.stringToJsonValue(Source.CEP));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    if Source.emailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazEndeEmiToJson(Source: TMdfeSefazEndeEmi): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazEndeEmiToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazEndeEmiFromJsonValue(Source: TJSONValue): TMdfeSefazEndeEmi;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazEndeEmi.Create;
  try
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.xLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.xCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.xBairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.cMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.xMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazEndeEmiFromJson(Source: string): TMdfeSefazEndeEmi;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazEndeEmiFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazEmitToJsonValue(Source: TMdfeSefazEmit): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.xNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Source.xFantHasValue then
      Json.ObjAddProp(Result, 'xFant', Self.stringToJsonValue(Source.xFant));
    if Assigned(Source.enderEmit) then
      Json.ObjAddProp(Result, 'enderEmit', Self.TMdfeSefazEndeEmiToJsonValue(Source.enderEmit));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazEmitToJson(Source: TMdfeSefazEmit): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazEmitToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazEmitFromJsonValue(Source: TJSONValue): TMdfeSefazEmit;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazEmit.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xFant', JValue) then
      Result.xFant := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderEmit', JValue) then
      Result.enderEmit := Self.TMdfeSefazEndeEmiFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazEmitFromJson(Source: string): TMdfeSefazEmit;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazEmitFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazAereoToJsonValue(Source: TMdfeSefazAereo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nac', Self.stringToJsonValue(Source.nac));
    Json.ObjAddProp(Result, 'matr', Self.stringToJsonValue(Source.matr));
    Json.ObjAddProp(Result, 'nVoo', Self.stringToJsonValue(Source.nVoo));
    Json.ObjAddProp(Result, 'cAerEmb', Self.stringToJsonValue(Source.cAerEmb));
    Json.ObjAddProp(Result, 'cAerDes', Self.stringToJsonValue(Source.cAerDes));
    Json.ObjAddProp(Result, 'dVoo', Self.TDateToJsonValue(Source.dVoo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazAereoToJson(Source: TMdfeSefazAereo): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazAereoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazAereoFromJsonValue(Source: TJSONValue): TMdfeSefazAereo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazAereo.Create;
  try
    if Json.ObjContains(Source, 'nac', JValue) then
      Result.nac := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'matr', JValue) then
      Result.matr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nVoo', JValue) then
      Result.nVoo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cAerEmb', JValue) then
      Result.cAerEmb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cAerDes', JValue) then
      Result.cAerDes := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dVoo', JValue) then
      Result.dVoo := Self.TDateFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazAereoFromJson(Source: string): TMdfeSefazAereo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazAereoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfCIOTToJsonValue(Source: TMdfeSefazInfCIOT): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CIOT', Self.stringToJsonValue(Source.CIOT));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfCIOTToJson(Source: TMdfeSefazInfCIOT): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfCIOTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfCIOTFromJsonValue(Source: TJSONValue): TMdfeSefazInfCIOT;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfCIOT.Create;
  try
    if Json.ObjContains(Source, 'CIOT', JValue) then
      Result.CIOT := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfCIOTFromJson(Source: string): TMdfeSefazInfCIOT;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfCIOTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfCIOTListToJsonValue(Source: TMdfeSefazInfCIOTList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfCIOTToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfCIOTListToJson(Source: TMdfeSefazInfCIOTList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfCIOTListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfCIOTListFromJsonValue(Source: TJSONValue): TMdfeSefazInfCIOTList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfCIOTList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfCIOTFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfCIOTListFromJson(Source: string): TMdfeSefazInfCIOTList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfCIOTListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazDispToJsonValue(Source: TMdfeSefazDisp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CNPJForn', Self.stringToJsonValue(Source.CNPJForn));
    if Source.CNPJPgHasValue then
      Json.ObjAddProp(Result, 'CNPJPg', Self.stringToJsonValue(Source.CNPJPg));
    if Source.CPFPgHasValue then
      Json.ObjAddProp(Result, 'CPFPg', Self.stringToJsonValue(Source.CPFPg));
    if Source.nCompraHasValue then
      Json.ObjAddProp(Result, 'nCompra', Self.stringToJsonValue(Source.nCompra));
    Json.ObjAddProp(Result, 'vValePed', Self.DoubleToJsonValue(Source.vValePed));
    if Source.tpValePedHasValue then
      Json.ObjAddProp(Result, 'tpValePed', Self.stringToJsonValue(Source.tpValePed));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazDispToJson(Source: TMdfeSefazDisp): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazDispToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazDispFromJsonValue(Source: TJSONValue): TMdfeSefazDisp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazDisp.Create;
  try
    if Json.ObjContains(Source, 'CNPJForn', JValue) then
      Result.CNPJForn := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJPg', JValue) then
      Result.CNPJPg := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPFPg', JValue) then
      Result.CPFPg := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nCompra', JValue) then
      Result.nCompra := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vValePed', JValue) then
      Result.vValePed := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpValePed', JValue) then
      Result.tpValePed := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazDispFromJson(Source: string): TMdfeSefazDisp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazDispFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazDispListToJsonValue(Source: TMdfeSefazDispList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazDispToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazDispListToJson(Source: TMdfeSefazDispList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazDispListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazDispListFromJsonValue(Source: TJSONValue): TMdfeSefazDispList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazDispList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazDispFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazDispListFromJson(Source: string): TMdfeSefazDispList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazDispListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazValePedToJsonValue(Source: TMdfeSefazValePed): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'disp', Self.TMdfeSefazDispListToJsonValue(Source.disp));
    if Source.categCombVeicHasValue then
      Json.ObjAddProp(Result, 'categCombVeic', Self.stringToJsonValue(Source.categCombVeic));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazValePedToJson(Source: TMdfeSefazValePed): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazValePedToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazValePedFromJsonValue(Source: TJSONValue): TMdfeSefazValePed;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazValePed.Create;
  try
    if Json.ObjContains(Source, 'disp', JValue) then
      Result.disp := Self.TMdfeSefazDispListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'categCombVeic', JValue) then
      Result.categCombVeic := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazValePedFromJson(Source: string): TMdfeSefazValePed;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazValePedFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratoToJsonValue(Source: TMdfeSefazInfContrato): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'NroContrato', Self.stringToJsonValue(Source.NroContrato));
    Json.ObjAddProp(Result, 'vContratoGlobal', Self.DoubleToJsonValue(Source.vContratoGlobal));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratoToJson(Source: TMdfeSefazInfContrato): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfContratoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratoFromJsonValue(Source: TJSONValue): TMdfeSefazInfContrato;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfContrato.Create;
  try
    if Json.ObjContains(Source, 'NroContrato', JValue) then
      Result.NroContrato := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vContratoGlobal', JValue) then
      Result.vContratoGlobal := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratoFromJson(Source: string): TMdfeSefazInfContrato;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfContratoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratanteToJsonValue(Source: TMdfeSefazInfContratante): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.idEstrangeiroHasValue then
      Json.ObjAddProp(Result, 'idEstrangeiro', Self.stringToJsonValue(Source.idEstrangeiro));
    if Assigned(Source.infContrato) then
      Json.ObjAddProp(Result, 'infContrato', Self.TMdfeSefazInfContratoToJsonValue(Source.infContrato));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratanteToJson(Source: TMdfeSefazInfContratante): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfContratanteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratanteFromJsonValue(Source: TJSONValue): TMdfeSefazInfContratante;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfContratante.Create;
  try
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idEstrangeiro', JValue) then
      Result.idEstrangeiro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infContrato', JValue) then
      Result.infContrato := Self.TMdfeSefazInfContratoFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratanteFromJson(Source: string): TMdfeSefazInfContratante;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfContratanteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratanteListToJsonValue(Source: TMdfeSefazInfContratanteList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfContratanteToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratanteListToJson(Source: TMdfeSefazInfContratanteList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfContratanteListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratanteListFromJsonValue(Source: TJSONValue): TMdfeSefazInfContratanteList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfContratanteList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfContratanteFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfContratanteListFromJson(Source: string): TMdfeSefazInfContratanteList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfContratanteListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazCompToJsonValue(Source: TMdfeSefazComp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpComp', Self.stringToJsonValue(Source.tpComp));
    Json.ObjAddProp(Result, 'vComp', Self.DoubleToJsonValue(Source.vComp));
    if Source.xCompHasValue then
      Json.ObjAddProp(Result, 'xComp', Self.stringToJsonValue(Source.xComp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazCompToJson(Source: TMdfeSefazComp): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazCompToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazCompFromJsonValue(Source: TJSONValue): TMdfeSefazComp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazComp.Create;
  try
    if Json.ObjContains(Source, 'tpComp', JValue) then
      Result.tpComp := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vComp', JValue) then
      Result.vComp := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xComp', JValue) then
      Result.xComp := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazCompFromJson(Source: string): TMdfeSefazComp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazCompFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazCompListToJsonValue(Source: TMdfeSefazCompList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazCompToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazCompListToJson(Source: TMdfeSefazCompList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazCompListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazCompListFromJsonValue(Source: TJSONValue): TMdfeSefazCompList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazCompList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazCompFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazCompListFromJson(Source: string): TMdfeSefazCompList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazCompListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPrazoToJsonValue(Source: TMdfeSefazInfPrazo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nParcela', Self.IntegerToJsonValue(Source.nParcela));
    Json.ObjAddProp(Result, 'dVenc', Self.TDateToJsonValue(Source.dVenc));
    Json.ObjAddProp(Result, 'vParcela', Self.DoubleToJsonValue(Source.vParcela));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPrazoToJson(Source: TMdfeSefazInfPrazo): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfPrazoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPrazoFromJsonValue(Source: TJSONValue): TMdfeSefazInfPrazo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfPrazo.Create;
  try
    if Json.ObjContains(Source, 'nParcela', JValue) then
      Result.nParcela := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dVenc', JValue) then
      Result.dVenc := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vParcela', JValue) then
      Result.vParcela := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPrazoFromJson(Source: string): TMdfeSefazInfPrazo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfPrazoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPrazoListToJsonValue(Source: TMdfeSefazInfPrazoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfPrazoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPrazoListToJson(Source: TMdfeSefazInfPrazoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfPrazoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPrazoListFromJsonValue(Source: TJSONValue): TMdfeSefazInfPrazoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfPrazoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfPrazoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPrazoListFromJson(Source: string): TMdfeSefazInfPrazoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfPrazoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfBancToJsonValue(Source: TMdfeSefazInfBanc): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.codBancoHasValue then
      Json.ObjAddProp(Result, 'codBanco', Self.stringToJsonValue(Source.codBanco));
    if Source.codAgenciaHasValue then
      Json.ObjAddProp(Result, 'codAgencia', Self.stringToJsonValue(Source.codAgencia));
    if Source.CNPJIPEFHasValue then
      Json.ObjAddProp(Result, 'CNPJIPEF', Self.stringToJsonValue(Source.CNPJIPEF));
    if Source.PIXHasValue then
      Json.ObjAddProp(Result, 'PIX', Self.stringToJsonValue(Source.PIX));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfBancToJson(Source: TMdfeSefazInfBanc): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfBancToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfBancFromJsonValue(Source: TJSONValue): TMdfeSefazInfBanc;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfBanc.Create;
  try
    if Json.ObjContains(Source, 'codBanco', JValue) then
      Result.codBanco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codAgencia', JValue) then
      Result.codAgencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJIPEF', JValue) then
      Result.CNPJIPEF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PIX', JValue) then
      Result.PIX := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfBancFromJson(Source: string): TMdfeSefazInfBanc;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfBancFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPagToJsonValue(Source: TMdfeSefazInfPag): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.idEstrangeiroHasValue then
      Json.ObjAddProp(Result, 'idEstrangeiro', Self.stringToJsonValue(Source.idEstrangeiro));
    Json.ObjAddProp(Result, 'Comp', Self.TMdfeSefazCompListToJsonValue(Source.Comp));
    Json.ObjAddProp(Result, 'vContrato', Self.DoubleToJsonValue(Source.vContrato));
    if Source.indAltoDesempHasValue then
      Json.ObjAddProp(Result, 'indAltoDesemp', Self.IntegerToJsonValue(Source.indAltoDesemp));
    Json.ObjAddProp(Result, 'indPag', Self.IntegerToJsonValue(Source.indPag));
    if Source.vAdiantHasValue then
      Json.ObjAddProp(Result, 'vAdiant', Self.DoubleToJsonValue(Source.vAdiant));
    if Source.indAntecipaAdiantHasValue then
      Json.ObjAddProp(Result, 'indAntecipaAdiant', Self.IntegerToJsonValue(Source.indAntecipaAdiant));
    if Assigned(Source.infPrazo) then
      Json.ObjAddProp(Result, 'infPrazo', Self.TMdfeSefazInfPrazoListToJsonValue(Source.infPrazo));
    if Source.tpAntecipHasValue then
      Json.ObjAddProp(Result, 'tpAntecip', Self.IntegerToJsonValue(Source.tpAntecip));
    Json.ObjAddProp(Result, 'infBanc', Self.TMdfeSefazInfBancToJsonValue(Source.infBanc));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPagToJson(Source: TMdfeSefazInfPag): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfPagToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPagFromJsonValue(Source: TJSONValue): TMdfeSefazInfPag;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfPag.Create;
  try
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idEstrangeiro', JValue) then
      Result.idEstrangeiro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'Comp', JValue) then
      Result.Comp := Self.TMdfeSefazCompListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vContrato', JValue) then
      Result.vContrato := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indAltoDesemp', JValue) then
      Result.indAltoDesemp := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indPag', JValue) then
      Result.indPag := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAdiant', JValue) then
      Result.vAdiant := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indAntecipaAdiant', JValue) then
      Result.indAntecipaAdiant := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infPrazo', JValue) then
      Result.infPrazo := Self.TMdfeSefazInfPrazoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpAntecip', JValue) then
      Result.tpAntecip := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infBanc', JValue) then
      Result.infBanc := Self.TMdfeSefazInfBancFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPagFromJson(Source: string): TMdfeSefazInfPag;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfPagFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPagListToJsonValue(Source: TMdfeSefazInfPagList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfPagToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPagListToJson(Source: TMdfeSefazInfPagList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfPagListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfPagListFromJsonValue(Source: TJSONValue): TMdfeSefazInfPagList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfPagList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfPagFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfPagListFromJson(Source: string): TMdfeSefazInfPagList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfPagListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfANTTToJsonValue(Source: TMdfeSefazInfANTT): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.RNTRCHasValue then
      Json.ObjAddProp(Result, 'RNTRC', Self.stringToJsonValue(Source.RNTRC));
    if Assigned(Source.infCIOT) then
      Json.ObjAddProp(Result, 'infCIOT', Self.TMdfeSefazInfCIOTListToJsonValue(Source.infCIOT));
    if Assigned(Source.valePed) then
      Json.ObjAddProp(Result, 'valePed', Self.TMdfeSefazValePedToJsonValue(Source.valePed));
    if Assigned(Source.infContratante) then
      Json.ObjAddProp(Result, 'infContratante', Self.TMdfeSefazInfContratanteListToJsonValue(Source.infContratante));
    if Assigned(Source.infPag) then
      Json.ObjAddProp(Result, 'infPag', Self.TMdfeSefazInfPagListToJsonValue(Source.infPag));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfANTTToJson(Source: TMdfeSefazInfANTT): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfANTTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfANTTFromJsonValue(Source: TJSONValue): TMdfeSefazInfANTT;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfANTT.Create;
  try
    if Json.ObjContains(Source, 'RNTRC', JValue) then
      Result.RNTRC := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCIOT', JValue) then
      Result.infCIOT := Self.TMdfeSefazInfCIOTListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'valePed', JValue) then
      Result.valePed := Self.TMdfeSefazValePedFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infContratante', JValue) then
      Result.infContratante := Self.TMdfeSefazInfContratanteListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infPag', JValue) then
      Result.infPag := Self.TMdfeSefazInfPagListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfANTTFromJson(Source: string): TMdfeSefazInfANTT;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfANTTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazPropToJsonValue(Source: TMdfeSefazProp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    Json.ObjAddProp(Result, 'RNTRC', Self.stringToJsonValue(Source.RNTRC));
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    Json.ObjAddProp(Result, 'tpProp', Self.IntegerToJsonValue(Source.tpProp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazPropToJson(Source: TMdfeSefazProp): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazPropToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazPropFromJsonValue(Source: TJSONValue): TMdfeSefazProp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazProp.Create;
  try
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'RNTRC', JValue) then
      Result.RNTRC := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpProp', JValue) then
      Result.tpProp := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazPropFromJson(Source: string): TMdfeSefazProp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazPropFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazCondutorToJsonValue(Source: TMdfeSefazCondutor): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazCondutorToJson(Source: TMdfeSefazCondutor): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazCondutorToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazCondutorFromJsonValue(Source: TJSONValue): TMdfeSefazCondutor;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazCondutor.Create;
  try
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazCondutorFromJson(Source: string): TMdfeSefazCondutor;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazCondutorFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazCondutorListToJsonValue(Source: TMdfeSefazCondutorList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazCondutorToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazCondutorListToJson(Source: TMdfeSefazCondutorList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazCondutorListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazCondutorListFromJsonValue(Source: TJSONValue): TMdfeSefazCondutorList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazCondutorList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazCondutorFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazCondutorListFromJson(Source: string): TMdfeSefazCondutorList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazCondutorListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVeicTracaoToJsonValue(Source: TMdfeSefazVeicTracao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.cIntHasValue then
      Json.ObjAddProp(Result, 'cInt', Self.stringToJsonValue(Source.cInt));
    Json.ObjAddProp(Result, 'placa', Self.stringToJsonValue(Source.placa));
    if Source.RENAVAMHasValue then
      Json.ObjAddProp(Result, 'RENAVAM', Self.stringToJsonValue(Source.RENAVAM));
    Json.ObjAddProp(Result, 'tara', Self.IntegerToJsonValue(Source.tara));
    if Source.capKGHasValue then
      Json.ObjAddProp(Result, 'capKG', Self.IntegerToJsonValue(Source.capKG));
    if Source.capM3HasValue then
      Json.ObjAddProp(Result, 'capM3', Self.IntegerToJsonValue(Source.capM3));
    if Assigned(Source.prop) then
      Json.ObjAddProp(Result, 'prop', Self.TMdfeSefazPropToJsonValue(Source.prop));
    Json.ObjAddProp(Result, 'condutor', Self.TMdfeSefazCondutorListToJsonValue(Source.condutor));
    Json.ObjAddProp(Result, 'tpRod', Self.stringToJsonValue(Source.tpRod));
    Json.ObjAddProp(Result, 'tpCar', Self.stringToJsonValue(Source.tpCar));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVeicTracaoToJson(Source: TMdfeSefazVeicTracao): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazVeicTracaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVeicTracaoFromJsonValue(Source: TJSONValue): TMdfeSefazVeicTracao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazVeicTracao.Create;
  try
    if Json.ObjContains(Source, 'cInt', JValue) then
      Result.cInt := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'placa', JValue) then
      Result.placa := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'RENAVAM', JValue) then
      Result.RENAVAM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tara', JValue) then
      Result.tara := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'capKG', JValue) then
      Result.capKG := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'capM3', JValue) then
      Result.capM3 := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prop', JValue) then
      Result.prop := Self.TMdfeSefazPropFromJsonValue(JValue);
    if Json.ObjContains(Source, 'condutor', JValue) then
      Result.condutor := Self.TMdfeSefazCondutorListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpRod', JValue) then
      Result.tpRod := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpCar', JValue) then
      Result.tpCar := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVeicTracaoFromJson(Source: string): TMdfeSefazVeicTracao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazVeicTracaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboquePropToJsonValue(Source: TMdfeSefazVeicReboqueProp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    Json.ObjAddProp(Result, 'RNTRC', Self.stringToJsonValue(Source.RNTRC));
    Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    Json.ObjAddProp(Result, 'tpProp', Self.IntegerToJsonValue(Source.tpProp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboquePropToJson(Source: TMdfeSefazVeicReboqueProp): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazVeicReboquePropToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboquePropFromJsonValue(Source: TJSONValue): TMdfeSefazVeicReboqueProp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazVeicReboqueProp.Create;
  try
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'RNTRC', JValue) then
      Result.RNTRC := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpProp', JValue) then
      Result.tpProp := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboquePropFromJson(Source: string): TMdfeSefazVeicReboqueProp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazVeicReboquePropFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboqueToJsonValue(Source: TMdfeSefazVeicReboque): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.cIntHasValue then
      Json.ObjAddProp(Result, 'cInt', Self.stringToJsonValue(Source.cInt));
    Json.ObjAddProp(Result, 'placa', Self.stringToJsonValue(Source.placa));
    if Source.RENAVAMHasValue then
      Json.ObjAddProp(Result, 'RENAVAM', Self.stringToJsonValue(Source.RENAVAM));
    Json.ObjAddProp(Result, 'tara', Self.IntegerToJsonValue(Source.tara));
    Json.ObjAddProp(Result, 'capKG', Self.IntegerToJsonValue(Source.capKG));
    if Source.capM3HasValue then
      Json.ObjAddProp(Result, 'capM3', Self.IntegerToJsonValue(Source.capM3));
    if Assigned(Source.prop) then
      Json.ObjAddProp(Result, 'prop', Self.TMdfeSefazVeicReboquePropToJsonValue(Source.prop));
    Json.ObjAddProp(Result, 'tpCar', Self.stringToJsonValue(Source.tpCar));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboqueToJson(Source: TMdfeSefazVeicReboque): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazVeicReboqueToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboqueFromJsonValue(Source: TJSONValue): TMdfeSefazVeicReboque;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazVeicReboque.Create;
  try
    if Json.ObjContains(Source, 'cInt', JValue) then
      Result.cInt := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'placa', JValue) then
      Result.placa := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'RENAVAM', JValue) then
      Result.RENAVAM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tara', JValue) then
      Result.tara := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'capKG', JValue) then
      Result.capKG := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'capM3', JValue) then
      Result.capM3 := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prop', JValue) then
      Result.prop := Self.TMdfeSefazVeicReboquePropFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpCar', JValue) then
      Result.tpCar := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboqueFromJson(Source: string): TMdfeSefazVeicReboque;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazVeicReboqueFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboqueListToJsonValue(Source: TMdfeSefazVeicReboqueList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazVeicReboqueToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboqueListToJson(Source: TMdfeSefazVeicReboqueList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazVeicReboqueListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboqueListFromJsonValue(Source: TJSONValue): TMdfeSefazVeicReboqueList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazVeicReboqueList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazVeicReboqueFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVeicReboqueListFromJson(Source: string): TMdfeSefazVeicReboqueList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazVeicReboqueListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacRodoToJsonValue(Source: TMdfeSefazLacRodo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nLacre', Self.stringToJsonValue(Source.nLacre));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacRodoToJson(Source: TMdfeSefazLacRodo): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazLacRodoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacRodoFromJsonValue(Source: TJSONValue): TMdfeSefazLacRodo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazLacRodo.Create;
  try
    if Json.ObjContains(Source, 'nLacre', JValue) then
      Result.nLacre := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacRodoFromJson(Source: string): TMdfeSefazLacRodo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazLacRodoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacRodoListToJsonValue(Source: TMdfeSefazLacRodoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazLacRodoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacRodoListToJson(Source: TMdfeSefazLacRodoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazLacRodoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacRodoListFromJsonValue(Source: TJSONValue): TMdfeSefazLacRodoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazLacRodoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazLacRodoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacRodoListFromJson(Source: string): TMdfeSefazLacRodoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazLacRodoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazRodoToJsonValue(Source: TMdfeSefazRodo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.infANTT) then
      Json.ObjAddProp(Result, 'infANTT', Self.TMdfeSefazInfANTTToJsonValue(Source.infANTT));
    Json.ObjAddProp(Result, 'veicTracao', Self.TMdfeSefazVeicTracaoToJsonValue(Source.veicTracao));
    if Assigned(Source.veicReboque) then
      Json.ObjAddProp(Result, 'veicReboque', Self.TMdfeSefazVeicReboqueListToJsonValue(Source.veicReboque));
    if Source.codAgPortoHasValue then
      Json.ObjAddProp(Result, 'codAgPorto', Self.stringToJsonValue(Source.codAgPorto));
    if Assigned(Source.lacRodo) then
      Json.ObjAddProp(Result, 'lacRodo', Self.TMdfeSefazLacRodoListToJsonValue(Source.lacRodo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazRodoToJson(Source: TMdfeSefazRodo): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazRodoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazRodoFromJsonValue(Source: TJSONValue): TMdfeSefazRodo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazRodo.Create;
  try
    if Json.ObjContains(Source, 'infANTT', JValue) then
      Result.infANTT := Self.TMdfeSefazInfANTTFromJsonValue(JValue);
    if Json.ObjContains(Source, 'veicTracao', JValue) then
      Result.veicTracao := Self.TMdfeSefazVeicTracaoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'veicReboque', JValue) then
      Result.veicReboque := Self.TMdfeSefazVeicReboqueListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codAgPorto', JValue) then
      Result.codAgPorto := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lacRodo', JValue) then
      Result.lacRodo := Self.TMdfeSefazLacRodoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazRodoFromJson(Source: string): TMdfeSefazRodo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazRodoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermCarregToJsonValue(Source: TMdfeSefazInfTermCarreg): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cTermCarreg', Self.stringToJsonValue(Source.cTermCarreg));
    Json.ObjAddProp(Result, 'xTermCarreg', Self.stringToJsonValue(Source.xTermCarreg));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermCarregToJson(Source: TMdfeSefazInfTermCarreg): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfTermCarregToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermCarregFromJsonValue(Source: TJSONValue): TMdfeSefazInfTermCarreg;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfTermCarreg.Create;
  try
    if Json.ObjContains(Source, 'cTermCarreg', JValue) then
      Result.cTermCarreg := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xTermCarreg', JValue) then
      Result.xTermCarreg := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermCarregFromJson(Source: string): TMdfeSefazInfTermCarreg;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfTermCarregFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermCarregListToJsonValue(Source: TMdfeSefazInfTermCarregList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfTermCarregToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermCarregListToJson(Source: TMdfeSefazInfTermCarregList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfTermCarregListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermCarregListFromJsonValue(Source: TJSONValue): TMdfeSefazInfTermCarregList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfTermCarregList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfTermCarregFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermCarregListFromJson(Source: string): TMdfeSefazInfTermCarregList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfTermCarregListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermDescarregToJsonValue(Source: TMdfeSefazInfTermDescarreg): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cTermDescarreg', Self.stringToJsonValue(Source.cTermDescarreg));
    Json.ObjAddProp(Result, 'xTermDescarreg', Self.stringToJsonValue(Source.xTermDescarreg));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermDescarregToJson(Source: TMdfeSefazInfTermDescarreg): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfTermDescarregToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermDescarregFromJsonValue(Source: TJSONValue): TMdfeSefazInfTermDescarreg;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfTermDescarreg.Create;
  try
    if Json.ObjContains(Source, 'cTermDescarreg', JValue) then
      Result.cTermDescarreg := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xTermDescarreg', JValue) then
      Result.xTermDescarreg := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermDescarregFromJson(Source: string): TMdfeSefazInfTermDescarreg;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfTermDescarregFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermDescarregListToJsonValue(Source: TMdfeSefazInfTermDescarregList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfTermDescarregToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermDescarregListToJson(Source: TMdfeSefazInfTermDescarregList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfTermDescarregListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermDescarregListFromJsonValue(Source: TJSONValue): TMdfeSefazInfTermDescarregList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfTermDescarregList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfTermDescarregFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfTermDescarregListFromJson(Source: string): TMdfeSefazInfTermDescarregList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfTermDescarregListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfEmbCombToJsonValue(Source: TMdfeSefazInfEmbComb): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cEmbComb', Self.stringToJsonValue(Source.cEmbComb));
    Json.ObjAddProp(Result, 'xBalsa', Self.stringToJsonValue(Source.xBalsa));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfEmbCombToJson(Source: TMdfeSefazInfEmbComb): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfEmbCombToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfEmbCombFromJsonValue(Source: TJSONValue): TMdfeSefazInfEmbComb;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfEmbComb.Create;
  try
    if Json.ObjContains(Source, 'cEmbComb', JValue) then
      Result.cEmbComb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBalsa', JValue) then
      Result.xBalsa := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfEmbCombFromJson(Source: string): TMdfeSefazInfEmbComb;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfEmbCombFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfEmbCombListToJsonValue(Source: TMdfeSefazInfEmbCombList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfEmbCombToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfEmbCombListToJson(Source: TMdfeSefazInfEmbCombList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfEmbCombListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfEmbCombListFromJsonValue(Source: TJSONValue): TMdfeSefazInfEmbCombList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfEmbCombList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfEmbCombFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfEmbCombListFromJson(Source: string): TMdfeSefazInfEmbCombList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfEmbCombListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidCargaVaziaToJsonValue(Source: TMdfeSefazInfUnidCargaVazia): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'idUnidCargaVazia', Self.stringToJsonValue(Source.idUnidCargaVazia));
    Json.ObjAddProp(Result, 'tpUnidCargaVazia', Self.IntegerToJsonValue(Source.tpUnidCargaVazia));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidCargaVaziaToJson(Source: TMdfeSefazInfUnidCargaVazia): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfUnidCargaVaziaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidCargaVaziaFromJsonValue(Source: TJSONValue): TMdfeSefazInfUnidCargaVazia;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfUnidCargaVazia.Create;
  try
    if Json.ObjContains(Source, 'idUnidCargaVazia', JValue) then
      Result.idUnidCargaVazia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpUnidCargaVazia', JValue) then
      Result.tpUnidCargaVazia := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidCargaVaziaFromJson(Source: string): TMdfeSefazInfUnidCargaVazia;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfUnidCargaVaziaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidCargaVaziaListToJsonValue(Source: TMdfeSefazInfUnidCargaVaziaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfUnidCargaVaziaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidCargaVaziaListToJson(Source: TMdfeSefazInfUnidCargaVaziaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfUnidCargaVaziaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidCargaVaziaListFromJsonValue(Source: TJSONValue): TMdfeSefazInfUnidCargaVaziaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfUnidCargaVaziaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfUnidCargaVaziaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidCargaVaziaListFromJson(Source: string): TMdfeSefazInfUnidCargaVaziaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfUnidCargaVaziaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidTranspVaziaToJsonValue(Source: TMdfeSefazInfUnidTranspVazia): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'idUnidTranspVazia', Self.stringToJsonValue(Source.idUnidTranspVazia));
    Json.ObjAddProp(Result, 'tpUnidTranspVazia', Self.IntegerToJsonValue(Source.tpUnidTranspVazia));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidTranspVaziaToJson(Source: TMdfeSefazInfUnidTranspVazia): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfUnidTranspVaziaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidTranspVaziaFromJsonValue(Source: TJSONValue): TMdfeSefazInfUnidTranspVazia;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfUnidTranspVazia.Create;
  try
    if Json.ObjContains(Source, 'idUnidTranspVazia', JValue) then
      Result.idUnidTranspVazia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpUnidTranspVazia', JValue) then
      Result.tpUnidTranspVazia := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidTranspVaziaFromJson(Source: string): TMdfeSefazInfUnidTranspVazia;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfUnidTranspVaziaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidTranspVaziaListToJsonValue(Source: TMdfeSefazInfUnidTranspVaziaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfUnidTranspVaziaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidTranspVaziaListToJson(Source: TMdfeSefazInfUnidTranspVaziaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfUnidTranspVaziaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidTranspVaziaListFromJsonValue(Source: TJSONValue): TMdfeSefazInfUnidTranspVaziaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfUnidTranspVaziaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfUnidTranspVaziaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfUnidTranspVaziaListFromJson(Source: string): TMdfeSefazInfUnidTranspVaziaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfUnidTranspVaziaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazAquavToJsonValue(Source: TMdfeSefazAquav): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'irin', Self.stringToJsonValue(Source.irin));
    Json.ObjAddProp(Result, 'tpEmb', Self.stringToJsonValue(Source.tpEmb));
    Json.ObjAddProp(Result, 'cEmbar', Self.stringToJsonValue(Source.cEmbar));
    Json.ObjAddProp(Result, 'xEmbar', Self.stringToJsonValue(Source.xEmbar));
    Json.ObjAddProp(Result, 'nViag', Self.stringToJsonValue(Source.nViag));
    Json.ObjAddProp(Result, 'cPrtEmb', Self.stringToJsonValue(Source.cPrtEmb));
    Json.ObjAddProp(Result, 'cPrtDest', Self.stringToJsonValue(Source.cPrtDest));
    if Source.prtTransHasValue then
      Json.ObjAddProp(Result, 'prtTrans', Self.stringToJsonValue(Source.prtTrans));
    if Source.tpNavHasValue then
      Json.ObjAddProp(Result, 'tpNav', Self.IntegerToJsonValue(Source.tpNav));
    if Assigned(Source.infTermCarreg) then
      Json.ObjAddProp(Result, 'infTermCarreg', Self.TMdfeSefazInfTermCarregListToJsonValue(Source.infTermCarreg));
    if Assigned(Source.infTermDescarreg) then
      Json.ObjAddProp(Result, 'infTermDescarreg', Self.TMdfeSefazInfTermDescarregListToJsonValue(Source.infTermDescarreg));
    if Assigned(Source.infEmbComb) then
      Json.ObjAddProp(Result, 'infEmbComb', Self.TMdfeSefazInfEmbCombListToJsonValue(Source.infEmbComb));
    if Assigned(Source.infUnidCargaVazia) then
      Json.ObjAddProp(Result, 'infUnidCargaVazia', Self.TMdfeSefazInfUnidCargaVaziaListToJsonValue(Source.infUnidCargaVazia));
    if Assigned(Source.infUnidTranspVazia) then
      Json.ObjAddProp(Result, 'infUnidTranspVazia', Self.TMdfeSefazInfUnidTranspVaziaListToJsonValue(Source.infUnidTranspVazia));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazAquavToJson(Source: TMdfeSefazAquav): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazAquavToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazAquavFromJsonValue(Source: TJSONValue): TMdfeSefazAquav;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazAquav.Create;
  try
    if Json.ObjContains(Source, 'irin', JValue) then
      Result.irin := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpEmb', JValue) then
      Result.tpEmb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cEmbar', JValue) then
      Result.cEmbar := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xEmbar', JValue) then
      Result.xEmbar := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nViag', JValue) then
      Result.nViag := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPrtEmb', JValue) then
      Result.cPrtEmb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPrtDest', JValue) then
      Result.cPrtDest := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prtTrans', JValue) then
      Result.prtTrans := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpNav', JValue) then
      Result.tpNav := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infTermCarreg', JValue) then
      Result.infTermCarreg := Self.TMdfeSefazInfTermCarregListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infTermDescarreg', JValue) then
      Result.infTermDescarreg := Self.TMdfeSefazInfTermDescarregListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infEmbComb', JValue) then
      Result.infEmbComb := Self.TMdfeSefazInfEmbCombListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidCargaVazia', JValue) then
      Result.infUnidCargaVazia := Self.TMdfeSefazInfUnidCargaVaziaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidTranspVazia', JValue) then
      Result.infUnidTranspVazia := Self.TMdfeSefazInfUnidTranspVaziaListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazAquavFromJson(Source: string): TMdfeSefazAquav;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazAquavFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazTremToJsonValue(Source: TMdfeSefazTrem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xPref', Self.stringToJsonValue(Source.xPref));
    if Source.dhTremHasValue then
      Json.ObjAddProp(Result, 'dhTrem', Self.TDateTimeToJsonValue(Source.dhTrem));
    Json.ObjAddProp(Result, 'xOri', Self.stringToJsonValue(Source.xOri));
    Json.ObjAddProp(Result, 'xDest', Self.stringToJsonValue(Source.xDest));
    Json.ObjAddProp(Result, 'qVag', Self.IntegerToJsonValue(Source.qVag));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazTremToJson(Source: TMdfeSefazTrem): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazTremToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazTremFromJsonValue(Source: TJSONValue): TMdfeSefazTrem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazTrem.Create;
  try
    if Json.ObjContains(Source, 'xPref', JValue) then
      Result.xPref := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhTrem', JValue) then
      Result.dhTrem := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xOri', JValue) then
      Result.xOri := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xDest', JValue) then
      Result.xDest := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qVag', JValue) then
      Result.qVag := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazTremFromJson(Source: string): TMdfeSefazTrem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazTremFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVagToJsonValue(Source: TMdfeSefazVag): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'pesoBC', Self.DoubleToJsonValue(Source.pesoBC));
    Json.ObjAddProp(Result, 'pesoR', Self.DoubleToJsonValue(Source.pesoR));
    if Source.tpVagHasValue then
      Json.ObjAddProp(Result, 'tpVag', Self.stringToJsonValue(Source.tpVag));
    Json.ObjAddProp(Result, 'serie', Self.stringToJsonValue(Source.serie));
    Json.ObjAddProp(Result, 'nVag', Self.IntegerToJsonValue(Source.nVag));
    if Source.nSeqHasValue then
      Json.ObjAddProp(Result, 'nSeq', Self.IntegerToJsonValue(Source.nSeq));
    Json.ObjAddProp(Result, 'TU', Self.DoubleToJsonValue(Source.TU));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVagToJson(Source: TMdfeSefazVag): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazVagToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVagFromJsonValue(Source: TJSONValue): TMdfeSefazVag;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazVag.Create;
  try
    if Json.ObjContains(Source, 'pesoBC', JValue) then
      Result.pesoBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pesoR', JValue) then
      Result.pesoR := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpVag', JValue) then
      Result.tpVag := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nVag', JValue) then
      Result.nVag := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nSeq', JValue) then
      Result.nSeq := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'TU', JValue) then
      Result.TU := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVagFromJson(Source: string): TMdfeSefazVag;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazVagFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVagListToJsonValue(Source: TMdfeSefazVagList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazVagToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVagListToJson(Source: TMdfeSefazVagList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazVagListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazVagListFromJsonValue(Source: TJSONValue): TMdfeSefazVagList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazVagList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazVagFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazVagListFromJson(Source: string): TMdfeSefazVagList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazVagListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazFerrovToJsonValue(Source: TMdfeSefazFerrov): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'trem', Self.TMdfeSefazTremToJsonValue(Source.trem));
    Json.ObjAddProp(Result, 'vag', Self.TMdfeSefazVagListToJsonValue(Source.vag));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazFerrovToJson(Source: TMdfeSefazFerrov): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazFerrovToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazFerrovFromJsonValue(Source: TJSONValue): TMdfeSefazFerrov;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazFerrov.Create;
  try
    if Json.ObjContains(Source, 'trem', JValue) then
      Result.trem := Self.TMdfeSefazTremFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vag', JValue) then
      Result.vag := Self.TMdfeSefazVagListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazFerrovFromJson(Source: string): TMdfeSefazFerrov;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazFerrovFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfModalToJsonValue(Source: TMdfeSefazInfModal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'versaoModal', Self.stringToJsonValue(Source.versaoModal));
    if Assigned(Source.aereo) then
      Json.ObjAddProp(Result, 'aereo', Self.TMdfeSefazAereoToJsonValue(Source.aereo));
    if Assigned(Source.rodo) then
      Json.ObjAddProp(Result, 'rodo', Self.TMdfeSefazRodoToJsonValue(Source.rodo));
    if Assigned(Source.aquav) then
      Json.ObjAddProp(Result, 'aquav', Self.TMdfeSefazAquavToJsonValue(Source.aquav));
    if Assigned(Source.ferrov) then
      Json.ObjAddProp(Result, 'ferrov', Self.TMdfeSefazFerrovToJsonValue(Source.ferrov));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfModalToJson(Source: TMdfeSefazInfModal): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfModalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfModalFromJsonValue(Source: TJSONValue): TMdfeSefazInfModal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfModal.Create;
  try
    if Json.ObjContains(Source, 'versaoModal', JValue) then
      Result.versaoModal := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aereo', JValue) then
      Result.aereo := Self.TMdfeSefazAereoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'rodo', JValue) then
      Result.rodo := Self.TMdfeSefazRodoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'aquav', JValue) then
      Result.aquav := Self.TMdfeSefazAquavFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ferrov', JValue) then
      Result.ferrov := Self.TMdfeSefazFerrovFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfModalFromJson(Source: string): TMdfeSefazInfModal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfModalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidTranspToJsonValue(Source: TMdfeSefazLacUnidTransp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nLacre', Self.stringToJsonValue(Source.nLacre));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidTranspToJson(Source: TMdfeSefazLacUnidTransp): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazLacUnidTranspToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidTranspFromJsonValue(Source: TJSONValue): TMdfeSefazLacUnidTransp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazLacUnidTransp.Create;
  try
    if Json.ObjContains(Source, 'nLacre', JValue) then
      Result.nLacre := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidTranspFromJson(Source: string): TMdfeSefazLacUnidTransp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazLacUnidTranspFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidTranspListToJsonValue(Source: TMdfeSefazLacUnidTranspList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazLacUnidTranspToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidTranspListToJson(Source: TMdfeSefazLacUnidTranspList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazLacUnidTranspListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidTranspListFromJsonValue(Source: TJSONValue): TMdfeSefazLacUnidTranspList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazLacUnidTranspList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazLacUnidTranspFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidTranspListFromJson(Source: string): TMdfeSefazLacUnidTranspList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazLacUnidTranspListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidCargaToJsonValue(Source: TMdfeSefazLacUnidCarga): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nLacre', Self.stringToJsonValue(Source.nLacre));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidCargaToJson(Source: TMdfeSefazLacUnidCarga): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazLacUnidCargaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidCargaFromJsonValue(Source: TJSONValue): TMdfeSefazLacUnidCarga;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazLacUnidCarga.Create;
  try
    if Json.ObjContains(Source, 'nLacre', JValue) then
      Result.nLacre := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidCargaFromJson(Source: string): TMdfeSefazLacUnidCarga;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazLacUnidCargaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidCargaListToJsonValue(Source: TMdfeSefazLacUnidCargaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazLacUnidCargaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidCargaListToJson(Source: TMdfeSefazLacUnidCargaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazLacUnidCargaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidCargaListFromJsonValue(Source: TJSONValue): TMdfeSefazLacUnidCargaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazLacUnidCargaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazLacUnidCargaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacUnidCargaListFromJson(Source: string): TMdfeSefazLacUnidCargaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazLacUnidCargaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazUnidCargaToJsonValue(Source: TMdfeSefazUnidCarga): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpUnidCarga', Self.IntegerToJsonValue(Source.tpUnidCarga));
    Json.ObjAddProp(Result, 'idUnidCarga', Self.stringToJsonValue(Source.idUnidCarga));
    if Assigned(Source.lacUnidCarga) then
      Json.ObjAddProp(Result, 'lacUnidCarga', Self.TMdfeSefazLacUnidCargaListToJsonValue(Source.lacUnidCarga));
    if Source.qtdRatHasValue then
      Json.ObjAddProp(Result, 'qtdRat', Self.DoubleToJsonValue(Source.qtdRat));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazUnidCargaToJson(Source: TMdfeSefazUnidCarga): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazUnidCargaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazUnidCargaFromJsonValue(Source: TJSONValue): TMdfeSefazUnidCarga;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazUnidCarga.Create;
  try
    if Json.ObjContains(Source, 'tpUnidCarga', JValue) then
      Result.tpUnidCarga := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idUnidCarga', JValue) then
      Result.idUnidCarga := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lacUnidCarga', JValue) then
      Result.lacUnidCarga := Self.TMdfeSefazLacUnidCargaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qtdRat', JValue) then
      Result.qtdRat := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazUnidCargaFromJson(Source: string): TMdfeSefazUnidCarga;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazUnidCargaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazUnidCargaListToJsonValue(Source: TMdfeSefazUnidCargaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazUnidCargaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazUnidCargaListToJson(Source: TMdfeSefazUnidCargaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazUnidCargaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazUnidCargaListFromJsonValue(Source: TJSONValue): TMdfeSefazUnidCargaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazUnidCargaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazUnidCargaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazUnidCargaListFromJson(Source: string): TMdfeSefazUnidCargaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazUnidCargaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazUnidadeTranspToJsonValue(Source: TMdfeSefazUnidadeTransp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpUnidTransp', Self.IntegerToJsonValue(Source.tpUnidTransp));
    Json.ObjAddProp(Result, 'idUnidTransp', Self.stringToJsonValue(Source.idUnidTransp));
    if Assigned(Source.lacUnidTransp) then
      Json.ObjAddProp(Result, 'lacUnidTransp', Self.TMdfeSefazLacUnidTranspListToJsonValue(Source.lacUnidTransp));
    if Assigned(Source.infUnidCarga) then
      Json.ObjAddProp(Result, 'infUnidCarga', Self.TMdfeSefazUnidCargaListToJsonValue(Source.infUnidCarga));
    if Source.qtdRatHasValue then
      Json.ObjAddProp(Result, 'qtdRat', Self.DoubleToJsonValue(Source.qtdRat));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazUnidadeTranspToJson(Source: TMdfeSefazUnidadeTransp): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazUnidadeTranspToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazUnidadeTranspFromJsonValue(Source: TJSONValue): TMdfeSefazUnidadeTransp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazUnidadeTransp.Create;
  try
    if Json.ObjContains(Source, 'tpUnidTransp', JValue) then
      Result.tpUnidTransp := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idUnidTransp', JValue) then
      Result.idUnidTransp := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lacUnidTransp', JValue) then
      Result.lacUnidTransp := Self.TMdfeSefazLacUnidTranspListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidCarga', JValue) then
      Result.infUnidCarga := Self.TMdfeSefazUnidCargaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qtdRat', JValue) then
      Result.qtdRat := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazUnidadeTranspFromJson(Source: string): TMdfeSefazUnidadeTransp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazUnidadeTranspFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazUnidadeTranspListToJsonValue(Source: TMdfeSefazUnidadeTranspList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazUnidadeTranspToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazUnidadeTranspListToJson(Source: TMdfeSefazUnidadeTranspList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazUnidadeTranspListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazUnidadeTranspListFromJsonValue(Source: TJSONValue): TMdfeSefazUnidadeTranspList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazUnidadeTranspList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazUnidadeTranspFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazUnidadeTranspListFromJson(Source: string): TMdfeSefazUnidadeTranspList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazUnidadeTranspListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazPeriToJsonValue(Source: TMdfeSefazPeri): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nONU', Self.stringToJsonValue(Source.nONU));
    if Source.xNomeAEHasValue then
      Json.ObjAddProp(Result, 'xNomeAE', Self.stringToJsonValue(Source.xNomeAE));
    if Source.xClaRiscoHasValue then
      Json.ObjAddProp(Result, 'xClaRisco', Self.stringToJsonValue(Source.xClaRisco));
    if Source.grEmbHasValue then
      Json.ObjAddProp(Result, 'grEmb', Self.stringToJsonValue(Source.grEmb));
    Json.ObjAddProp(Result, 'qTotProd', Self.stringToJsonValue(Source.qTotProd));
    if Source.qVolTipoHasValue then
      Json.ObjAddProp(Result, 'qVolTipo', Self.stringToJsonValue(Source.qVolTipo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazPeriToJson(Source: TMdfeSefazPeri): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazPeriToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazPeriFromJsonValue(Source: TJSONValue): TMdfeSefazPeri;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazPeri.Create;
  try
    if Json.ObjContains(Source, 'nONU', JValue) then
      Result.nONU := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNomeAE', JValue) then
      Result.xNomeAE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xClaRisco', JValue) then
      Result.xClaRisco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'grEmb', JValue) then
      Result.grEmb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qTotProd', JValue) then
      Result.qTotProd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qVolTipo', JValue) then
      Result.qVolTipo := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazPeriFromJson(Source: string): TMdfeSefazPeri;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazPeriFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazPeriListToJsonValue(Source: TMdfeSefazPeriList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazPeriToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazPeriListToJson(Source: TMdfeSefazPeriList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazPeriListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazPeriListFromJsonValue(Source: TJSONValue): TMdfeSefazPeriList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazPeriList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazPeriFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazPeriListFromJson(Source: string): TMdfeSefazPeriList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazPeriListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfEntregaParcialToJsonValue(Source: TMdfeSefazInfEntregaParcial): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'qtdTotal', Self.DoubleToJsonValue(Source.qtdTotal));
    Json.ObjAddProp(Result, 'qtdParcial', Self.DoubleToJsonValue(Source.qtdParcial));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfEntregaParcialToJson(Source: TMdfeSefazInfEntregaParcial): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfEntregaParcialToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfEntregaParcialFromJsonValue(Source: TJSONValue): TMdfeSefazInfEntregaParcial;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfEntregaParcial.Create;
  try
    if Json.ObjContains(Source, 'qtdTotal', JValue) then
      Result.qtdTotal := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qtdParcial', JValue) then
      Result.qtdParcial := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfEntregaParcialFromJson(Source: string): TMdfeSefazInfEntregaParcial;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfEntregaParcialFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfCTeToJsonValue(Source: TMdfeSefazInfCTe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'chCTe', Self.stringToJsonValue(Source.chCTe));
    if Source.SegCodBarraHasValue then
      Json.ObjAddProp(Result, 'SegCodBarra', Self.stringToJsonValue(Source.SegCodBarra));
    if Source.indReentregaHasValue then
      Json.ObjAddProp(Result, 'indReentrega', Self.IntegerToJsonValue(Source.indReentrega));
    if Assigned(Source.infUnidTransp) then
      Json.ObjAddProp(Result, 'infUnidTransp', Self.TMdfeSefazUnidadeTranspListToJsonValue(Source.infUnidTransp));
    if Assigned(Source.peri) then
      Json.ObjAddProp(Result, 'peri', Self.TMdfeSefazPeriListToJsonValue(Source.peri));
    if Assigned(Source.infEntregaParcial) then
      Json.ObjAddProp(Result, 'infEntregaParcial', Self.TMdfeSefazInfEntregaParcialToJsonValue(Source.infEntregaParcial));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfCTeToJson(Source: TMdfeSefazInfCTe): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfCTeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfCTeFromJsonValue(Source: TJSONValue): TMdfeSefazInfCTe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfCTe.Create;
  try
    if Json.ObjContains(Source, 'chCTe', JValue) then
      Result.chCTe := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'SegCodBarra', JValue) then
      Result.SegCodBarra := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indReentrega', JValue) then
      Result.indReentrega := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidTransp', JValue) then
      Result.infUnidTransp := Self.TMdfeSefazUnidadeTranspListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'peri', JValue) then
      Result.peri := Self.TMdfeSefazPeriListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infEntregaParcial', JValue) then
      Result.infEntregaParcial := Self.TMdfeSefazInfEntregaParcialFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfCTeFromJson(Source: string): TMdfeSefazInfCTe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfCTeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfCTeListToJsonValue(Source: TMdfeSefazInfCTeList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfCTeToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfCTeListToJson(Source: TMdfeSefazInfCTeList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfCTeListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfCTeListFromJsonValue(Source: TJSONValue): TMdfeSefazInfCTeList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfCTeList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfCTeFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfCTeListFromJson(Source: string): TMdfeSefazInfCTeList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfCTeListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFePeriToJsonValue(Source: TMdfeSefazInfNFePeri): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nONU', Self.stringToJsonValue(Source.nONU));
    if Source.xNomeAEHasValue then
      Json.ObjAddProp(Result, 'xNomeAE', Self.stringToJsonValue(Source.xNomeAE));
    if Source.xClaRiscoHasValue then
      Json.ObjAddProp(Result, 'xClaRisco', Self.stringToJsonValue(Source.xClaRisco));
    if Source.grEmbHasValue then
      Json.ObjAddProp(Result, 'grEmb', Self.stringToJsonValue(Source.grEmb));
    Json.ObjAddProp(Result, 'qTotProd', Self.stringToJsonValue(Source.qTotProd));
    if Source.qVolTipoHasValue then
      Json.ObjAddProp(Result, 'qVolTipo', Self.stringToJsonValue(Source.qVolTipo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFePeriToJson(Source: TMdfeSefazInfNFePeri): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfNFePeriToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFePeriFromJsonValue(Source: TJSONValue): TMdfeSefazInfNFePeri;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfNFePeri.Create;
  try
    if Json.ObjContains(Source, 'nONU', JValue) then
      Result.nONU := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNomeAE', JValue) then
      Result.xNomeAE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xClaRisco', JValue) then
      Result.xClaRisco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'grEmb', JValue) then
      Result.grEmb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qTotProd', JValue) then
      Result.qTotProd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qVolTipo', JValue) then
      Result.qVolTipo := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFePeriFromJson(Source: string): TMdfeSefazInfNFePeri;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfNFePeriFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFePeriListToJsonValue(Source: TMdfeSefazInfNFePeriList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfNFePeriToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFePeriListToJson(Source: TMdfeSefazInfNFePeriList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfNFePeriListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFePeriListFromJsonValue(Source: TJSONValue): TMdfeSefazInfNFePeriList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfNFePeriList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfNFePeriFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFePeriListFromJson(Source: string): TMdfeSefazInfNFePeriList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfNFePeriListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFeToJsonValue(Source: TMdfeSefazInfNFe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'chNFe', Self.stringToJsonValue(Source.chNFe));
    if Source.SegCodBarraHasValue then
      Json.ObjAddProp(Result, 'SegCodBarra', Self.stringToJsonValue(Source.SegCodBarra));
    if Source.indReentregaHasValue then
      Json.ObjAddProp(Result, 'indReentrega', Self.IntegerToJsonValue(Source.indReentrega));
    if Assigned(Source.infUnidTransp) then
      Json.ObjAddProp(Result, 'infUnidTransp', Self.TMdfeSefazUnidadeTranspListToJsonValue(Source.infUnidTransp));
    if Assigned(Source.peri) then
      Json.ObjAddProp(Result, 'peri', Self.TMdfeSefazInfNFePeriListToJsonValue(Source.peri));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFeToJson(Source: TMdfeSefazInfNFe): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfNFeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFeFromJsonValue(Source: TJSONValue): TMdfeSefazInfNFe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfNFe.Create;
  try
    if Json.ObjContains(Source, 'chNFe', JValue) then
      Result.chNFe := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'SegCodBarra', JValue) then
      Result.SegCodBarra := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indReentrega', JValue) then
      Result.indReentrega := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidTransp', JValue) then
      Result.infUnidTransp := Self.TMdfeSefazUnidadeTranspListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'peri', JValue) then
      Result.peri := Self.TMdfeSefazInfNFePeriListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFeFromJson(Source: string): TMdfeSefazInfNFe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfNFeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFeListToJsonValue(Source: TMdfeSefazInfNFeList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfNFeToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFeListToJson(Source: TMdfeSefazInfNFeList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfNFeListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFeListFromJsonValue(Source: TJSONValue): TMdfeSefazInfNFeList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfNFeList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfNFeFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfNFeListFromJson(Source: string): TMdfeSefazInfNFeList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfNFeListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspPeriToJsonValue(Source: TMdfeSefazInfMDFeTranspPeri): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nONU', Self.stringToJsonValue(Source.nONU));
    if Source.xNomeAEHasValue then
      Json.ObjAddProp(Result, 'xNomeAE', Self.stringToJsonValue(Source.xNomeAE));
    if Source.xClaRiscoHasValue then
      Json.ObjAddProp(Result, 'xClaRisco', Self.stringToJsonValue(Source.xClaRisco));
    if Source.grEmbHasValue then
      Json.ObjAddProp(Result, 'grEmb', Self.stringToJsonValue(Source.grEmb));
    Json.ObjAddProp(Result, 'qTotProd', Self.stringToJsonValue(Source.qTotProd));
    if Source.qVolTipoHasValue then
      Json.ObjAddProp(Result, 'qVolTipo', Self.stringToJsonValue(Source.qVolTipo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspPeriToJson(Source: TMdfeSefazInfMDFeTranspPeri): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMDFeTranspPeriToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspPeriFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeTranspPeri;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMDFeTranspPeri.Create;
  try
    if Json.ObjContains(Source, 'nONU', JValue) then
      Result.nONU := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNomeAE', JValue) then
      Result.xNomeAE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xClaRisco', JValue) then
      Result.xClaRisco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'grEmb', JValue) then
      Result.grEmb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qTotProd', JValue) then
      Result.qTotProd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qVolTipo', JValue) then
      Result.qVolTipo := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspPeriFromJson(Source: string): TMdfeSefazInfMDFeTranspPeri;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMDFeTranspPeriFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspPeriListToJsonValue(Source: TMdfeSefazInfMDFeTranspPeriList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfMDFeTranspPeriToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspPeriListToJson(Source: TMdfeSefazInfMDFeTranspPeriList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMDFeTranspPeriListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspPeriListFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeTranspPeriList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMDFeTranspPeriList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfMDFeTranspPeriFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspPeriListFromJson(Source: string): TMdfeSefazInfMDFeTranspPeriList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMDFeTranspPeriListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspToJsonValue(Source: TMdfeSefazInfMDFeTransp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'chMDFe', Self.stringToJsonValue(Source.chMDFe));
    if Source.indReentregaHasValue then
      Json.ObjAddProp(Result, 'indReentrega', Self.IntegerToJsonValue(Source.indReentrega));
    if Assigned(Source.infUnidTransp) then
      Json.ObjAddProp(Result, 'infUnidTransp', Self.TMdfeSefazUnidadeTranspListToJsonValue(Source.infUnidTransp));
    if Assigned(Source.peri) then
      Json.ObjAddProp(Result, 'peri', Self.TMdfeSefazInfMDFeTranspPeriListToJsonValue(Source.peri));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspToJson(Source: TMdfeSefazInfMDFeTransp): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMDFeTranspToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeTransp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMDFeTransp.Create;
  try
    if Json.ObjContains(Source, 'chMDFe', JValue) then
      Result.chMDFe := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indReentrega', JValue) then
      Result.indReentrega := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infUnidTransp', JValue) then
      Result.infUnidTransp := Self.TMdfeSefazUnidadeTranspListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'peri', JValue) then
      Result.peri := Self.TMdfeSefazInfMDFeTranspPeriListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspFromJson(Source: string): TMdfeSefazInfMDFeTransp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMDFeTranspFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspListToJsonValue(Source: TMdfeSefazInfMDFeTranspList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfMDFeTranspToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspListToJson(Source: TMdfeSefazInfMDFeTranspList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMDFeTranspListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspListFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeTranspList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMDFeTranspList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfMDFeTranspFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeTranspListFromJson(Source: string): TMdfeSefazInfMDFeTranspList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMDFeTranspListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunDescargaToJsonValue(Source: TMdfeSefazInfMunDescarga): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cMunDescarga', Self.stringToJsonValue(Source.cMunDescarga));
    Json.ObjAddProp(Result, 'xMunDescarga', Self.stringToJsonValue(Source.xMunDescarga));
    if Assigned(Source.infCTe) then
      Json.ObjAddProp(Result, 'infCTe', Self.TMdfeSefazInfCTeListToJsonValue(Source.infCTe));
    if Assigned(Source.infNFe) then
      Json.ObjAddProp(Result, 'infNFe', Self.TMdfeSefazInfNFeListToJsonValue(Source.infNFe));
    if Assigned(Source.infMDFeTransp) then
      Json.ObjAddProp(Result, 'infMDFeTransp', Self.TMdfeSefazInfMDFeTranspListToJsonValue(Source.infMDFeTransp));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunDescargaToJson(Source: TMdfeSefazInfMunDescarga): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMunDescargaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunDescargaFromJsonValue(Source: TJSONValue): TMdfeSefazInfMunDescarga;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMunDescarga.Create;
  try
    if Json.ObjContains(Source, 'cMunDescarga', JValue) then
      Result.cMunDescarga := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMunDescarga', JValue) then
      Result.xMunDescarga := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCTe', JValue) then
      Result.infCTe := Self.TMdfeSefazInfCTeListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infNFe', JValue) then
      Result.infNFe := Self.TMdfeSefazInfNFeListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infMDFeTransp', JValue) then
      Result.infMDFeTransp := Self.TMdfeSefazInfMDFeTranspListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunDescargaFromJson(Source: string): TMdfeSefazInfMunDescarga;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMunDescargaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunDescargaListToJsonValue(Source: TMdfeSefazInfMunDescargaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazInfMunDescargaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunDescargaListToJson(Source: TMdfeSefazInfMunDescargaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMunDescargaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunDescargaListFromJsonValue(Source: TJSONValue): TMdfeSefazInfMunDescargaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMunDescargaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazInfMunDescargaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMunDescargaListFromJson(Source: string): TMdfeSefazInfMunDescargaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMunDescargaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfDocToJsonValue(Source: TMdfeSefazInfDoc): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'infMunDescarga', Self.TMdfeSefazInfMunDescargaListToJsonValue(Source.infMunDescarga));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfDocToJson(Source: TMdfeSefazInfDoc): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfDocToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfDocFromJsonValue(Source: TJSONValue): TMdfeSefazInfDoc;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfDoc.Create;
  try
    if Json.ObjContains(Source, 'infMunDescarga', JValue) then
      Result.infMunDescarga := Self.TMdfeSefazInfMunDescargaListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfDocFromJson(Source: string): TMdfeSefazInfDoc;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfDocFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfRespToJsonValue(Source: TMdfeSefazInfResp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'respSeg', Self.IntegerToJsonValue(Source.respSeg));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfRespToJson(Source: TMdfeSefazInfResp): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfRespToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfRespFromJsonValue(Source: TJSONValue): TMdfeSefazInfResp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfResp.Create;
  try
    if Json.ObjContains(Source, 'respSeg', JValue) then
      Result.respSeg := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfRespFromJson(Source: string): TMdfeSefazInfResp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfRespFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfSegToJsonValue(Source: TMdfeSefazInfSeg): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xSeg', Self.stringToJsonValue(Source.xSeg));
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfSegToJson(Source: TMdfeSefazInfSeg): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfSegToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfSegFromJsonValue(Source: TJSONValue): TMdfeSefazInfSeg;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfSeg.Create;
  try
    if Json.ObjContains(Source, 'xSeg', JValue) then
      Result.xSeg := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfSegFromJson(Source: string): TMdfeSefazInfSeg;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfSegFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazSegToJsonValue(Source: TMdfeSefazSeg): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'infResp', Self.TMdfeSefazInfRespToJsonValue(Source.infResp));
    if Assigned(Source.infSeg) then
      Json.ObjAddProp(Result, 'infSeg', Self.TMdfeSefazInfSegToJsonValue(Source.infSeg));
    if Source.nApolHasValue then
      Json.ObjAddProp(Result, 'nApol', Self.stringToJsonValue(Source.nApol));
    if Assigned(Source.nAver) then
      Json.ObjAddProp(Result, 'nAver', Self.stringListToJsonValue(Source.nAver));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazSegToJson(Source: TMdfeSefazSeg): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazSegToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazSegFromJsonValue(Source: TJSONValue): TMdfeSefazSeg;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazSeg.Create;
  try
    if Json.ObjContains(Source, 'infResp', JValue) then
      Result.infResp := Self.TMdfeSefazInfRespFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infSeg', JValue) then
      Result.infSeg := Self.TMdfeSefazInfSegFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nApol', JValue) then
      Result.nApol := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nAver', JValue) then
      Result.nAver := Self.stringListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazSegFromJson(Source: string): TMdfeSefazSeg;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazSegFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazSegListToJsonValue(Source: TMdfeSefazSegList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazSegToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazSegListToJson(Source: TMdfeSefazSegList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazSegListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazSegListFromJsonValue(Source: TJSONValue): TMdfeSefazSegList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazSegList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazSegFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazSegListFromJson(Source: string): TMdfeSefazSegList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazSegListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfLocalCarregaToJsonValue(Source: TMdfeSefazInfLocalCarrega): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.stringToJsonValue(Source.CEP));
    if Source.latitudeHasValue then
      Json.ObjAddProp(Result, 'latitude', Self.stringToJsonValue(Source.latitude));
    if Source.longitudeHasValue then
      Json.ObjAddProp(Result, 'longitude', Self.stringToJsonValue(Source.longitude));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfLocalCarregaToJson(Source: TMdfeSefazInfLocalCarrega): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfLocalCarregaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfLocalCarregaFromJsonValue(Source: TJSONValue): TMdfeSefazInfLocalCarrega;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfLocalCarrega.Create;
  try
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'latitude', JValue) then
      Result.latitude := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'longitude', JValue) then
      Result.longitude := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfLocalCarregaFromJson(Source: string): TMdfeSefazInfLocalCarrega;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfLocalCarregaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfLocalDescarregaToJsonValue(Source: TMdfeSefazInfLocalDescarrega): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.stringToJsonValue(Source.CEP));
    if Source.latitudeHasValue then
      Json.ObjAddProp(Result, 'latitude', Self.stringToJsonValue(Source.latitude));
    if Source.longitudeHasValue then
      Json.ObjAddProp(Result, 'longitude', Self.stringToJsonValue(Source.longitude));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfLocalDescarregaToJson(Source: TMdfeSefazInfLocalDescarrega): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfLocalDescarregaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfLocalDescarregaFromJsonValue(Source: TJSONValue): TMdfeSefazInfLocalDescarrega;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfLocalDescarrega.Create;
  try
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'latitude', JValue) then
      Result.latitude := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'longitude', JValue) then
      Result.longitude := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfLocalDescarregaFromJson(Source: string): TMdfeSefazInfLocalDescarrega;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfLocalDescarregaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfLotacaoToJsonValue(Source: TMdfeSefazInfLotacao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'infLocalCarrega', Self.TMdfeSefazInfLocalCarregaToJsonValue(Source.infLocalCarrega));
    Json.ObjAddProp(Result, 'infLocalDescarrega', Self.TMdfeSefazInfLocalDescarregaToJsonValue(Source.infLocalDescarrega));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfLotacaoToJson(Source: TMdfeSefazInfLotacao): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfLotacaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfLotacaoFromJsonValue(Source: TJSONValue): TMdfeSefazInfLotacao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfLotacao.Create;
  try
    if Json.ObjContains(Source, 'infLocalCarrega', JValue) then
      Result.infLocalCarrega := Self.TMdfeSefazInfLocalCarregaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infLocalDescarrega', JValue) then
      Result.infLocalDescarrega := Self.TMdfeSefazInfLocalDescarregaFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfLotacaoFromJson(Source: string): TMdfeSefazInfLotacao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfLotacaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazProdPredToJsonValue(Source: TMdfeSefazProdPred): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpCarga', Self.stringToJsonValue(Source.tpCarga));
    Json.ObjAddProp(Result, 'xProd', Self.stringToJsonValue(Source.xProd));
    if Source.cEANHasValue then
      Json.ObjAddProp(Result, 'cEAN', Self.stringToJsonValue(Source.cEAN));
    if Source.NCMHasValue then
      Json.ObjAddProp(Result, 'NCM', Self.stringToJsonValue(Source.NCM));
    if Assigned(Source.infLotacao) then
      Json.ObjAddProp(Result, 'infLotacao', Self.TMdfeSefazInfLotacaoToJsonValue(Source.infLotacao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazProdPredToJson(Source: TMdfeSefazProdPred): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazProdPredToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazProdPredFromJsonValue(Source: TJSONValue): TMdfeSefazProdPred;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazProdPred.Create;
  try
    if Json.ObjContains(Source, 'tpCarga', JValue) then
      Result.tpCarga := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xProd', JValue) then
      Result.xProd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cEAN', JValue) then
      Result.cEAN := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'NCM', JValue) then
      Result.NCM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infLotacao', JValue) then
      Result.infLotacao := Self.TMdfeSefazInfLotacaoFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazProdPredFromJson(Source: string): TMdfeSefazProdPred;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazProdPredFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazTotToJsonValue(Source: TMdfeSefazTot): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.qCTeHasValue then
      Json.ObjAddProp(Result, 'qCTe', Self.IntegerToJsonValue(Source.qCTe));
    if Source.qNFeHasValue then
      Json.ObjAddProp(Result, 'qNFe', Self.IntegerToJsonValue(Source.qNFe));
    if Source.qMDFeHasValue then
      Json.ObjAddProp(Result, 'qMDFe', Self.IntegerToJsonValue(Source.qMDFe));
    Json.ObjAddProp(Result, 'vCarga', Self.DoubleToJsonValue(Source.vCarga));
    Json.ObjAddProp(Result, 'cUnid', Self.stringToJsonValue(Source.cUnid));
    Json.ObjAddProp(Result, 'qCarga', Self.DoubleToJsonValue(Source.qCarga));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazTotToJson(Source: TMdfeSefazTot): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazTotToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazTotFromJsonValue(Source: TJSONValue): TMdfeSefazTot;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazTot.Create;
  try
    if Json.ObjContains(Source, 'qCTe', JValue) then
      Result.qCTe := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qNFe', JValue) then
      Result.qNFe := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qMDFe', JValue) then
      Result.qMDFe := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCarga', JValue) then
      Result.vCarga := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cUnid', JValue) then
      Result.cUnid := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qCarga', JValue) then
      Result.qCarga := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazTotFromJson(Source: string): TMdfeSefazTot;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazTotFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacresToJsonValue(Source: TMdfeSefazLacres): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nLacre', Self.stringToJsonValue(Source.nLacre));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacresToJson(Source: TMdfeSefazLacres): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazLacresToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacresFromJsonValue(Source: TJSONValue): TMdfeSefazLacres;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazLacres.Create;
  try
    if Json.ObjContains(Source, 'nLacre', JValue) then
      Result.nLacre := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacresFromJson(Source: string): TMdfeSefazLacres;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazLacresFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacresListToJsonValue(Source: TMdfeSefazLacresList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazLacresToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacresListToJson(Source: TMdfeSefazLacresList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazLacresListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazLacresListFromJsonValue(Source: TJSONValue): TMdfeSefazLacresList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazLacresList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazLacresFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazLacresListFromJson(Source: string): TMdfeSefazLacresList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazLacresListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazAutXMLToJsonValue(Source: TMdfeSefazAutXML): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazAutXMLToJson(Source: TMdfeSefazAutXML): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazAutXMLToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazAutXMLFromJsonValue(Source: TJSONValue): TMdfeSefazAutXML;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazAutXML.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazAutXMLFromJson(Source: string): TMdfeSefazAutXML;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazAutXMLFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazAutXMLListToJsonValue(Source: TMdfeSefazAutXMLList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeSefazAutXMLToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazAutXMLListToJson(Source: TMdfeSefazAutXMLList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazAutXMLListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazAutXMLListFromJsonValue(Source: TJSONValue): TMdfeSefazAutXMLList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazAutXMLList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeSefazAutXMLFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazAutXMLListFromJson(Source: string): TMdfeSefazAutXMLList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazAutXMLListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfAdicToJsonValue(Source: TMdfeSefazInfAdic): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.infAdFiscoHasValue then
      Json.ObjAddProp(Result, 'infAdFisco', Self.stringToJsonValue(Source.infAdFisco));
    if Source.infCplHasValue then
      Json.ObjAddProp(Result, 'infCpl', Self.stringToJsonValue(Source.infCpl));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfAdicToJson(Source: TMdfeSefazInfAdic): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfAdicToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfAdicFromJsonValue(Source: TJSONValue): TMdfeSefazInfAdic;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfAdic.Create;
  try
    if Json.ObjContains(Source, 'infAdFisco', JValue) then
      Result.infAdFisco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCpl', JValue) then
      Result.infCpl := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfAdicFromJson(Source: string): TMdfeSefazInfAdic;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfAdicFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazRespTecToJsonValue(Source: TMdfeSefazRespTec): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    Json.ObjAddProp(Result, 'xContato', Self.stringToJsonValue(Source.xContato));
    Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
    Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    if Source.idCSRTHasValue then
      Json.ObjAddProp(Result, 'idCSRT', Self.IntegerToJsonValue(Source.idCSRT));
    if Source.CSRTHasValue then
      Json.ObjAddProp(Result, 'CSRT', Self.stringToJsonValue(Source.CSRT));
    if Source.hashCSRTHasValue then
      Json.ObjAddProp(Result, 'hashCSRT', Self.stringToJsonValue(Source.hashCSRT));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazRespTecToJson(Source: TMdfeSefazRespTec): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazRespTecToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazRespTecFromJsonValue(Source: TJSONValue): TMdfeSefazRespTec;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazRespTec.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xContato', JValue) then
      Result.xContato := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idCSRT', JValue) then
      Result.idCSRT := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CSRT', JValue) then
      Result.CSRT := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'hashCSRT', JValue) then
      Result.hashCSRT := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazRespTecFromJson(Source: string): TMdfeSefazRespTec;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazRespTecFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfSolicNFFToJsonValue(Source: TMdfeSefazInfSolicNFF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xSolic', Self.stringToJsonValue(Source.xSolic));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfSolicNFFToJson(Source: TMdfeSefazInfSolicNFF): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfSolicNFFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfSolicNFFFromJsonValue(Source: TJSONValue): TMdfeSefazInfSolicNFF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfSolicNFF.Create;
  try
    if Json.ObjContains(Source, 'xSolic', JValue) then
      Result.xSolic := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfSolicNFFFromJson(Source: string): TMdfeSefazInfSolicNFF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfSolicNFFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeToJsonValue(Source: TMdfeSefazInfMDFe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'versao', Self.stringToJsonValue(Source.versao));
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'Id', Self.stringToJsonValue(Source.Id));
    Json.ObjAddProp(Result, 'ide', Self.TMdfeSefazIdeToJsonValue(Source.ide));
    Json.ObjAddProp(Result, 'emit', Self.TMdfeSefazEmitToJsonValue(Source.emit));
    Json.ObjAddProp(Result, 'infModal', Self.TMdfeSefazInfModalToJsonValue(Source.infModal));
    Json.ObjAddProp(Result, 'infDoc', Self.TMdfeSefazInfDocToJsonValue(Source.infDoc));
    if Assigned(Source.seg) then
      Json.ObjAddProp(Result, 'seg', Self.TMdfeSefazSegListToJsonValue(Source.seg));
    if Assigned(Source.prodPred) then
      Json.ObjAddProp(Result, 'prodPred', Self.TMdfeSefazProdPredToJsonValue(Source.prodPred));
    Json.ObjAddProp(Result, 'tot', Self.TMdfeSefazTotToJsonValue(Source.tot));
    if Assigned(Source.lacres) then
      Json.ObjAddProp(Result, 'lacres', Self.TMdfeSefazLacresListToJsonValue(Source.lacres));
    if Assigned(Source.autXML) then
      Json.ObjAddProp(Result, 'autXML', Self.TMdfeSefazAutXMLListToJsonValue(Source.autXML));
    if Assigned(Source.infAdic) then
      Json.ObjAddProp(Result, 'infAdic', Self.TMdfeSefazInfAdicToJsonValue(Source.infAdic));
    if Assigned(Source.infRespTec) then
      Json.ObjAddProp(Result, 'infRespTec', Self.TMdfeSefazRespTecToJsonValue(Source.infRespTec));
    if Assigned(Source.infSolicNFF) then
      Json.ObjAddProp(Result, 'infSolicNFF', Self.TMdfeSefazInfSolicNFFToJsonValue(Source.infSolicNFF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeToJson(Source: TMdfeSefazInfMDFe): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMDFeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMDFe.Create;
  try
    if Json.ObjContains(Source, 'versao', JValue) then
      Result.versao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'Id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ide', JValue) then
      Result.ide := Self.TMdfeSefazIdeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'emit', JValue) then
      Result.emit := Self.TMdfeSefazEmitFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infModal', JValue) then
      Result.infModal := Self.TMdfeSefazInfModalFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infDoc', JValue) then
      Result.infDoc := Self.TMdfeSefazInfDocFromJsonValue(JValue);
    if Json.ObjContains(Source, 'seg', JValue) then
      Result.seg := Self.TMdfeSefazSegListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prodPred', JValue) then
      Result.prodPred := Self.TMdfeSefazProdPredFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tot', JValue) then
      Result.tot := Self.TMdfeSefazTotFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lacres', JValue) then
      Result.lacres := Self.TMdfeSefazLacresListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autXML', JValue) then
      Result.autXML := Self.TMdfeSefazAutXMLListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infAdic', JValue) then
      Result.infAdic := Self.TMdfeSefazInfAdicFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infRespTec', JValue) then
      Result.infRespTec := Self.TMdfeSefazRespTecFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infSolicNFF', JValue) then
      Result.infSolicNFF := Self.TMdfeSefazInfSolicNFFFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeFromJson(Source: string): TMdfeSefazInfMDFe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMDFeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeSuplToJsonValue(Source: TMdfeSefazInfMDFeSupl): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.qrCodMDFeHasValue then
      Json.ObjAddProp(Result, 'qrCodMDFe', Self.stringToJsonValue(Source.qrCodMDFe));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeSuplToJson(Source: TMdfeSefazInfMDFeSupl): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeSefazInfMDFeSuplToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeSuplFromJsonValue(Source: TJSONValue): TMdfeSefazInfMDFeSupl;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeSefazInfMDFeSupl.Create;
  try
    if Json.ObjContains(Source, 'qrCodMDFe', JValue) then
      Result.qrCodMDFe := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeSefazInfMDFeSuplFromJson(Source: string): TMdfeSefazInfMDFeSupl;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeSefazInfMDFeSuplFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoToJsonValue(Source: TMdfePedidoEmissao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'infMDFe', Self.TMdfeSefazInfMDFeToJsonValue(Source.infMDFe));
    if Assigned(Source.infMDFeSupl) then
      Json.ObjAddProp(Result, 'infMDFeSupl', Self.TMdfeSefazInfMDFeSuplToJsonValue(Source.infMDFeSupl));
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.referenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.referencia));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoToJson(Source: TMdfePedidoEmissao): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfePedidoEmissaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoFromJsonValue(Source: TJSONValue): TMdfePedidoEmissao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfePedidoEmissao.Create;
  try
    if Json.ObjContains(Source, 'infMDFe', JValue) then
      Result.infMDFe := Self.TMdfeSefazInfMDFeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infMDFeSupl', JValue) then
      Result.infMDFeSupl := Self.TMdfeSefazInfMDFeSuplFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.referencia := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoFromJson(Source: string): TMdfePedidoEmissao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfePedidoEmissaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoListToJsonValue(Source: TMdfePedidoEmissaoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfePedidoEmissaoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoListToJson(Source: TMdfePedidoEmissaoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfePedidoEmissaoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoListFromJsonValue(Source: TJSONValue): TMdfePedidoEmissaoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfePedidoEmissaoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfePedidoEmissaoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoListFromJson(Source: string): TMdfePedidoEmissaoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfePedidoEmissaoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoLoteToJsonValue(Source: TMdfePedidoEmissaoLote): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.documentos) then
      Json.ObjAddProp(Result, 'documentos', Self.TMdfePedidoEmissaoListToJsonValue(Source.documentos));
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.referenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.referencia));
    Json.ObjAddProp(Result, 'id_lote', Self.stringToJsonValue(Source.id_lote));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoLoteToJson(Source: TMdfePedidoEmissaoLote): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfePedidoEmissaoLoteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoLoteFromJsonValue(Source: TJSONValue): TMdfePedidoEmissaoLote;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfePedidoEmissaoLote.Create;
  try
    if Json.ObjContains(Source, 'documentos', JValue) then
      Result.documentos := Self.TMdfePedidoEmissaoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id_lote', JValue) then
      Result.id_lote := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoEmissaoLoteFromJson(Source: string): TMdfePedidoEmissaoLote;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfePedidoEmissaoLoteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeReciboToJsonValue(Source: TDfeRecibo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.numeroHasValue then
      Json.ObjAddProp(Result, 'numero', Self.stringToJsonValue(Source.numero));
    if Source.codigo_statusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.codigo_status));
    if Source.motivo_statusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.motivo_status));
    if Source.data_recebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.data_recebimento));
    if Source.codigo_mensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.codigo_mensagem));
    if Source.mensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.mensagem));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeReciboToJson(Source: TDfeRecibo): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeReciboToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeReciboFromJsonValue(Source: TJSONValue): TDfeRecibo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeRecibo.Create;
  try
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.numero := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.codigo_status := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.motivo_status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.data_recebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.codigo_mensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.mensagem := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeReciboFromJson(Source: string): TDfeRecibo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeReciboFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeLoteToJsonValue(Source: TDfeLote): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.created_atHasValue then
      Json.ObjAddProp(Result, 'created_at', Self.TDateTimeToJsonValue(Source.created_at));
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Source.ambienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.referenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.referencia));
    if Source.id_loteHasValue then
      Json.ObjAddProp(Result, 'id_lote', Self.stringToJsonValue(Source.id_lote));
    if Assigned(Source.recibo) then
      Json.ObjAddProp(Result, 'recibo', Self.TDfeReciboToJsonValue(Source.recibo));
    if Assigned(Source.documentos) then
      Json.ObjAddProp(Result, 'documentos', Self.TDfeListToJsonValue(Source.documentos));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeLoteToJson(Source: TDfeLote): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeLoteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeLoteFromJsonValue(Source: TJSONValue): TDfeLote;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeLote.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'created_at', JValue) then
      Result.created_at := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id_lote', JValue) then
      Result.id_lote := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'recibo', JValue) then
      Result.recibo := Self.TDfeReciboFromJsonValue(JValue);
    if Json.ObjContains(Source, 'documentos', JValue) then
      Result.documentos := Self.TDfeListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeLoteFromJson(Source: string): TDfeLote;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeLoteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeLoteListToJsonValue(Source: TDfeLoteList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TDfeLoteToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeLoteListToJson(Source: TDfeLoteList): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeLoteListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeLoteListFromJsonValue(Source: TJSONValue): TDfeLoteList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeLoteList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TDfeLoteFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeLoteListFromJson(Source: string): TDfeLoteList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeLoteListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeLoteListagemToJsonValue(Source: TDfeLoteListagem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source._countHasValue then
      Json.ObjAddProp(Result, '@count', Self.IntegerToJsonValue(Source._count));
    if Assigned(Source.data) then
      Json.ObjAddProp(Result, 'data', Self.TDfeLoteListToJsonValue(Source.data));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeLoteListagemToJson(Source: TDfeLoteListagem): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeLoteListagemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeLoteListagemFromJsonValue(Source: TJSONValue): TDfeLoteListagem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeLoteListagem.Create;
  try
    if Json.ObjContains(Source, '@count', JValue) then
      Result._count := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data', JValue) then
      Result.data := Self.TDfeLoteListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeLoteListagemFromJson(Source: string): TDfeLoteListagem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeLoteListagemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoCancelamentoToJsonValue(Source: TMdfePedidoCancelamento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.justificativaHasValue then
      Json.ObjAddProp(Result, 'justificativa', Self.stringToJsonValue(Source.justificativa));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoCancelamentoToJson(Source: TMdfePedidoCancelamento): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfePedidoCancelamentoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoCancelamentoFromJsonValue(Source: TJSONValue): TMdfePedidoCancelamento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfePedidoCancelamento.Create;
  try
    if Json.ObjContains(Source, 'justificativa', JValue) then
      Result.justificativa := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoCancelamentoFromJson(Source: string): TMdfePedidoCancelamento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfePedidoCancelamentoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoEncerramentoToJsonValue(Source: TMdfePedidoEncerramento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.data_encerramentoHasValue then
      Json.ObjAddProp(Result, 'data_encerramento', Self.TDateToJsonValue(Source.data_encerramento));
    Json.ObjAddProp(Result, 'uf', Self.stringToJsonValue(Source.uf));
    Json.ObjAddProp(Result, 'codigo_municipio', Self.stringToJsonValue(Source.codigo_municipio));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoEncerramentoToJson(Source: TMdfePedidoEncerramento): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfePedidoEncerramentoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoEncerramentoFromJsonValue(Source: TJSONValue): TMdfePedidoEncerramento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfePedidoEncerramento.Create;
  try
    if Json.ObjContains(Source, 'data_encerramento', JValue) then
      Result.data_encerramento := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uf', JValue) then
      Result.uf := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_municipio', JValue) then
      Result.codigo_municipio := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoEncerramentoFromJson(Source: string): TMdfePedidoEncerramento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfePedidoEncerramentoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeEncerramentoToJsonValue(Source: TMdfeEncerramento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.data_encerramentoHasValue then
      Json.ObjAddProp(Result, 'data_encerramento', Self.TDateToJsonValue(Source.data_encerramento));
    if Source.ufHasValue then
      Json.ObjAddProp(Result, 'uf', Self.stringToJsonValue(Source.uf));
    if Source.codigo_municipioHasValue then
      Json.ObjAddProp(Result, 'codigo_municipio', Self.stringToJsonValue(Source.codigo_municipio));
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.ambienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Assigned(Source.autor) then
      Json.ObjAddProp(Result, 'autor', Self.TDfeAutorEventoToJsonValue(Source.autor));
    if Source.chave_acessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.chave_acesso));
    if Source.data_eventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.data_evento));
    if Source.numero_sequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.numero_sequencial));
    if Source.data_recebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.data_recebimento));
    if Source.codigo_statusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.codigo_status));
    if Source.motivo_statusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.motivo_status));
    if Source.numero_protocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.numero_protocolo));
    if Source.codigo_mensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.codigo_mensagem));
    if Source.mensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.mensagem));
    if Source.tipo_eventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.tipo_evento));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeEncerramentoToJson(Source: TMdfeEncerramento): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeEncerramentoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeEncerramentoFromJsonValue(Source: TJSONValue): TMdfeEncerramento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeEncerramento.Create;
  try
    if Json.ObjContains(Source, 'data_encerramento', JValue) then
      Result.data_encerramento := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uf', JValue) then
      Result.uf := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_municipio', JValue) then
      Result.codigo_municipio := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autor', JValue) then
      Result.autor := Self.TDfeAutorEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.chave_acesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.data_evento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.numero_sequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.data_recebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.codigo_status := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.motivo_status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.numero_protocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.codigo_mensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.mensagem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.tipo_evento := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeEncerramentoFromJson(Source: string): TMdfeEncerramento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeEncerramentoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoInclusaoCondutorToJsonValue(Source: TMdfePedidoInclusaoCondutor): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nome_condutor', Self.stringToJsonValue(Source.nome_condutor));
    Json.ObjAddProp(Result, 'cpf_condutor', Self.stringToJsonValue(Source.cpf_condutor));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoInclusaoCondutorToJson(Source: TMdfePedidoInclusaoCondutor): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfePedidoInclusaoCondutorToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoInclusaoCondutorFromJsonValue(Source: TJSONValue): TMdfePedidoInclusaoCondutor;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfePedidoInclusaoCondutor.Create;
  try
    if Json.ObjContains(Source, 'nome_condutor', JValue) then
      Result.nome_condutor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cpf_condutor', JValue) then
      Result.cpf_condutor := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoInclusaoCondutorFromJson(Source: string): TMdfePedidoInclusaoCondutor;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfePedidoInclusaoCondutorFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeInclusaoCondutorToJsonValue(Source: TMdfeInclusaoCondutor): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.nome_condutorHasValue then
      Json.ObjAddProp(Result, 'nome_condutor', Self.stringToJsonValue(Source.nome_condutor));
    if Source.cpf_condutorHasValue then
      Json.ObjAddProp(Result, 'cpf_condutor', Self.stringToJsonValue(Source.cpf_condutor));
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.ambienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Assigned(Source.autor) then
      Json.ObjAddProp(Result, 'autor', Self.TDfeAutorEventoToJsonValue(Source.autor));
    if Source.chave_acessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.chave_acesso));
    if Source.data_eventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.data_evento));
    if Source.numero_sequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.numero_sequencial));
    if Source.data_recebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.data_recebimento));
    if Source.codigo_statusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.codigo_status));
    if Source.motivo_statusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.motivo_status));
    if Source.numero_protocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.numero_protocolo));
    if Source.codigo_mensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.codigo_mensagem));
    if Source.mensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.mensagem));
    if Source.tipo_eventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.tipo_evento));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeInclusaoCondutorToJson(Source: TMdfeInclusaoCondutor): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeInclusaoCondutorToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeInclusaoCondutorFromJsonValue(Source: TJSONValue): TMdfeInclusaoCondutor;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeInclusaoCondutor.Create;
  try
    if Json.ObjContains(Source, 'nome_condutor', JValue) then
      Result.nome_condutor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cpf_condutor', JValue) then
      Result.cpf_condutor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autor', JValue) then
      Result.autor := Self.TDfeAutorEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.chave_acesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.data_evento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.numero_sequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.data_recebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.codigo_status := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.motivo_status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.numero_protocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.codigo_mensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.mensagem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.tipo_evento := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeInclusaoCondutorFromJson(Source: string): TMdfeInclusaoCondutor;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeInclusaoCondutorFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeDocumentoVinculadoToJsonValue(Source: TMdfeDocumentoVinculado): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.codigo_municipio_descargaHasValue then
      Json.ObjAddProp(Result, 'codigo_municipio_descarga', Self.stringToJsonValue(Source.codigo_municipio_descarga));
    if Source.municipio_descargaHasValue then
      Json.ObjAddProp(Result, 'municipio_descarga', Self.stringToJsonValue(Source.municipio_descarga));
    if Source.chave_acesso_nfeHasValue then
      Json.ObjAddProp(Result, 'chave_acesso_nfe', Self.stringToJsonValue(Source.chave_acesso_nfe));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeDocumentoVinculadoToJson(Source: TMdfeDocumentoVinculado): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeDocumentoVinculadoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeDocumentoVinculadoFromJsonValue(Source: TJSONValue): TMdfeDocumentoVinculado;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeDocumentoVinculado.Create;
  try
    if Json.ObjContains(Source, 'codigo_municipio_descarga', JValue) then
      Result.codigo_municipio_descarga := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'municipio_descarga', JValue) then
      Result.municipio_descarga := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso_nfe', JValue) then
      Result.chave_acesso_nfe := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeDocumentoVinculadoFromJson(Source: string): TMdfeDocumentoVinculado;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeDocumentoVinculadoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeDocumentoVinculadoListToJsonValue(Source: TMdfeDocumentoVinculadoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TMdfeDocumentoVinculadoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeDocumentoVinculadoListToJson(Source: TMdfeDocumentoVinculadoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeDocumentoVinculadoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeDocumentoVinculadoListFromJsonValue(Source: TJSONValue): TMdfeDocumentoVinculadoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeDocumentoVinculadoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TMdfeDocumentoVinculadoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeDocumentoVinculadoListFromJson(Source: string): TMdfeDocumentoVinculadoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeDocumentoVinculadoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoInclusaoDfeToJsonValue(Source: TMdfePedidoInclusaoDfe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.codigo_municipio_carregaHasValue then
      Json.ObjAddProp(Result, 'codigo_municipio_carrega', Self.stringToJsonValue(Source.codigo_municipio_carrega));
    if Source.municipio_carregaHasValue then
      Json.ObjAddProp(Result, 'municipio_carrega', Self.stringToJsonValue(Source.municipio_carrega));
    if Assigned(Source.documentos) then
      Json.ObjAddProp(Result, 'documentos', Self.TMdfeDocumentoVinculadoListToJsonValue(Source.documentos));
    if Source.protocolo_autorizacaoHasValue then
      Json.ObjAddProp(Result, 'protocolo_autorizacao', Self.stringToJsonValue(Source.protocolo_autorizacao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoInclusaoDfeToJson(Source: TMdfePedidoInclusaoDfe): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfePedidoInclusaoDfeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfePedidoInclusaoDfeFromJsonValue(Source: TJSONValue): TMdfePedidoInclusaoDfe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfePedidoInclusaoDfe.Create;
  try
    if Json.ObjContains(Source, 'codigo_municipio_carrega', JValue) then
      Result.codigo_municipio_carrega := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'municipio_carrega', JValue) then
      Result.municipio_carrega := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'documentos', JValue) then
      Result.documentos := Self.TMdfeDocumentoVinculadoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'protocolo_autorizacao', JValue) then
      Result.protocolo_autorizacao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfePedidoInclusaoDfeFromJson(Source: string): TMdfePedidoInclusaoDfe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfePedidoInclusaoDfeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeInclusaoDfeToJsonValue(Source: TMdfeInclusaoDfe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.codigo_municipio_carregaHasValue then
      Json.ObjAddProp(Result, 'codigo_municipio_carrega', Self.stringToJsonValue(Source.codigo_municipio_carrega));
    if Source.municipio_carregaHasValue then
      Json.ObjAddProp(Result, 'municipio_carrega', Self.stringToJsonValue(Source.municipio_carrega));
    if Assigned(Source.documentos) then
      Json.ObjAddProp(Result, 'documentos', Self.TMdfeDocumentoVinculadoListToJsonValue(Source.documentos));
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.ambienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Assigned(Source.autor) then
      Json.ObjAddProp(Result, 'autor', Self.TDfeAutorEventoToJsonValue(Source.autor));
    if Source.chave_acessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.chave_acesso));
    if Source.data_eventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.data_evento));
    if Source.numero_sequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.numero_sequencial));
    if Source.data_recebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.data_recebimento));
    if Source.codigo_statusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.codigo_status));
    if Source.motivo_statusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.motivo_status));
    if Source.numero_protocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.numero_protocolo));
    if Source.codigo_mensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.codigo_mensagem));
    if Source.mensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.mensagem));
    if Source.tipo_eventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.tipo_evento));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeInclusaoDfeToJson(Source: TMdfeInclusaoDfe): string;
var
  JValue: TJSONValue;
begin
  JValue := TMdfeInclusaoDfeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TMdfeInclusaoDfeFromJsonValue(Source: TJSONValue): TMdfeInclusaoDfe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TMdfeInclusaoDfe.Create;
  try
    if Json.ObjContains(Source, 'codigo_municipio_carrega', JValue) then
      Result.codigo_municipio_carrega := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'municipio_carrega', JValue) then
      Result.municipio_carrega := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'documentos', JValue) then
      Result.documentos := Self.TMdfeDocumentoVinculadoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autor', JValue) then
      Result.autor := Self.TDfeAutorEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.chave_acesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.data_evento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.numero_sequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.data_recebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.codigo_status := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.motivo_status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.numero_protocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.codigo_mensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.mensagem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.tipo_evento := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TMdfeInclusaoDfeFromJson(Source: string): TMdfeInclusaoDfe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TMdfeInclusaoDfeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeContribuinteEnderecoToJsonValue(Source: TDfeContribuinteEndereco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'logradouro', Self.stringToJsonValue(Source.logradouro));
    Json.ObjAddProp(Result, 'numero', Self.stringToJsonValue(Source.numero));
    if Source.complementoHasValue then
      Json.ObjAddProp(Result, 'complemento', Self.stringToJsonValue(Source.complemento));
    Json.ObjAddProp(Result, 'bairro', Self.stringToJsonValue(Source.bairro));
    Json.ObjAddProp(Result, 'codigo_municipio', Self.stringToJsonValue(Source.codigo_municipio));
    Json.ObjAddProp(Result, 'nome_municipio', Self.stringToJsonValue(Source.nome_municipio));
    Json.ObjAddProp(Result, 'uf', Self.stringToJsonValue(Source.uf));
    if Source.cepHasValue then
      Json.ObjAddProp(Result, 'cep', Self.stringToJsonValue(Source.cep));
    if Source.codigo_paisHasValue then
      Json.ObjAddProp(Result, 'codigo_pais', Self.stringToJsonValue(Source.codigo_pais));
    if Source.paisHasValue then
      Json.ObjAddProp(Result, 'pais', Self.stringToJsonValue(Source.pais));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeContribuinteEnderecoToJson(Source: TDfeContribuinteEndereco): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeContribuinteEnderecoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeContribuinteEnderecoFromJsonValue(Source: TJSONValue): TDfeContribuinteEndereco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeContribuinteEndereco.Create;
  try
    if Json.ObjContains(Source, 'logradouro', JValue) then
      Result.logradouro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.numero := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'complemento', JValue) then
      Result.complemento := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'bairro', JValue) then
      Result.bairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_municipio', JValue) then
      Result.codigo_municipio := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_municipio', JValue) then
      Result.nome_municipio := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uf', JValue) then
      Result.uf := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cep', JValue) then
      Result.cep := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_pais', JValue) then
      Result.codigo_pais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pais', JValue) then
      Result.pais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeContribuinteEnderecoFromJson(Source: string): TDfeContribuinteEndereco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeContribuinteEnderecoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeContribuinteInfCadToJsonValue(Source: TDfeContribuinteInfCad): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'ie', Self.stringToJsonValue(Source.ie));
    if Source.cnpjHasValue then
      Json.ObjAddProp(Result, 'cnpj', Self.stringToJsonValue(Source.cnpj));
    if Source.cpfHasValue then
      Json.ObjAddProp(Result, 'cpf', Self.stringToJsonValue(Source.cpf));
    Json.ObjAddProp(Result, 'uf', Self.stringToJsonValue(Source.uf));
    Json.ObjAddProp(Result, 'situacao_cadastral', Self.IntegerToJsonValue(Source.situacao_cadastral));
    Json.ObjAddProp(Result, 'indicador_nfe', Self.IntegerToJsonValue(Source.indicador_nfe));
    Json.ObjAddProp(Result, 'indicador_cte', Self.IntegerToJsonValue(Source.indicador_cte));
    Json.ObjAddProp(Result, 'nome_razao_social', Self.stringToJsonValue(Source.nome_razao_social));
    if Source.nome_fantasiaHasValue then
      Json.ObjAddProp(Result, 'nome_fantasia', Self.stringToJsonValue(Source.nome_fantasia));
    if Source.regime_apuracao_icmsHasValue then
      Json.ObjAddProp(Result, 'regime_apuracao_icms', Self.stringToJsonValue(Source.regime_apuracao_icms));
    if Source.cnaeHasValue then
      Json.ObjAddProp(Result, 'cnae', Self.stringToJsonValue(Source.cnae));
    if Source.data_inicio_atividadeHasValue then
      Json.ObjAddProp(Result, 'data_inicio_atividade', Self.TDateToJsonValue(Source.data_inicio_atividade));
    if Source.data_situacao_cadastralHasValue then
      Json.ObjAddProp(Result, 'data_situacao_cadastral', Self.TDateToJsonValue(Source.data_situacao_cadastral));
    if Source.data_fim_atividadeHasValue then
      Json.ObjAddProp(Result, 'data_fim_atividade', Self.TDateToJsonValue(Source.data_fim_atividade));
    if Source.ie_unicaHasValue then
      Json.ObjAddProp(Result, 'ie_unica', Self.stringToJsonValue(Source.ie_unica));
    if Source.ie_atualHasValue then
      Json.ObjAddProp(Result, 'ie_atual', Self.stringToJsonValue(Source.ie_atual));
    if Assigned(Source.endereco) then
      Json.ObjAddProp(Result, 'endereco', Self.TDfeContribuinteEnderecoToJsonValue(Source.endereco));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeContribuinteInfCadToJson(Source: TDfeContribuinteInfCad): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeContribuinteInfCadToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeContribuinteInfCadFromJsonValue(Source: TJSONValue): TDfeContribuinteInfCad;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeContribuinteInfCad.Create;
  try
    if Json.ObjContains(Source, 'ie', JValue) then
      Result.ie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cnpj', JValue) then
      Result.cnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cpf', JValue) then
      Result.cpf := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uf', JValue) then
      Result.uf := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'situacao_cadastral', JValue) then
      Result.situacao_cadastral := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indicador_nfe', JValue) then
      Result.indicador_nfe := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indicador_cte', JValue) then
      Result.indicador_cte := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_razao_social', JValue) then
      Result.nome_razao_social := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_fantasia', JValue) then
      Result.nome_fantasia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'regime_apuracao_icms', JValue) then
      Result.regime_apuracao_icms := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cnae', JValue) then
      Result.cnae := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_inicio_atividade', JValue) then
      Result.data_inicio_atividade := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_situacao_cadastral', JValue) then
      Result.data_situacao_cadastral := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_fim_atividade', JValue) then
      Result.data_fim_atividade := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ie_unica', JValue) then
      Result.ie_unica := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ie_atual', JValue) then
      Result.ie_atual := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'endereco', JValue) then
      Result.endereco := Self.TDfeContribuinteEnderecoFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeContribuinteInfCadFromJson(Source: string): TDfeContribuinteInfCad;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeContribuinteInfCadFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeContribuinteInfCadListToJsonValue(Source: TDfeContribuinteInfCadList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TDfeContribuinteInfCadToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeContribuinteInfCadListToJson(Source: TDfeContribuinteInfCadList): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeContribuinteInfCadListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeContribuinteInfCadListFromJsonValue(Source: TJSONValue): TDfeContribuinteInfCadList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeContribuinteInfCadList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TDfeContribuinteInfCadFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeContribuinteInfCadListFromJson(Source: string): TDfeContribuinteInfCadList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeContribuinteInfCadListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeContribuinteInfConsToJsonValue(Source: TDfeContribuinteInfCons): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.codigo_status));
    Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.motivo_status));
    Json.ObjAddProp(Result, 'uf', Self.stringToJsonValue(Source.uf));
    if Source.ieHasValue then
      Json.ObjAddProp(Result, 'ie', Self.stringToJsonValue(Source.ie));
    if Source.cnpjHasValue then
      Json.ObjAddProp(Result, 'cnpj', Self.stringToJsonValue(Source.cnpj));
    if Source.cpfHasValue then
      Json.ObjAddProp(Result, 'cpf', Self.stringToJsonValue(Source.cpf));
    Json.ObjAddProp(Result, 'data_consulta', Self.TDateTimeToJsonValue(Source.data_consulta));
    Json.ObjAddProp(Result, 'uf_atendimento', Self.IntegerToJsonValue(Source.uf_atendimento));
    if Assigned(Source.informacoes_cadastrais) then
      Json.ObjAddProp(Result, 'informacoes_cadastrais', Self.TDfeContribuinteInfCadListToJsonValue(Source.informacoes_cadastrais));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeContribuinteInfConsToJson(Source: TDfeContribuinteInfCons): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeContribuinteInfConsToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeContribuinteInfConsFromJsonValue(Source: TJSONValue): TDfeContribuinteInfCons;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeContribuinteInfCons.Create;
  try
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.codigo_status := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.motivo_status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uf', JValue) then
      Result.uf := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ie', JValue) then
      Result.ie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cnpj', JValue) then
      Result.cnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cpf', JValue) then
      Result.cpf := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_consulta', JValue) then
      Result.data_consulta := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uf_atendimento', JValue) then
      Result.uf_atendimento := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'informacoes_cadastrais', JValue) then
      Result.informacoes_cadastrais := Self.TDfeContribuinteInfCadListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeContribuinteInfConsFromJson(Source: string): TDfeContribuinteInfCons;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeContribuinteInfConsFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRefNFToJsonValue(Source: TNfeSefazRefNF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cUF', Self.IntegerToJsonValue(Source.cUF));
    Json.ObjAddProp(Result, 'AAMM', Self.stringToJsonValue(Source.AAMM));
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    Json.ObjAddProp(Result, 'mod', Self.stringToJsonValue(Source.&mod));
    Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.serie));
    Json.ObjAddProp(Result, 'nNF', Self.IntegerToJsonValue(Source.nNF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRefNFToJson(Source: TNfeSefazRefNF): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazRefNFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRefNFFromJsonValue(Source: TJSONValue): TNfeSefazRefNF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazRefNF.Create;
  try
    if Json.ObjContains(Source, 'cUF', JValue) then
      Result.cUF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'AAMM', JValue) then
      Result.AAMM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&mod := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nNF', JValue) then
      Result.nNF := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRefNFFromJson(Source: string): TNfeSefazRefNF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazRefNFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRefNFPToJsonValue(Source: TNfeSefazRefNFP): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cUF', Self.IntegerToJsonValue(Source.cUF));
    Json.ObjAddProp(Result, 'AAMM', Self.stringToJsonValue(Source.AAMM));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    Json.ObjAddProp(Result, 'mod', Self.stringToJsonValue(Source.&mod));
    Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.serie));
    Json.ObjAddProp(Result, 'nNF', Self.IntegerToJsonValue(Source.nNF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRefNFPToJson(Source: TNfeSefazRefNFP): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazRefNFPToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRefNFPFromJsonValue(Source: TJSONValue): TNfeSefazRefNFP;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazRefNFP.Create;
  try
    if Json.ObjContains(Source, 'cUF', JValue) then
      Result.cUF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'AAMM', JValue) then
      Result.AAMM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&mod := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nNF', JValue) then
      Result.nNF := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRefNFPFromJson(Source: string): TNfeSefazRefNFP;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazRefNFPFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRefECFToJsonValue(Source: TNfeSefazRefECF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'mod', Self.stringToJsonValue(Source.&mod));
    Json.ObjAddProp(Result, 'nECF', Self.IntegerToJsonValue(Source.nECF));
    Json.ObjAddProp(Result, 'nCOO', Self.IntegerToJsonValue(Source.nCOO));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRefECFToJson(Source: TNfeSefazRefECF): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazRefECFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRefECFFromJsonValue(Source: TJSONValue): TNfeSefazRefECF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazRefECF.Create;
  try
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&mod := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nECF', JValue) then
      Result.nECF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nCOO', JValue) then
      Result.nCOO := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRefECFFromJson(Source: string): TNfeSefazRefECF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazRefECFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazNFrefToJsonValue(Source: TNfeSefazNFref): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.refNFeHasValue then
      Json.ObjAddProp(Result, 'refNFe', Self.stringToJsonValue(Source.refNFe));
    if Source.refNFeSigHasValue then
      Json.ObjAddProp(Result, 'refNFeSig', Self.stringToJsonValue(Source.refNFeSig));
    if Assigned(Source.refNF) then
      Json.ObjAddProp(Result, 'refNF', Self.TNfeSefazRefNFToJsonValue(Source.refNF));
    if Assigned(Source.refNFP) then
      Json.ObjAddProp(Result, 'refNFP', Self.TNfeSefazRefNFPToJsonValue(Source.refNFP));
    if Source.refCTeHasValue then
      Json.ObjAddProp(Result, 'refCTe', Self.stringToJsonValue(Source.refCTe));
    if Assigned(Source.refECF) then
      Json.ObjAddProp(Result, 'refECF', Self.TNfeSefazRefECFToJsonValue(Source.refECF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazNFrefToJson(Source: TNfeSefazNFref): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazNFrefToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazNFrefFromJsonValue(Source: TJSONValue): TNfeSefazNFref;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazNFref.Create;
  try
    if Json.ObjContains(Source, 'refNFe', JValue) then
      Result.refNFe := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'refNFeSig', JValue) then
      Result.refNFeSig := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'refNF', JValue) then
      Result.refNF := Self.TNfeSefazRefNFFromJsonValue(JValue);
    if Json.ObjContains(Source, 'refNFP', JValue) then
      Result.refNFP := Self.TNfeSefazRefNFPFromJsonValue(JValue);
    if Json.ObjContains(Source, 'refCTe', JValue) then
      Result.refCTe := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'refECF', JValue) then
      Result.refECF := Self.TNfeSefazRefECFFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazNFrefFromJson(Source: string): TNfeSefazNFref;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazNFrefFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazNFrefListToJsonValue(Source: TNfeSefazNFrefList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazNFrefToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazNFrefListToJson(Source: TNfeSefazNFrefList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazNFrefListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazNFrefListFromJsonValue(Source: TJSONValue): TNfeSefazNFrefList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazNFrefList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazNFrefFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazNFrefListFromJson(Source: string): TNfeSefazNFrefList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazNFrefListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIdeToJsonValue(Source: TNfeSefazIde): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cUF', Self.IntegerToJsonValue(Source.cUF));
    if Source.cNFHasValue then
      Json.ObjAddProp(Result, 'cNF', Self.stringToJsonValue(Source.cNF));
    Json.ObjAddProp(Result, 'natOp', Self.stringToJsonValue(Source.natOp));
    if Source.&modHasValue then
      Json.ObjAddProp(Result, 'mod', Self.IntegerToJsonValue(Source.&mod));
    Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.serie));
    Json.ObjAddProp(Result, 'nNF', Self.IntegerToJsonValue(Source.nNF));
    Json.ObjAddProp(Result, 'dhEmi', Self.TDateTimeToJsonValue(Source.dhEmi));
    if Source.dhSaiEntHasValue then
      Json.ObjAddProp(Result, 'dhSaiEnt', Self.TDateTimeToJsonValue(Source.dhSaiEnt));
    Json.ObjAddProp(Result, 'tpNF', Self.IntegerToJsonValue(Source.tpNF));
    Json.ObjAddProp(Result, 'idDest', Self.IntegerToJsonValue(Source.idDest));
    Json.ObjAddProp(Result, 'cMunFG', Self.stringToJsonValue(Source.cMunFG));
    Json.ObjAddProp(Result, 'tpImp', Self.IntegerToJsonValue(Source.tpImp));
    Json.ObjAddProp(Result, 'tpEmis', Self.IntegerToJsonValue(Source.tpEmis));
    if Source.cDVHasValue then
      Json.ObjAddProp(Result, 'cDV', Self.IntegerToJsonValue(Source.cDV));
    if Source.tpAmbHasValue then
      Json.ObjAddProp(Result, 'tpAmb', Self.IntegerToJsonValue(Source.tpAmb));
    Json.ObjAddProp(Result, 'finNFe', Self.IntegerToJsonValue(Source.finNFe));
    Json.ObjAddProp(Result, 'indFinal', Self.IntegerToJsonValue(Source.indFinal));
    Json.ObjAddProp(Result, 'indPres', Self.IntegerToJsonValue(Source.indPres));
    if Source.indIntermedHasValue then
      Json.ObjAddProp(Result, 'indIntermed', Self.IntegerToJsonValue(Source.indIntermed));
    Json.ObjAddProp(Result, 'procEmi', Self.IntegerToJsonValue(Source.procEmi));
    Json.ObjAddProp(Result, 'verProc', Self.stringToJsonValue(Source.verProc));
    if Source.dhContHasValue then
      Json.ObjAddProp(Result, 'dhCont', Self.TDateTimeToJsonValue(Source.dhCont));
    if Source.xJustHasValue then
      Json.ObjAddProp(Result, 'xJust', Self.stringToJsonValue(Source.xJust));
    if Assigned(Source.NFref) then
      Json.ObjAddProp(Result, 'NFref', Self.TNfeSefazNFrefListToJsonValue(Source.NFref));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIdeToJson(Source: TNfeSefazIde): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazIdeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIdeFromJsonValue(Source: TJSONValue): TNfeSefazIde;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazIde.Create;
  try
    if Json.ObjContains(Source, 'cUF', JValue) then
      Result.cUF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cNF', JValue) then
      Result.cNF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'natOp', JValue) then
      Result.natOp := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mod', JValue) then
      Result.&mod := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nNF', JValue) then
      Result.nNF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhEmi', JValue) then
      Result.dhEmi := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhSaiEnt', JValue) then
      Result.dhSaiEnt := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpNF', JValue) then
      Result.tpNF := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idDest', JValue) then
      Result.idDest := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMunFG', JValue) then
      Result.cMunFG := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpImp', JValue) then
      Result.tpImp := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpEmis', JValue) then
      Result.tpEmis := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cDV', JValue) then
      Result.cDV := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpAmb', JValue) then
      Result.tpAmb := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'finNFe', JValue) then
      Result.finNFe := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indFinal', JValue) then
      Result.indFinal := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indPres', JValue) then
      Result.indPres := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indIntermed', JValue) then
      Result.indIntermed := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'procEmi', JValue) then
      Result.procEmi := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'verProc', JValue) then
      Result.verProc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dhCont', JValue) then
      Result.dhCont := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xJust', JValue) then
      Result.xJust := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'NFref', JValue) then
      Result.NFref := Self.TNfeSefazNFrefListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIdeFromJson(Source: string): TNfeSefazIde;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazIdeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazEnderEmiToJsonValue(Source: TNfeSefazEnderEmi): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xLgrHasValue then
      Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.xLgr));
    if Source.nroHasValue then
      Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.nro));
    if Source.xCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.xCpl));
    if Source.xBairroHasValue then
      Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.xBairro));
    if Source.cMunHasValue then
      Json.ObjAddProp(Result, 'cMun', Self.stringToJsonValue(Source.cMun));
    if Source.xMunHasValue then
      Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.xMun));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.stringToJsonValue(Source.CEP));
    if Source.cPaisHasValue then
      Json.ObjAddProp(Result, 'cPais', Self.stringToJsonValue(Source.cPais));
    if Source.xPaisHasValue then
      Json.ObjAddProp(Result, 'xPais', Self.stringToJsonValue(Source.xPais));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazEnderEmiToJson(Source: TNfeSefazEnderEmi): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazEnderEmiToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazEnderEmiFromJsonValue(Source: TJSONValue): TNfeSefazEnderEmi;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazEnderEmi.Create;
  try
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.xLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.xCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.xBairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.cMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.xMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPais', JValue) then
      Result.cPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xPais', JValue) then
      Result.xPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazEnderEmiFromJson(Source: string): TNfeSefazEnderEmi;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazEnderEmiFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazEmitToJsonValue(Source: TNfeSefazEmit): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.xNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Source.xFantHasValue then
      Json.ObjAddProp(Result, 'xFant', Self.stringToJsonValue(Source.xFant));
    if Assigned(Source.enderEmit) then
      Json.ObjAddProp(Result, 'enderEmit', Self.TNfeSefazEnderEmiToJsonValue(Source.enderEmit));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.IESTHasValue then
      Json.ObjAddProp(Result, 'IEST', Self.stringToJsonValue(Source.IEST));
    if Source.IMHasValue then
      Json.ObjAddProp(Result, 'IM', Self.stringToJsonValue(Source.IM));
    if Source.CNAEHasValue then
      Json.ObjAddProp(Result, 'CNAE', Self.stringToJsonValue(Source.CNAE));
    if Source.CRTHasValue then
      Json.ObjAddProp(Result, 'CRT', Self.IntegerToJsonValue(Source.CRT));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazEmitToJson(Source: TNfeSefazEmit): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazEmitToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazEmitFromJsonValue(Source: TJSONValue): TNfeSefazEmit;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazEmit.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xFant', JValue) then
      Result.xFant := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderEmit', JValue) then
      Result.enderEmit := Self.TNfeSefazEnderEmiFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IEST', JValue) then
      Result.IEST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IM', JValue) then
      Result.IM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNAE', JValue) then
      Result.CNAE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CRT', JValue) then
      Result.CRT := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazEmitFromJson(Source: string): TNfeSefazEmit;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazEmitFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAvulsaToJsonValue(Source: TNfeSefazAvulsa): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    Json.ObjAddProp(Result, 'xOrgao', Self.stringToJsonValue(Source.xOrgao));
    Json.ObjAddProp(Result, 'matr', Self.stringToJsonValue(Source.matr));
    Json.ObjAddProp(Result, 'xAgente', Self.stringToJsonValue(Source.xAgente));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.nDARHasValue then
      Json.ObjAddProp(Result, 'nDAR', Self.stringToJsonValue(Source.nDAR));
    if Source.dEmiHasValue then
      Json.ObjAddProp(Result, 'dEmi', Self.TDateToJsonValue(Source.dEmi));
    if Source.vDARHasValue then
      Json.ObjAddProp(Result, 'vDAR', Self.DoubleToJsonValue(Source.vDAR));
    Json.ObjAddProp(Result, 'repEmi', Self.stringToJsonValue(Source.repEmi));
    if Source.dPagHasValue then
      Json.ObjAddProp(Result, 'dPag', Self.TDateToJsonValue(Source.dPag));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAvulsaToJson(Source: TNfeSefazAvulsa): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazAvulsaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAvulsaFromJsonValue(Source: TJSONValue): TNfeSefazAvulsa;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazAvulsa.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xOrgao', JValue) then
      Result.xOrgao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'matr', JValue) then
      Result.matr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xAgente', JValue) then
      Result.xAgente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nDAR', JValue) then
      Result.nDAR := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dEmi', JValue) then
      Result.dEmi := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDAR', JValue) then
      Result.vDAR := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'repEmi', JValue) then
      Result.repEmi := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dPag', JValue) then
      Result.dPag := Self.TDateFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAvulsaFromJson(Source: string): TNfeSefazAvulsa;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazAvulsaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazEnderecoToJsonValue(Source: TNfeSefazEndereco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.xLgr));
    Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.nro));
    if Source.xCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.xCpl));
    Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.xBairro));
    Json.ObjAddProp(Result, 'cMun', Self.stringToJsonValue(Source.cMun));
    Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.xMun));
    Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.stringToJsonValue(Source.CEP));
    if Source.cPaisHasValue then
      Json.ObjAddProp(Result, 'cPais', Self.stringToJsonValue(Source.cPais));
    if Source.xPaisHasValue then
      Json.ObjAddProp(Result, 'xPais', Self.stringToJsonValue(Source.xPais));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazEnderecoToJson(Source: TNfeSefazEndereco): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazEnderecoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazEnderecoFromJsonValue(Source: TJSONValue): TNfeSefazEndereco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazEndereco.Create;
  try
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.xLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.xCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.xBairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.cMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.xMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPais', JValue) then
      Result.cPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xPais', JValue) then
      Result.xPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazEnderecoFromJson(Source: string): TNfeSefazEndereco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazEnderecoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDestToJsonValue(Source: TNfeSefazDest): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.idEstrangeiroHasValue then
      Json.ObjAddProp(Result, 'idEstrangeiro', Self.stringToJsonValue(Source.idEstrangeiro));
    if Source.xNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Assigned(Source.enderDest) then
      Json.ObjAddProp(Result, 'enderDest', Self.TNfeSefazEnderecoToJsonValue(Source.enderDest));
    Json.ObjAddProp(Result, 'indIEDest', Self.IntegerToJsonValue(Source.indIEDest));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.ISUFHasValue then
      Json.ObjAddProp(Result, 'ISUF', Self.stringToJsonValue(Source.ISUF));
    if Source.IMHasValue then
      Json.ObjAddProp(Result, 'IM', Self.stringToJsonValue(Source.IM));
    if Source.emailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDestToJson(Source: TNfeSefazDest): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDestToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDestFromJsonValue(Source: TJSONValue): TNfeSefazDest;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDest.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idEstrangeiro', JValue) then
      Result.idEstrangeiro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'enderDest', JValue) then
      Result.enderDest := Self.TNfeSefazEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indIEDest', JValue) then
      Result.indIEDest := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ISUF', JValue) then
      Result.ISUF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IM', JValue) then
      Result.IM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDestFromJson(Source: string): TNfeSefazDest;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDestFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazLocalToJsonValue(Source: TNfeSefazLocal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.xNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    Json.ObjAddProp(Result, 'xLgr', Self.stringToJsonValue(Source.xLgr));
    Json.ObjAddProp(Result, 'nro', Self.stringToJsonValue(Source.nro));
    if Source.xCplHasValue then
      Json.ObjAddProp(Result, 'xCpl', Self.stringToJsonValue(Source.xCpl));
    Json.ObjAddProp(Result, 'xBairro', Self.stringToJsonValue(Source.xBairro));
    Json.ObjAddProp(Result, 'cMun', Self.stringToJsonValue(Source.cMun));
    Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.xMun));
    Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.CEPHasValue then
      Json.ObjAddProp(Result, 'CEP', Self.stringToJsonValue(Source.CEP));
    if Source.cPaisHasValue then
      Json.ObjAddProp(Result, 'cPais', Self.stringToJsonValue(Source.cPais));
    if Source.xPaisHasValue then
      Json.ObjAddProp(Result, 'xPais', Self.stringToJsonValue(Source.xPais));
    if Source.foneHasValue then
      Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    if Source.emailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazLocalToJson(Source: TNfeSefazLocal): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazLocalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazLocalFromJsonValue(Source: TJSONValue): TNfeSefazLocal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazLocal.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xLgr', JValue) then
      Result.xLgr := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nro', JValue) then
      Result.nro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCpl', JValue) then
      Result.xCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xBairro', JValue) then
      Result.xBairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.cMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.xMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEP', JValue) then
      Result.CEP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPais', JValue) then
      Result.cPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xPais', JValue) then
      Result.xPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazLocalFromJson(Source: string): TNfeSefazLocal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazLocalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAutXMLToJsonValue(Source: TNfeSefazAutXML): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAutXMLToJson(Source: TNfeSefazAutXML): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazAutXMLToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAutXMLFromJsonValue(Source: TJSONValue): TNfeSefazAutXML;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazAutXML.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAutXMLFromJson(Source: string): TNfeSefazAutXML;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazAutXMLFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAutXMLListToJsonValue(Source: TNfeSefazAutXMLList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazAutXMLToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAutXMLListToJson(Source: TNfeSefazAutXMLList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazAutXMLListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAutXMLListFromJsonValue(Source: TJSONValue): TNfeSefazAutXMLList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazAutXMLList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazAutXMLFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAutXMLListFromJson(Source: string): TNfeSefazAutXMLList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazAutXMLListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazGCredToJsonValue(Source: TNfeSefazGCred): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cCredPresumido', Self.stringToJsonValue(Source.cCredPresumido));
    Json.ObjAddProp(Result, 'pCredPresumido', Self.DoubleToJsonValue(Source.pCredPresumido));
    Json.ObjAddProp(Result, 'vCredPresumido', Self.DoubleToJsonValue(Source.vCredPresumido));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazGCredToJson(Source: TNfeSefazGCred): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazGCredToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazGCredFromJsonValue(Source: TJSONValue): TNfeSefazGCred;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazGCred.Create;
  try
    if Json.ObjContains(Source, 'cCredPresumido', JValue) then
      Result.cCredPresumido := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pCredPresumido', JValue) then
      Result.pCredPresumido := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCredPresumido', JValue) then
      Result.vCredPresumido := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazGCredFromJson(Source: string): TNfeSefazGCred;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazGCredFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazGCredListToJsonValue(Source: TNfeSefazGCredList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazGCredToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazGCredListToJson(Source: TNfeSefazGCredList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazGCredListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazGCredListFromJsonValue(Source: TJSONValue): TNfeSefazGCredList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazGCredList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazGCredFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazGCredListFromJson(Source: string): TNfeSefazGCredList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazGCredListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAdiToJsonValue(Source: TNfeSefazAdi): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.nAdicaoHasValue then
      Json.ObjAddProp(Result, 'nAdicao', Self.IntegerToJsonValue(Source.nAdicao));
    Json.ObjAddProp(Result, 'nSeqAdic', Self.IntegerToJsonValue(Source.nSeqAdic));
    Json.ObjAddProp(Result, 'cFabricante', Self.stringToJsonValue(Source.cFabricante));
    if Source.vDescDIHasValue then
      Json.ObjAddProp(Result, 'vDescDI', Self.DoubleToJsonValue(Source.vDescDI));
    if Source.nDrawHasValue then
      Json.ObjAddProp(Result, 'nDraw', Self.stringToJsonValue(Source.nDraw));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAdiToJson(Source: TNfeSefazAdi): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazAdiToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAdiFromJsonValue(Source: TJSONValue): TNfeSefazAdi;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazAdi.Create;
  try
    if Json.ObjContains(Source, 'nAdicao', JValue) then
      Result.nAdicao := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nSeqAdic', JValue) then
      Result.nSeqAdic := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cFabricante', JValue) then
      Result.cFabricante := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDescDI', JValue) then
      Result.vDescDI := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nDraw', JValue) then
      Result.nDraw := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAdiFromJson(Source: string): TNfeSefazAdi;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazAdiFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAdiListToJsonValue(Source: TNfeSefazAdiList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazAdiToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAdiListToJson(Source: TNfeSefazAdiList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazAdiListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAdiListFromJsonValue(Source: TJSONValue): TNfeSefazAdiList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazAdiList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazAdiFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAdiListFromJson(Source: string): TNfeSefazAdiList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazAdiListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDIToJsonValue(Source: TNfeSefazDI): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nDI', Self.stringToJsonValue(Source.nDI));
    Json.ObjAddProp(Result, 'dDI', Self.TDateToJsonValue(Source.dDI));
    Json.ObjAddProp(Result, 'xLocDesemb', Self.stringToJsonValue(Source.xLocDesemb));
    Json.ObjAddProp(Result, 'UFDesemb', Self.stringToJsonValue(Source.UFDesemb));
    Json.ObjAddProp(Result, 'dDesemb', Self.TDateToJsonValue(Source.dDesemb));
    Json.ObjAddProp(Result, 'tpViaTransp', Self.IntegerToJsonValue(Source.tpViaTransp));
    if Source.vAFRMMHasValue then
      Json.ObjAddProp(Result, 'vAFRMM', Self.DoubleToJsonValue(Source.vAFRMM));
    Json.ObjAddProp(Result, 'tpIntermedio', Self.IntegerToJsonValue(Source.tpIntermedio));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.UFTerceiroHasValue then
      Json.ObjAddProp(Result, 'UFTerceiro', Self.stringToJsonValue(Source.UFTerceiro));
    Json.ObjAddProp(Result, 'cExportador', Self.stringToJsonValue(Source.cExportador));
    Json.ObjAddProp(Result, 'adi', Self.TNfeSefazAdiListToJsonValue(Source.adi));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDIToJson(Source: TNfeSefazDI): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDIToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDIFromJsonValue(Source: TJSONValue): TNfeSefazDI;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDI.Create;
  try
    if Json.ObjContains(Source, 'nDI', JValue) then
      Result.nDI := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dDI', JValue) then
      Result.dDI := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xLocDesemb', JValue) then
      Result.xLocDesemb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFDesemb', JValue) then
      Result.UFDesemb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dDesemb', JValue) then
      Result.dDesemb := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpViaTransp', JValue) then
      Result.tpViaTransp := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAFRMM', JValue) then
      Result.vAFRMM := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpIntermedio', JValue) then
      Result.tpIntermedio := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFTerceiro', JValue) then
      Result.UFTerceiro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cExportador', JValue) then
      Result.cExportador := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'adi', JValue) then
      Result.adi := Self.TNfeSefazAdiListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDIFromJson(Source: string): TNfeSefazDI;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDIFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDIListToJsonValue(Source: TNfeSefazDIList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazDIToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDIListToJson(Source: TNfeSefazDIList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDIListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDIListFromJsonValue(Source: TJSONValue): TNfeSefazDIList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDIList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazDIFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDIListFromJson(Source: string): TNfeSefazDIList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDIListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazExportIndToJsonValue(Source: TNfeSefazExportInd): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nRE', Self.stringToJsonValue(Source.nRE));
    Json.ObjAddProp(Result, 'chNFe', Self.stringToJsonValue(Source.chNFe));
    Json.ObjAddProp(Result, 'qExport', Self.DoubleToJsonValue(Source.qExport));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazExportIndToJson(Source: TNfeSefazExportInd): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazExportIndToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazExportIndFromJsonValue(Source: TJSONValue): TNfeSefazExportInd;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazExportInd.Create;
  try
    if Json.ObjContains(Source, 'nRE', JValue) then
      Result.nRE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chNFe', JValue) then
      Result.chNFe := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qExport', JValue) then
      Result.qExport := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazExportIndFromJson(Source: string): TNfeSefazExportInd;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazExportIndFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetExportToJsonValue(Source: TNfeSefazDetExport): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.nDrawHasValue then
      Json.ObjAddProp(Result, 'nDraw', Self.stringToJsonValue(Source.nDraw));
    if Assigned(Source.exportInd) then
      Json.ObjAddProp(Result, 'exportInd', Self.TNfeSefazExportIndToJsonValue(Source.exportInd));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetExportToJson(Source: TNfeSefazDetExport): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDetExportToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetExportFromJsonValue(Source: TJSONValue): TNfeSefazDetExport;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDetExport.Create;
  try
    if Json.ObjContains(Source, 'nDraw', JValue) then
      Result.nDraw := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'exportInd', JValue) then
      Result.exportInd := Self.TNfeSefazExportIndFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetExportFromJson(Source: string): TNfeSefazDetExport;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDetExportFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetExportListToJsonValue(Source: TNfeSefazDetExportList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazDetExportToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetExportListToJson(Source: TNfeSefazDetExportList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDetExportListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetExportListFromJsonValue(Source: TJSONValue): TNfeSefazDetExportList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDetExportList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazDetExportFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetExportListFromJson(Source: string): TNfeSefazDetExportList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDetExportListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRastroToJsonValue(Source: TNfeSefazRastro): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nLote', Self.stringToJsonValue(Source.nLote));
    Json.ObjAddProp(Result, 'qLote', Self.DoubleToJsonValue(Source.qLote));
    Json.ObjAddProp(Result, 'dFab', Self.TDateToJsonValue(Source.dFab));
    Json.ObjAddProp(Result, 'dVal', Self.TDateToJsonValue(Source.dVal));
    if Source.cAgregHasValue then
      Json.ObjAddProp(Result, 'cAgreg', Self.stringToJsonValue(Source.cAgreg));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRastroToJson(Source: TNfeSefazRastro): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazRastroToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRastroFromJsonValue(Source: TJSONValue): TNfeSefazRastro;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazRastro.Create;
  try
    if Json.ObjContains(Source, 'nLote', JValue) then
      Result.nLote := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qLote', JValue) then
      Result.qLote := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dFab', JValue) then
      Result.dFab := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dVal', JValue) then
      Result.dVal := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cAgreg', JValue) then
      Result.cAgreg := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRastroFromJson(Source: string): TNfeSefazRastro;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazRastroFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRastroListToJsonValue(Source: TNfeSefazRastroList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazRastroToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRastroListToJson(Source: TNfeSefazRastroList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazRastroListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRastroListFromJsonValue(Source: TJSONValue): TNfeSefazRastroList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazRastroList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazRastroFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRastroListFromJson(Source: string): TNfeSefazRastroList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazRastroListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfProdNFFToJsonValue(Source: TNfeSefazInfProdNFF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cProdFisco', Self.stringToJsonValue(Source.cProdFisco));
    Json.ObjAddProp(Result, 'cOperNFF', Self.stringToJsonValue(Source.cOperNFF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfProdNFFToJson(Source: TNfeSefazInfProdNFF): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfProdNFFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfProdNFFFromJsonValue(Source: TJSONValue): TNfeSefazInfProdNFF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfProdNFF.Create;
  try
    if Json.ObjContains(Source, 'cProdFisco', JValue) then
      Result.cProdFisco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cOperNFF', JValue) then
      Result.cOperNFF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfProdNFFFromJson(Source: string): TNfeSefazInfProdNFF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfProdNFFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfProdEmbToJsonValue(Source: TNfeSefazInfProdEmb): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xEmb', Self.stringToJsonValue(Source.xEmb));
    Json.ObjAddProp(Result, 'qVolEmb', Self.DoubleToJsonValue(Source.qVolEmb));
    Json.ObjAddProp(Result, 'uEmb', Self.stringToJsonValue(Source.uEmb));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfProdEmbToJson(Source: TNfeSefazInfProdEmb): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfProdEmbToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfProdEmbFromJsonValue(Source: TJSONValue): TNfeSefazInfProdEmb;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfProdEmb.Create;
  try
    if Json.ObjContains(Source, 'xEmb', JValue) then
      Result.xEmb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qVolEmb', JValue) then
      Result.qVolEmb := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uEmb', JValue) then
      Result.uEmb := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfProdEmbFromJson(Source: string): TNfeSefazInfProdEmb;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfProdEmbFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVeicProdToJsonValue(Source: TNfeSefazVeicProd): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpOp', Self.IntegerToJsonValue(Source.tpOp));
    Json.ObjAddProp(Result, 'chassi', Self.stringToJsonValue(Source.chassi));
    Json.ObjAddProp(Result, 'cCor', Self.stringToJsonValue(Source.cCor));
    Json.ObjAddProp(Result, 'xCor', Self.stringToJsonValue(Source.xCor));
    Json.ObjAddProp(Result, 'pot', Self.stringToJsonValue(Source.pot));
    Json.ObjAddProp(Result, 'cilin', Self.stringToJsonValue(Source.cilin));
    Json.ObjAddProp(Result, 'pesoL', Self.stringToJsonValue(Source.pesoL));
    Json.ObjAddProp(Result, 'pesoB', Self.stringToJsonValue(Source.pesoB));
    Json.ObjAddProp(Result, 'nSerie', Self.stringToJsonValue(Source.nSerie));
    Json.ObjAddProp(Result, 'tpComb', Self.stringToJsonValue(Source.tpComb));
    Json.ObjAddProp(Result, 'nMotor', Self.stringToJsonValue(Source.nMotor));
    Json.ObjAddProp(Result, 'CMT', Self.stringToJsonValue(Source.CMT));
    Json.ObjAddProp(Result, 'dist', Self.stringToJsonValue(Source.dist));
    Json.ObjAddProp(Result, 'anoMod', Self.IntegerToJsonValue(Source.anoMod));
    Json.ObjAddProp(Result, 'anoFab', Self.IntegerToJsonValue(Source.anoFab));
    Json.ObjAddProp(Result, 'tpPint', Self.stringToJsonValue(Source.tpPint));
    Json.ObjAddProp(Result, 'tpVeic', Self.IntegerToJsonValue(Source.tpVeic));
    Json.ObjAddProp(Result, 'espVeic', Self.IntegerToJsonValue(Source.espVeic));
    Json.ObjAddProp(Result, 'VIN', Self.stringToJsonValue(Source.VIN));
    Json.ObjAddProp(Result, 'condVeic', Self.IntegerToJsonValue(Source.condVeic));
    Json.ObjAddProp(Result, 'cMod', Self.stringToJsonValue(Source.cMod));
    Json.ObjAddProp(Result, 'cCorDENATRAN', Self.stringToJsonValue(Source.cCorDENATRAN));
    Json.ObjAddProp(Result, 'lota', Self.IntegerToJsonValue(Source.lota));
    Json.ObjAddProp(Result, 'tpRest', Self.IntegerToJsonValue(Source.tpRest));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVeicProdToJson(Source: TNfeSefazVeicProd): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazVeicProdToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVeicProdFromJsonValue(Source: TJSONValue): TNfeSefazVeicProd;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazVeicProd.Create;
  try
    if Json.ObjContains(Source, 'tpOp', JValue) then
      Result.tpOp := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chassi', JValue) then
      Result.chassi := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cCor', JValue) then
      Result.cCor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCor', JValue) then
      Result.xCor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pot', JValue) then
      Result.pot := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cilin', JValue) then
      Result.cilin := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pesoL', JValue) then
      Result.pesoL := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pesoB', JValue) then
      Result.pesoB := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nSerie', JValue) then
      Result.nSerie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpComb', JValue) then
      Result.tpComb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nMotor', JValue) then
      Result.nMotor := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CMT', JValue) then
      Result.CMT := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dist', JValue) then
      Result.dist := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'anoMod', JValue) then
      Result.anoMod := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'anoFab', JValue) then
      Result.anoFab := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpPint', JValue) then
      Result.tpPint := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpVeic', JValue) then
      Result.tpVeic := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'espVeic', JValue) then
      Result.espVeic := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'VIN', JValue) then
      Result.VIN := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'condVeic', JValue) then
      Result.condVeic := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMod', JValue) then
      Result.cMod := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cCorDENATRAN', JValue) then
      Result.cCorDENATRAN := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lota', JValue) then
      Result.lota := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpRest', JValue) then
      Result.tpRest := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVeicProdFromJson(Source: string): TNfeSefazVeicProd;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazVeicProdFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazMedToJsonValue(Source: TNfeSefazMed): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cProdANVISA', Self.stringToJsonValue(Source.cProdANVISA));
    if Source.xMotivoIsencaoHasValue then
      Json.ObjAddProp(Result, 'xMotivoIsencao', Self.stringToJsonValue(Source.xMotivoIsencao));
    Json.ObjAddProp(Result, 'vPMC', Self.DoubleToJsonValue(Source.vPMC));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazMedToJson(Source: TNfeSefazMed): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazMedToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazMedFromJsonValue(Source: TJSONValue): TNfeSefazMed;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazMed.Create;
  try
    if Json.ObjContains(Source, 'cProdANVISA', JValue) then
      Result.cProdANVISA := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMotivoIsencao', JValue) then
      Result.xMotivoIsencao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPMC', JValue) then
      Result.vPMC := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazMedFromJson(Source: string): TNfeSefazMed;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazMedFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazArmaToJsonValue(Source: TNfeSefazArma): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpArma', Self.IntegerToJsonValue(Source.tpArma));
    Json.ObjAddProp(Result, 'nSerie', Self.stringToJsonValue(Source.nSerie));
    Json.ObjAddProp(Result, 'nCano', Self.stringToJsonValue(Source.nCano));
    Json.ObjAddProp(Result, 'descr', Self.stringToJsonValue(Source.descr));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazArmaToJson(Source: TNfeSefazArma): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazArmaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazArmaFromJsonValue(Source: TJSONValue): TNfeSefazArma;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazArma.Create;
  try
    if Json.ObjContains(Source, 'tpArma', JValue) then
      Result.tpArma := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nSerie', JValue) then
      Result.nSerie := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nCano', JValue) then
      Result.nCano := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descr', JValue) then
      Result.descr := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazArmaFromJson(Source: string): TNfeSefazArma;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazArmaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazArmaListToJsonValue(Source: TNfeSefazArmaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazArmaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazArmaListToJson(Source: TNfeSefazArmaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazArmaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazArmaListFromJsonValue(Source: TJSONValue): TNfeSefazArmaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazArmaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazArmaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazArmaListFromJson(Source: string): TNfeSefazArmaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazArmaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCIDEToJsonValue(Source: TNfeSefazCIDE): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'qBCProd', Self.DoubleToJsonValue(Source.qBCProd));
    Json.ObjAddProp(Result, 'vAliqProd', Self.DoubleToJsonValue(Source.vAliqProd));
    Json.ObjAddProp(Result, 'vCIDE', Self.DoubleToJsonValue(Source.vCIDE));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCIDEToJson(Source: TNfeSefazCIDE): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCIDEToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCIDEFromJsonValue(Source: TJSONValue): TNfeSefazCIDE;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCIDE.Create;
  try
    if Json.ObjContains(Source, 'qBCProd', JValue) then
      Result.qBCProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAliqProd', JValue) then
      Result.vAliqProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCIDE', JValue) then
      Result.vCIDE := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCIDEFromJson(Source: string): TNfeSefazCIDE;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCIDEFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazEncerranteToJsonValue(Source: TNfeSefazEncerrante): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nBico', Self.IntegerToJsonValue(Source.nBico));
    if Source.nBombaHasValue then
      Json.ObjAddProp(Result, 'nBomba', Self.IntegerToJsonValue(Source.nBomba));
    Json.ObjAddProp(Result, 'nTanque', Self.IntegerToJsonValue(Source.nTanque));
    Json.ObjAddProp(Result, 'vEncIni', Self.DoubleToJsonValue(Source.vEncIni));
    Json.ObjAddProp(Result, 'vEncFin', Self.DoubleToJsonValue(Source.vEncFin));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazEncerranteToJson(Source: TNfeSefazEncerrante): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazEncerranteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazEncerranteFromJsonValue(Source: TJSONValue): TNfeSefazEncerrante;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazEncerrante.Create;
  try
    if Json.ObjContains(Source, 'nBico', JValue) then
      Result.nBico := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nBomba', JValue) then
      Result.nBomba := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nTanque', JValue) then
      Result.nTanque := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vEncIni', JValue) then
      Result.vEncIni := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vEncFin', JValue) then
      Result.vEncFin := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazEncerranteFromJson(Source: string): TNfeSefazEncerrante;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazEncerranteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazOrigCombToJsonValue(Source: TNfeSefazOrigComb): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'indImport', Self.IntegerToJsonValue(Source.indImport));
    Json.ObjAddProp(Result, 'cUFOrig', Self.IntegerToJsonValue(Source.cUFOrig));
    Json.ObjAddProp(Result, 'pOrig', Self.DoubleToJsonValue(Source.pOrig));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazOrigCombToJson(Source: TNfeSefazOrigComb): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazOrigCombToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazOrigCombFromJsonValue(Source: TJSONValue): TNfeSefazOrigComb;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazOrigComb.Create;
  try
    if Json.ObjContains(Source, 'indImport', JValue) then
      Result.indImport := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cUFOrig', JValue) then
      Result.cUFOrig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pOrig', JValue) then
      Result.pOrig := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazOrigCombFromJson(Source: string): TNfeSefazOrigComb;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazOrigCombFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazOrigCombListToJsonValue(Source: TNfeSefazOrigCombList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazOrigCombToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazOrigCombListToJson(Source: TNfeSefazOrigCombList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazOrigCombListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazOrigCombListFromJsonValue(Source: TJSONValue): TNfeSefazOrigCombList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazOrigCombList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazOrigCombFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazOrigCombListFromJson(Source: string): TNfeSefazOrigCombList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazOrigCombListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCombToJsonValue(Source: TNfeSefazComb): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cProdANP', Self.IntegerToJsonValue(Source.cProdANP));
    Json.ObjAddProp(Result, 'descANP', Self.stringToJsonValue(Source.descANP));
    if Source.pGLPHasValue then
      Json.ObjAddProp(Result, 'pGLP', Self.DoubleToJsonValue(Source.pGLP));
    if Source.pGNnHasValue then
      Json.ObjAddProp(Result, 'pGNn', Self.DoubleToJsonValue(Source.pGNn));
    if Source.pGNiHasValue then
      Json.ObjAddProp(Result, 'pGNi', Self.DoubleToJsonValue(Source.pGNi));
    if Source.vPartHasValue then
      Json.ObjAddProp(Result, 'vPart', Self.DoubleToJsonValue(Source.vPart));
    if Source.CODIFHasValue then
      Json.ObjAddProp(Result, 'CODIF', Self.stringToJsonValue(Source.CODIF));
    if Source.qTempHasValue then
      Json.ObjAddProp(Result, 'qTemp', Self.DoubleToJsonValue(Source.qTemp));
    Json.ObjAddProp(Result, 'UFCons', Self.stringToJsonValue(Source.UFCons));
    if Assigned(Source.CIDE) then
      Json.ObjAddProp(Result, 'CIDE', Self.TNfeSefazCIDEToJsonValue(Source.CIDE));
    if Assigned(Source.encerrante) then
      Json.ObjAddProp(Result, 'encerrante', Self.TNfeSefazEncerranteToJsonValue(Source.encerrante));
    if Source.pBioHasValue then
      Json.ObjAddProp(Result, 'pBio', Self.DoubleToJsonValue(Source.pBio));
    if Assigned(Source.origComb) then
      Json.ObjAddProp(Result, 'origComb', Self.TNfeSefazOrigCombListToJsonValue(Source.origComb));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCombToJson(Source: TNfeSefazComb): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCombToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCombFromJsonValue(Source: TJSONValue): TNfeSefazComb;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazComb.Create;
  try
    if Json.ObjContains(Source, 'cProdANP', JValue) then
      Result.cProdANP := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descANP', JValue) then
      Result.descANP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pGLP', JValue) then
      Result.pGLP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pGNn', JValue) then
      Result.pGNn := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pGNi', JValue) then
      Result.pGNi := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPart', JValue) then
      Result.vPart := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CODIF', JValue) then
      Result.CODIF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qTemp', JValue) then
      Result.qTemp := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFCons', JValue) then
      Result.UFCons := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CIDE', JValue) then
      Result.CIDE := Self.TNfeSefazCIDEFromJsonValue(JValue);
    if Json.ObjContains(Source, 'encerrante', JValue) then
      Result.encerrante := Self.TNfeSefazEncerranteFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pBio', JValue) then
      Result.pBio := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'origComb', JValue) then
      Result.origComb := Self.TNfeSefazOrigCombListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCombFromJson(Source: string): TNfeSefazComb;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCombFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazProdToJsonValue(Source: TNfeSefazProd): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'cProd', Self.stringToJsonValue(Source.cProd));
    Json.ObjAddProp(Result, 'cEAN', Self.stringToJsonValue(Source.cEAN));
    if Source.cBarraHasValue then
      Json.ObjAddProp(Result, 'cBarra', Self.stringToJsonValue(Source.cBarra));
    Json.ObjAddProp(Result, 'xProd', Self.stringToJsonValue(Source.xProd));
    Json.ObjAddProp(Result, 'NCM', Self.stringToJsonValue(Source.NCM));
    if Assigned(Source.NVE) then
      Json.ObjAddProp(Result, 'NVE', Self.stringListToJsonValue(Source.NVE));
    if Source.CESTHasValue then
      Json.ObjAddProp(Result, 'CEST', Self.stringToJsonValue(Source.CEST));
    if Source.indEscalaHasValue then
      Json.ObjAddProp(Result, 'indEscala', Self.stringToJsonValue(Source.indEscala));
    if Source.CNPJFabHasValue then
      Json.ObjAddProp(Result, 'CNPJFab', Self.stringToJsonValue(Source.CNPJFab));
    if Source.cBenefHasValue then
      Json.ObjAddProp(Result, 'cBenef', Self.stringToJsonValue(Source.cBenef));
    if Assigned(Source.gCred) then
      Json.ObjAddProp(Result, 'gCred', Self.TNfeSefazGCredListToJsonValue(Source.gCred));
    if Source.EXTIPIHasValue then
      Json.ObjAddProp(Result, 'EXTIPI', Self.stringToJsonValue(Source.EXTIPI));
    Json.ObjAddProp(Result, 'CFOP', Self.stringToJsonValue(Source.CFOP));
    Json.ObjAddProp(Result, 'uCom', Self.stringToJsonValue(Source.uCom));
    Json.ObjAddProp(Result, 'qCom', Self.DoubleToJsonValue(Source.qCom));
    Json.ObjAddProp(Result, 'vUnCom', Self.DoubleToJsonValue(Source.vUnCom));
    Json.ObjAddProp(Result, 'vProd', Self.DoubleToJsonValue(Source.vProd));
    Json.ObjAddProp(Result, 'cEANTrib', Self.stringToJsonValue(Source.cEANTrib));
    if Source.cBarraTribHasValue then
      Json.ObjAddProp(Result, 'cBarraTrib', Self.stringToJsonValue(Source.cBarraTrib));
    Json.ObjAddProp(Result, 'uTrib', Self.stringToJsonValue(Source.uTrib));
    Json.ObjAddProp(Result, 'qTrib', Self.DoubleToJsonValue(Source.qTrib));
    Json.ObjAddProp(Result, 'vUnTrib', Self.DoubleToJsonValue(Source.vUnTrib));
    if Source.vFreteHasValue then
      Json.ObjAddProp(Result, 'vFrete', Self.DoubleToJsonValue(Source.vFrete));
    if Source.vSegHasValue then
      Json.ObjAddProp(Result, 'vSeg', Self.DoubleToJsonValue(Source.vSeg));
    if Source.vDescHasValue then
      Json.ObjAddProp(Result, 'vDesc', Self.DoubleToJsonValue(Source.vDesc));
    if Source.vOutroHasValue then
      Json.ObjAddProp(Result, 'vOutro', Self.DoubleToJsonValue(Source.vOutro));
    Json.ObjAddProp(Result, 'indTot', Self.IntegerToJsonValue(Source.indTot));
    if Assigned(Source.DI) then
      Json.ObjAddProp(Result, 'DI', Self.TNfeSefazDIListToJsonValue(Source.DI));
    if Assigned(Source.detExport) then
      Json.ObjAddProp(Result, 'detExport', Self.TNfeSefazDetExportListToJsonValue(Source.detExport));
    if Source.xPedHasValue then
      Json.ObjAddProp(Result, 'xPed', Self.stringToJsonValue(Source.xPed));
    if Source.nItemPedHasValue then
      Json.ObjAddProp(Result, 'nItemPed', Self.IntegerToJsonValue(Source.nItemPed));
    if Source.nFCIHasValue then
      Json.ObjAddProp(Result, 'nFCI', Self.stringToJsonValue(Source.nFCI));
    if Assigned(Source.rastro) then
      Json.ObjAddProp(Result, 'rastro', Self.TNfeSefazRastroListToJsonValue(Source.rastro));
    if Assigned(Source.infProdNFF) then
      Json.ObjAddProp(Result, 'infProdNFF', Self.TNfeSefazInfProdNFFToJsonValue(Source.infProdNFF));
    if Assigned(Source.infProdEmb) then
      Json.ObjAddProp(Result, 'infProdEmb', Self.TNfeSefazInfProdEmbToJsonValue(Source.infProdEmb));
    if Assigned(Source.veicProd) then
      Json.ObjAddProp(Result, 'veicProd', Self.TNfeSefazVeicProdToJsonValue(Source.veicProd));
    if Assigned(Source.med) then
      Json.ObjAddProp(Result, 'med', Self.TNfeSefazMedToJsonValue(Source.med));
    if Assigned(Source.arma) then
      Json.ObjAddProp(Result, 'arma', Self.TNfeSefazArmaListToJsonValue(Source.arma));
    if Assigned(Source.comb) then
      Json.ObjAddProp(Result, 'comb', Self.TNfeSefazCombToJsonValue(Source.comb));
    if Source.nRECOPIHasValue then
      Json.ObjAddProp(Result, 'nRECOPI', Self.stringToJsonValue(Source.nRECOPI));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazProdToJson(Source: TNfeSefazProd): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazProdToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazProdFromJsonValue(Source: TJSONValue): TNfeSefazProd;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazProd.Create;
  try
    if Json.ObjContains(Source, 'cProd', JValue) then
      Result.cProd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cEAN', JValue) then
      Result.cEAN := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cBarra', JValue) then
      Result.cBarra := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xProd', JValue) then
      Result.xProd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'NCM', JValue) then
      Result.NCM := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'NVE', JValue) then
      Result.NVE := Self.stringListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CEST', JValue) then
      Result.CEST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indEscala', JValue) then
      Result.indEscala := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJFab', JValue) then
      Result.CNPJFab := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cBenef', JValue) then
      Result.cBenef := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'gCred', JValue) then
      Result.gCred := Self.TNfeSefazGCredListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'EXTIPI', JValue) then
      Result.EXTIPI := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CFOP', JValue) then
      Result.CFOP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uCom', JValue) then
      Result.uCom := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qCom', JValue) then
      Result.qCom := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vUnCom', JValue) then
      Result.vUnCom := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vProd', JValue) then
      Result.vProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cEANTrib', JValue) then
      Result.cEANTrib := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cBarraTrib', JValue) then
      Result.cBarraTrib := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uTrib', JValue) then
      Result.uTrib := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qTrib', JValue) then
      Result.qTrib := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vUnTrib', JValue) then
      Result.vUnTrib := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFrete', JValue) then
      Result.vFrete := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vSeg', JValue) then
      Result.vSeg := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDesc', JValue) then
      Result.vDesc := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vOutro', JValue) then
      Result.vOutro := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indTot', JValue) then
      Result.indTot := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'DI', JValue) then
      Result.DI := Self.TNfeSefazDIListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'detExport', JValue) then
      Result.detExport := Self.TNfeSefazDetExportListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xPed', JValue) then
      Result.xPed := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nItemPed', JValue) then
      Result.nItemPed := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nFCI', JValue) then
      Result.nFCI := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'rastro', JValue) then
      Result.rastro := Self.TNfeSefazRastroListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infProdNFF', JValue) then
      Result.infProdNFF := Self.TNfeSefazInfProdNFFFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infProdEmb', JValue) then
      Result.infProdEmb := Self.TNfeSefazInfProdEmbFromJsonValue(JValue);
    if Json.ObjContains(Source, 'veicProd', JValue) then
      Result.veicProd := Self.TNfeSefazVeicProdFromJsonValue(JValue);
    if Json.ObjContains(Source, 'med', JValue) then
      Result.med := Self.TNfeSefazMedFromJsonValue(JValue);
    if Json.ObjContains(Source, 'arma', JValue) then
      Result.arma := Self.TNfeSefazArmaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'comb', JValue) then
      Result.comb := Self.TNfeSefazCombFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nRECOPI', JValue) then
      Result.nRECOPI := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazProdFromJson(Source: string): TNfeSefazProd;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazProdFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS00ToJsonValue(Source: TNfeSefazICMS00): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'modBC', Self.IntegerToJsonValue(Source.modBC));
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.pICMS));
    Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.vICMS));
    if Source.pFCPHasValue then
      Json.ObjAddProp(Result, 'pFCP', Self.DoubleToJsonValue(Source.pFCP));
    if Source.vFCPHasValue then
      Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.vFCP));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS00ToJson(Source: TNfeSefazICMS00): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS00ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS00FromJsonValue(Source: TJSONValue): TNfeSefazICMS00;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS00.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBC', JValue) then
      Result.modBC := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.pICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.vICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCP', JValue) then
      Result.pFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.vFCP := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS00FromJson(Source: string): TNfeSefazICMS00;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS00FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS02ToJsonValue(Source: TNfeSefazICMS02): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.qBCMonoHasValue then
      Json.ObjAddProp(Result, 'qBCMono', Self.DoubleToJsonValue(Source.qBCMono));
    Json.ObjAddProp(Result, 'adRemICMS', Self.DoubleToJsonValue(Source.adRemICMS));
    Json.ObjAddProp(Result, 'vICMSMono', Self.DoubleToJsonValue(Source.vICMSMono));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS02ToJson(Source: TNfeSefazICMS02): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS02ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS02FromJsonValue(Source: TJSONValue): TNfeSefazICMS02;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS02.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCMono', JValue) then
      Result.qBCMono := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'adRemICMS', JValue) then
      Result.adRemICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSMono', JValue) then
      Result.vICMSMono := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS02FromJson(Source: string): TNfeSefazICMS02;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS02FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS10ToJsonValue(Source: TNfeSefazICMS10): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'modBC', Self.IntegerToJsonValue(Source.modBC));
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.pICMS));
    Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.vICMS));
    if Source.vBCFCPHasValue then
      Json.ObjAddProp(Result, 'vBCFCP', Self.DoubleToJsonValue(Source.vBCFCP));
    if Source.pFCPHasValue then
      Json.ObjAddProp(Result, 'pFCP', Self.DoubleToJsonValue(Source.pFCP));
    if Source.vFCPHasValue then
      Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.vFCP));
    Json.ObjAddProp(Result, 'modBCST', Self.IntegerToJsonValue(Source.modBCST));
    if Source.pMVASTHasValue then
      Json.ObjAddProp(Result, 'pMVAST', Self.DoubleToJsonValue(Source.pMVAST));
    if Source.pRedBCSTHasValue then
      Json.ObjAddProp(Result, 'pRedBCST', Self.DoubleToJsonValue(Source.pRedBCST));
    Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.vBCST));
    Json.ObjAddProp(Result, 'pICMSST', Self.DoubleToJsonValue(Source.pICMSST));
    Json.ObjAddProp(Result, 'vICMSST', Self.DoubleToJsonValue(Source.vICMSST));
    if Source.vBCFCPSTHasValue then
      Json.ObjAddProp(Result, 'vBCFCPST', Self.DoubleToJsonValue(Source.vBCFCPST));
    if Source.pFCPSTHasValue then
      Json.ObjAddProp(Result, 'pFCPST', Self.DoubleToJsonValue(Source.pFCPST));
    if Source.vFCPSTHasValue then
      Json.ObjAddProp(Result, 'vFCPST', Self.DoubleToJsonValue(Source.vFCPST));
    if Source.vICMSSTDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSSTDeson', Self.DoubleToJsonValue(Source.vICMSSTDeson));
    if Source.motDesICMSSTHasValue then
      Json.ObjAddProp(Result, 'motDesICMSST', Self.IntegerToJsonValue(Source.motDesICMSST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS10ToJson(Source: TNfeSefazICMS10): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS10ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS10FromJsonValue(Source: TJSONValue): TNfeSefazICMS10;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS10.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBC', JValue) then
      Result.modBC := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.pICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.vICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCP', JValue) then
      Result.vBCFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCP', JValue) then
      Result.pFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.vFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBCST', JValue) then
      Result.modBCST := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pMVAST', JValue) then
      Result.pMVAST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCST', JValue) then
      Result.pRedBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.vBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSST', JValue) then
      Result.pICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSST', JValue) then
      Result.vICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPST', JValue) then
      Result.vBCFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPST', JValue) then
      Result.pFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPST', JValue) then
      Result.vFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSTDeson', JValue) then
      Result.vICMSSTDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motDesICMSST', JValue) then
      Result.motDesICMSST := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS10FromJson(Source: string): TNfeSefazICMS10;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS10FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS15ToJsonValue(Source: TNfeSefazICMS15): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.qBCMonoHasValue then
      Json.ObjAddProp(Result, 'qBCMono', Self.DoubleToJsonValue(Source.qBCMono));
    Json.ObjAddProp(Result, 'adRemICMS', Self.DoubleToJsonValue(Source.adRemICMS));
    Json.ObjAddProp(Result, 'vICMSMono', Self.DoubleToJsonValue(Source.vICMSMono));
    if Source.qBCMonoRetenHasValue then
      Json.ObjAddProp(Result, 'qBCMonoReten', Self.DoubleToJsonValue(Source.qBCMonoReten));
    Json.ObjAddProp(Result, 'adRemICMSReten', Self.DoubleToJsonValue(Source.adRemICMSReten));
    Json.ObjAddProp(Result, 'vICMSMonoReten', Self.DoubleToJsonValue(Source.vICMSMonoReten));
    if Source.pRedAdRemHasValue then
      Json.ObjAddProp(Result, 'pRedAdRem', Self.DoubleToJsonValue(Source.pRedAdRem));
    if Source.motRedAdRemHasValue then
      Json.ObjAddProp(Result, 'motRedAdRem', Self.IntegerToJsonValue(Source.motRedAdRem));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS15ToJson(Source: TNfeSefazICMS15): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS15ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS15FromJsonValue(Source: TJSONValue): TNfeSefazICMS15;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS15.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCMono', JValue) then
      Result.qBCMono := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'adRemICMS', JValue) then
      Result.adRemICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSMono', JValue) then
      Result.vICMSMono := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCMonoReten', JValue) then
      Result.qBCMonoReten := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'adRemICMSReten', JValue) then
      Result.adRemICMSReten := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSMonoReten', JValue) then
      Result.vICMSMonoReten := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedAdRem', JValue) then
      Result.pRedAdRem := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motRedAdRem', JValue) then
      Result.motRedAdRem := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS15FromJson(Source: string): TNfeSefazICMS15;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS15FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS20ToJsonValue(Source: TNfeSefazICMS20): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'modBC', Self.IntegerToJsonValue(Source.modBC));
    Json.ObjAddProp(Result, 'pRedBC', Self.DoubleToJsonValue(Source.pRedBC));
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.pICMS));
    Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.vICMS));
    if Source.vBCFCPHasValue then
      Json.ObjAddProp(Result, 'vBCFCP', Self.DoubleToJsonValue(Source.vBCFCP));
    if Source.pFCPHasValue then
      Json.ObjAddProp(Result, 'pFCP', Self.DoubleToJsonValue(Source.pFCP));
    if Source.vFCPHasValue then
      Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.vFCP));
    if Source.vICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.vICMSDeson));
    if Source.motDesICMSHasValue then
      Json.ObjAddProp(Result, 'motDesICMS', Self.IntegerToJsonValue(Source.motDesICMS));
    if Source.indDeduzDesonHasValue then
      Json.ObjAddProp(Result, 'indDeduzDeson', Self.IntegerToJsonValue(Source.indDeduzDeson));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS20ToJson(Source: TNfeSefazICMS20): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS20ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS20FromJsonValue(Source: TJSONValue): TNfeSefazICMS20;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS20.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBC', JValue) then
      Result.modBC := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBC', JValue) then
      Result.pRedBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.pICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.vICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCP', JValue) then
      Result.vBCFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCP', JValue) then
      Result.pFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.vFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.vICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motDesICMS', JValue) then
      Result.motDesICMS := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indDeduzDeson', JValue) then
      Result.indDeduzDeson := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS20FromJson(Source: string): TNfeSefazICMS20;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS20FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS30ToJsonValue(Source: TNfeSefazICMS30): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'modBCST', Self.IntegerToJsonValue(Source.modBCST));
    if Source.pMVASTHasValue then
      Json.ObjAddProp(Result, 'pMVAST', Self.DoubleToJsonValue(Source.pMVAST));
    if Source.pRedBCSTHasValue then
      Json.ObjAddProp(Result, 'pRedBCST', Self.DoubleToJsonValue(Source.pRedBCST));
    Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.vBCST));
    Json.ObjAddProp(Result, 'pICMSST', Self.DoubleToJsonValue(Source.pICMSST));
    Json.ObjAddProp(Result, 'vICMSST', Self.DoubleToJsonValue(Source.vICMSST));
    if Source.vBCFCPSTHasValue then
      Json.ObjAddProp(Result, 'vBCFCPST', Self.DoubleToJsonValue(Source.vBCFCPST));
    if Source.pFCPSTHasValue then
      Json.ObjAddProp(Result, 'pFCPST', Self.DoubleToJsonValue(Source.pFCPST));
    if Source.vFCPSTHasValue then
      Json.ObjAddProp(Result, 'vFCPST', Self.DoubleToJsonValue(Source.vFCPST));
    if Source.vICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.vICMSDeson));
    if Source.motDesICMSHasValue then
      Json.ObjAddProp(Result, 'motDesICMS', Self.IntegerToJsonValue(Source.motDesICMS));
    if Source.indDeduzDesonHasValue then
      Json.ObjAddProp(Result, 'indDeduzDeson', Self.IntegerToJsonValue(Source.indDeduzDeson));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS30ToJson(Source: TNfeSefazICMS30): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS30ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS30FromJsonValue(Source: TJSONValue): TNfeSefazICMS30;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS30.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBCST', JValue) then
      Result.modBCST := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pMVAST', JValue) then
      Result.pMVAST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCST', JValue) then
      Result.pRedBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.vBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSST', JValue) then
      Result.pICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSST', JValue) then
      Result.vICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPST', JValue) then
      Result.vBCFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPST', JValue) then
      Result.pFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPST', JValue) then
      Result.vFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.vICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motDesICMS', JValue) then
      Result.motDesICMS := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indDeduzDeson', JValue) then
      Result.indDeduzDeson := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS30FromJson(Source: string): TNfeSefazICMS30;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS30FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS40ToJsonValue(Source: TNfeSefazICMS40): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.vICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.vICMSDeson));
    if Source.motDesICMSHasValue then
      Json.ObjAddProp(Result, 'motDesICMS', Self.IntegerToJsonValue(Source.motDesICMS));
    if Source.indDeduzDesonHasValue then
      Json.ObjAddProp(Result, 'indDeduzDeson', Self.IntegerToJsonValue(Source.indDeduzDeson));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS40ToJson(Source: TNfeSefazICMS40): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS40ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS40FromJsonValue(Source: TJSONValue): TNfeSefazICMS40;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS40.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.vICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motDesICMS', JValue) then
      Result.motDesICMS := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indDeduzDeson', JValue) then
      Result.indDeduzDeson := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS40FromJson(Source: string): TNfeSefazICMS40;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS40FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS51ToJsonValue(Source: TNfeSefazICMS51): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.modBCHasValue then
      Json.ObjAddProp(Result, 'modBC', Self.IntegerToJsonValue(Source.modBC));
    if Source.pRedBCHasValue then
      Json.ObjAddProp(Result, 'pRedBC', Self.DoubleToJsonValue(Source.pRedBC));
    if Source.cBenefRBCHasValue then
      Json.ObjAddProp(Result, 'cBenefRBC', Self.stringToJsonValue(Source.cBenefRBC));
    if Source.vBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    if Source.pICMSHasValue then
      Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.pICMS));
    if Source.vICMSOpHasValue then
      Json.ObjAddProp(Result, 'vICMSOp', Self.DoubleToJsonValue(Source.vICMSOp));
    if Source.pDifHasValue then
      Json.ObjAddProp(Result, 'pDif', Self.DoubleToJsonValue(Source.pDif));
    if Source.vICMSDifHasValue then
      Json.ObjAddProp(Result, 'vICMSDif', Self.DoubleToJsonValue(Source.vICMSDif));
    if Source.vICMSHasValue then
      Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.vICMS));
    if Source.vBCFCPHasValue then
      Json.ObjAddProp(Result, 'vBCFCP', Self.DoubleToJsonValue(Source.vBCFCP));
    if Source.pFCPHasValue then
      Json.ObjAddProp(Result, 'pFCP', Self.DoubleToJsonValue(Source.pFCP));
    if Source.vFCPHasValue then
      Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.vFCP));
    if Source.pFCPDifHasValue then
      Json.ObjAddProp(Result, 'pFCPDif', Self.DoubleToJsonValue(Source.pFCPDif));
    if Source.vFCPDifHasValue then
      Json.ObjAddProp(Result, 'vFCPDif', Self.DoubleToJsonValue(Source.vFCPDif));
    if Source.vFCPEfetHasValue then
      Json.ObjAddProp(Result, 'vFCPEfet', Self.DoubleToJsonValue(Source.vFCPEfet));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS51ToJson(Source: TNfeSefazICMS51): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS51ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS51FromJsonValue(Source: TJSONValue): TNfeSefazICMS51;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS51.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBC', JValue) then
      Result.modBC := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBC', JValue) then
      Result.pRedBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cBenefRBC', JValue) then
      Result.cBenefRBC := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.pICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSOp', JValue) then
      Result.vICMSOp := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pDif', JValue) then
      Result.pDif := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDif', JValue) then
      Result.vICMSDif := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.vICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCP', JValue) then
      Result.vBCFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCP', JValue) then
      Result.pFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.vFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPDif', JValue) then
      Result.pFCPDif := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPDif', JValue) then
      Result.vFCPDif := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPEfet', JValue) then
      Result.vFCPEfet := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS51FromJson(Source: string): TNfeSefazICMS51;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS51FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS53ToJsonValue(Source: TNfeSefazICMS53): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.qBCMonoHasValue then
      Json.ObjAddProp(Result, 'qBCMono', Self.DoubleToJsonValue(Source.qBCMono));
    if Source.adRemICMSHasValue then
      Json.ObjAddProp(Result, 'adRemICMS', Self.DoubleToJsonValue(Source.adRemICMS));
    if Source.vICMSMonoOpHasValue then
      Json.ObjAddProp(Result, 'vICMSMonoOp', Self.DoubleToJsonValue(Source.vICMSMonoOp));
    if Source.pDifHasValue then
      Json.ObjAddProp(Result, 'pDif', Self.DoubleToJsonValue(Source.pDif));
    if Source.vICMSMonoDifHasValue then
      Json.ObjAddProp(Result, 'vICMSMonoDif', Self.DoubleToJsonValue(Source.vICMSMonoDif));
    if Source.vICMSMonoHasValue then
      Json.ObjAddProp(Result, 'vICMSMono', Self.DoubleToJsonValue(Source.vICMSMono));
    if Source.qBCMonoDifHasValue then
      Json.ObjAddProp(Result, 'qBCMonoDif', Self.DoubleToJsonValue(Source.qBCMonoDif));
    if Source.adRemICMSDifHasValue then
      Json.ObjAddProp(Result, 'adRemICMSDif', Self.DoubleToJsonValue(Source.adRemICMSDif));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS53ToJson(Source: TNfeSefazICMS53): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS53ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS53FromJsonValue(Source: TJSONValue): TNfeSefazICMS53;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS53.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCMono', JValue) then
      Result.qBCMono := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'adRemICMS', JValue) then
      Result.adRemICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSMonoOp', JValue) then
      Result.vICMSMonoOp := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pDif', JValue) then
      Result.pDif := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSMonoDif', JValue) then
      Result.vICMSMonoDif := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSMono', JValue) then
      Result.vICMSMono := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCMonoDif', JValue) then
      Result.qBCMonoDif := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'adRemICMSDif', JValue) then
      Result.adRemICMSDif := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS53FromJson(Source: string): TNfeSefazICMS53;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS53FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS60ToJsonValue(Source: TNfeSefazICMS60): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.vBCSTRetHasValue then
      Json.ObjAddProp(Result, 'vBCSTRet', Self.DoubleToJsonValue(Source.vBCSTRet));
    if Source.pSTHasValue then
      Json.ObjAddProp(Result, 'pST', Self.DoubleToJsonValue(Source.pST));
    if Source.vICMSSubstitutoHasValue then
      Json.ObjAddProp(Result, 'vICMSSubstituto', Self.DoubleToJsonValue(Source.vICMSSubstituto));
    if Source.vICMSSTRetHasValue then
      Json.ObjAddProp(Result, 'vICMSSTRet', Self.DoubleToJsonValue(Source.vICMSSTRet));
    if Source.vBCFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'vBCFCPSTRet', Self.DoubleToJsonValue(Source.vBCFCPSTRet));
    if Source.pFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'pFCPSTRet', Self.DoubleToJsonValue(Source.pFCPSTRet));
    if Source.vFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'vFCPSTRet', Self.DoubleToJsonValue(Source.vFCPSTRet));
    if Source.pRedBCEfetHasValue then
      Json.ObjAddProp(Result, 'pRedBCEfet', Self.DoubleToJsonValue(Source.pRedBCEfet));
    if Source.vBCEfetHasValue then
      Json.ObjAddProp(Result, 'vBCEfet', Self.DoubleToJsonValue(Source.vBCEfet));
    if Source.pICMSEfetHasValue then
      Json.ObjAddProp(Result, 'pICMSEfet', Self.DoubleToJsonValue(Source.pICMSEfet));
    if Source.vICMSEfetHasValue then
      Json.ObjAddProp(Result, 'vICMSEfet', Self.DoubleToJsonValue(Source.vICMSEfet));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS60ToJson(Source: TNfeSefazICMS60): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS60ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS60FromJsonValue(Source: TJSONValue): TNfeSefazICMS60;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS60.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCSTRet', JValue) then
      Result.vBCSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pST', JValue) then
      Result.pST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSubstituto', JValue) then
      Result.vICMSSubstituto := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSTRet', JValue) then
      Result.vICMSSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPSTRet', JValue) then
      Result.vBCFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPSTRet', JValue) then
      Result.pFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPSTRet', JValue) then
      Result.vFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCEfet', JValue) then
      Result.pRedBCEfet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCEfet', JValue) then
      Result.vBCEfet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSEfet', JValue) then
      Result.pICMSEfet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSEfet', JValue) then
      Result.vICMSEfet := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS60FromJson(Source: string): TNfeSefazICMS60;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS60FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS61ToJsonValue(Source: TNfeSefazICMS61): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.qBCMonoRetHasValue then
      Json.ObjAddProp(Result, 'qBCMonoRet', Self.DoubleToJsonValue(Source.qBCMonoRet));
    Json.ObjAddProp(Result, 'adRemICMSRet', Self.DoubleToJsonValue(Source.adRemICMSRet));
    Json.ObjAddProp(Result, 'vICMSMonoRet', Self.DoubleToJsonValue(Source.vICMSMonoRet));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS61ToJson(Source: TNfeSefazICMS61): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS61ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS61FromJsonValue(Source: TJSONValue): TNfeSefazICMS61;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS61.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCMonoRet', JValue) then
      Result.qBCMonoRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'adRemICMSRet', JValue) then
      Result.adRemICMSRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSMonoRet', JValue) then
      Result.vICMSMonoRet := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS61FromJson(Source: string): TNfeSefazICMS61;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS61FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS70ToJsonValue(Source: TNfeSefazICMS70): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'modBC', Self.IntegerToJsonValue(Source.modBC));
    Json.ObjAddProp(Result, 'pRedBC', Self.DoubleToJsonValue(Source.pRedBC));
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.pICMS));
    Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.vICMS));
    if Source.vBCFCPHasValue then
      Json.ObjAddProp(Result, 'vBCFCP', Self.DoubleToJsonValue(Source.vBCFCP));
    if Source.pFCPHasValue then
      Json.ObjAddProp(Result, 'pFCP', Self.DoubleToJsonValue(Source.pFCP));
    if Source.vFCPHasValue then
      Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.vFCP));
    Json.ObjAddProp(Result, 'modBCST', Self.IntegerToJsonValue(Source.modBCST));
    if Source.pMVASTHasValue then
      Json.ObjAddProp(Result, 'pMVAST', Self.DoubleToJsonValue(Source.pMVAST));
    if Source.pRedBCSTHasValue then
      Json.ObjAddProp(Result, 'pRedBCST', Self.DoubleToJsonValue(Source.pRedBCST));
    Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.vBCST));
    Json.ObjAddProp(Result, 'pICMSST', Self.DoubleToJsonValue(Source.pICMSST));
    Json.ObjAddProp(Result, 'vICMSST', Self.DoubleToJsonValue(Source.vICMSST));
    if Source.vBCFCPSTHasValue then
      Json.ObjAddProp(Result, 'vBCFCPST', Self.DoubleToJsonValue(Source.vBCFCPST));
    if Source.pFCPSTHasValue then
      Json.ObjAddProp(Result, 'pFCPST', Self.DoubleToJsonValue(Source.pFCPST));
    if Source.vFCPSTHasValue then
      Json.ObjAddProp(Result, 'vFCPST', Self.DoubleToJsonValue(Source.vFCPST));
    if Source.vICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.vICMSDeson));
    if Source.motDesICMSHasValue then
      Json.ObjAddProp(Result, 'motDesICMS', Self.IntegerToJsonValue(Source.motDesICMS));
    if Source.indDeduzDesonHasValue then
      Json.ObjAddProp(Result, 'indDeduzDeson', Self.IntegerToJsonValue(Source.indDeduzDeson));
    if Source.vICMSSTDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSSTDeson', Self.DoubleToJsonValue(Source.vICMSSTDeson));
    if Source.motDesICMSSTHasValue then
      Json.ObjAddProp(Result, 'motDesICMSST', Self.IntegerToJsonValue(Source.motDesICMSST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS70ToJson(Source: TNfeSefazICMS70): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS70ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS70FromJsonValue(Source: TJSONValue): TNfeSefazICMS70;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS70.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBC', JValue) then
      Result.modBC := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBC', JValue) then
      Result.pRedBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.pICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.vICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCP', JValue) then
      Result.vBCFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCP', JValue) then
      Result.pFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.vFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBCST', JValue) then
      Result.modBCST := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pMVAST', JValue) then
      Result.pMVAST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCST', JValue) then
      Result.pRedBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.vBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSST', JValue) then
      Result.pICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSST', JValue) then
      Result.vICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPST', JValue) then
      Result.vBCFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPST', JValue) then
      Result.pFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPST', JValue) then
      Result.vFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.vICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motDesICMS', JValue) then
      Result.motDesICMS := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indDeduzDeson', JValue) then
      Result.indDeduzDeson := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSTDeson', JValue) then
      Result.vICMSSTDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motDesICMSST', JValue) then
      Result.motDesICMSST := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS70FromJson(Source: string): TNfeSefazICMS70;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS70FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS90ToJsonValue(Source: TNfeSefazICMS90): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.modBCHasValue then
      Json.ObjAddProp(Result, 'modBC', Self.IntegerToJsonValue(Source.modBC));
    if Source.vBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    if Source.pRedBCHasValue then
      Json.ObjAddProp(Result, 'pRedBC', Self.DoubleToJsonValue(Source.pRedBC));
    if Source.pICMSHasValue then
      Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.pICMS));
    if Source.vICMSHasValue then
      Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.vICMS));
    if Source.vBCFCPHasValue then
      Json.ObjAddProp(Result, 'vBCFCP', Self.DoubleToJsonValue(Source.vBCFCP));
    if Source.pFCPHasValue then
      Json.ObjAddProp(Result, 'pFCP', Self.DoubleToJsonValue(Source.pFCP));
    if Source.vFCPHasValue then
      Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.vFCP));
    if Source.modBCSTHasValue then
      Json.ObjAddProp(Result, 'modBCST', Self.IntegerToJsonValue(Source.modBCST));
    if Source.pMVASTHasValue then
      Json.ObjAddProp(Result, 'pMVAST', Self.DoubleToJsonValue(Source.pMVAST));
    if Source.pRedBCSTHasValue then
      Json.ObjAddProp(Result, 'pRedBCST', Self.DoubleToJsonValue(Source.pRedBCST));
    if Source.vBCSTHasValue then
      Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.vBCST));
    if Source.pICMSSTHasValue then
      Json.ObjAddProp(Result, 'pICMSST', Self.DoubleToJsonValue(Source.pICMSST));
    if Source.vICMSSTHasValue then
      Json.ObjAddProp(Result, 'vICMSST', Self.DoubleToJsonValue(Source.vICMSST));
    if Source.vBCFCPSTHasValue then
      Json.ObjAddProp(Result, 'vBCFCPST', Self.DoubleToJsonValue(Source.vBCFCPST));
    if Source.pFCPSTHasValue then
      Json.ObjAddProp(Result, 'pFCPST', Self.DoubleToJsonValue(Source.pFCPST));
    if Source.vFCPSTHasValue then
      Json.ObjAddProp(Result, 'vFCPST', Self.DoubleToJsonValue(Source.vFCPST));
    if Source.vICMSDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.vICMSDeson));
    if Source.motDesICMSHasValue then
      Json.ObjAddProp(Result, 'motDesICMS', Self.IntegerToJsonValue(Source.motDesICMS));
    if Source.indDeduzDesonHasValue then
      Json.ObjAddProp(Result, 'indDeduzDeson', Self.IntegerToJsonValue(Source.indDeduzDeson));
    if Source.vICMSSTDesonHasValue then
      Json.ObjAddProp(Result, 'vICMSSTDeson', Self.DoubleToJsonValue(Source.vICMSSTDeson));
    if Source.motDesICMSSTHasValue then
      Json.ObjAddProp(Result, 'motDesICMSST', Self.IntegerToJsonValue(Source.motDesICMSST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS90ToJson(Source: TNfeSefazICMS90): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMS90ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMS90FromJsonValue(Source: TJSONValue): TNfeSefazICMS90;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS90.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBC', JValue) then
      Result.modBC := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBC', JValue) then
      Result.pRedBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.pICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.vICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCP', JValue) then
      Result.vBCFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCP', JValue) then
      Result.pFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.vFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBCST', JValue) then
      Result.modBCST := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pMVAST', JValue) then
      Result.pMVAST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCST', JValue) then
      Result.pRedBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.vBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSST', JValue) then
      Result.pICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSST', JValue) then
      Result.vICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPST', JValue) then
      Result.vBCFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPST', JValue) then
      Result.pFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPST', JValue) then
      Result.vFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.vICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motDesICMS', JValue) then
      Result.motDesICMS := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indDeduzDeson', JValue) then
      Result.indDeduzDeson := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSTDeson', JValue) then
      Result.vICMSSTDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motDesICMSST', JValue) then
      Result.motDesICMSST := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMS90FromJson(Source: string): TNfeSefazICMS90;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMS90FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSPartToJsonValue(Source: TNfeSefazICMSPart): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'modBC', Self.IntegerToJsonValue(Source.modBC));
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    if Source.pRedBCHasValue then
      Json.ObjAddProp(Result, 'pRedBC', Self.DoubleToJsonValue(Source.pRedBC));
    Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.pICMS));
    Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.vICMS));
    Json.ObjAddProp(Result, 'modBCST', Self.IntegerToJsonValue(Source.modBCST));
    if Source.pMVASTHasValue then
      Json.ObjAddProp(Result, 'pMVAST', Self.DoubleToJsonValue(Source.pMVAST));
    if Source.pRedBCSTHasValue then
      Json.ObjAddProp(Result, 'pRedBCST', Self.DoubleToJsonValue(Source.pRedBCST));
    Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.vBCST));
    Json.ObjAddProp(Result, 'pICMSST', Self.DoubleToJsonValue(Source.pICMSST));
    Json.ObjAddProp(Result, 'vICMSST', Self.DoubleToJsonValue(Source.vICMSST));
    if Source.vBCFCPSTHasValue then
      Json.ObjAddProp(Result, 'vBCFCPST', Self.DoubleToJsonValue(Source.vBCFCPST));
    if Source.pFCPSTHasValue then
      Json.ObjAddProp(Result, 'pFCPST', Self.DoubleToJsonValue(Source.pFCPST));
    if Source.vFCPSTHasValue then
      Json.ObjAddProp(Result, 'vFCPST', Self.DoubleToJsonValue(Source.vFCPST));
    Json.ObjAddProp(Result, 'pBCOp', Self.DoubleToJsonValue(Source.pBCOp));
    Json.ObjAddProp(Result, 'UFST', Self.stringToJsonValue(Source.UFST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSPartToJson(Source: TNfeSefazICMSPart): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSPartToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSPartFromJsonValue(Source: TJSONValue): TNfeSefazICMSPart;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSPart.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBC', JValue) then
      Result.modBC := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBC', JValue) then
      Result.pRedBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.pICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.vICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBCST', JValue) then
      Result.modBCST := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pMVAST', JValue) then
      Result.pMVAST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCST', JValue) then
      Result.pRedBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.vBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSST', JValue) then
      Result.pICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSST', JValue) then
      Result.vICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPST', JValue) then
      Result.vBCFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPST', JValue) then
      Result.pFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPST', JValue) then
      Result.vFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pBCOp', JValue) then
      Result.pBCOp := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFST', JValue) then
      Result.UFST := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSPartFromJson(Source: string): TNfeSefazICMSPart;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSPartFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSTToJsonValue(Source: TNfeSefazICMSST): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'vBCSTRet', Self.DoubleToJsonValue(Source.vBCSTRet));
    if Source.pSTHasValue then
      Json.ObjAddProp(Result, 'pST', Self.DoubleToJsonValue(Source.pST));
    if Source.vICMSSubstitutoHasValue then
      Json.ObjAddProp(Result, 'vICMSSubstituto', Self.DoubleToJsonValue(Source.vICMSSubstituto));
    Json.ObjAddProp(Result, 'vICMSSTRet', Self.DoubleToJsonValue(Source.vICMSSTRet));
    if Source.vBCFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'vBCFCPSTRet', Self.DoubleToJsonValue(Source.vBCFCPSTRet));
    if Source.pFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'pFCPSTRet', Self.DoubleToJsonValue(Source.pFCPSTRet));
    if Source.vFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'vFCPSTRet', Self.DoubleToJsonValue(Source.vFCPSTRet));
    Json.ObjAddProp(Result, 'vBCSTDest', Self.DoubleToJsonValue(Source.vBCSTDest));
    Json.ObjAddProp(Result, 'vICMSSTDest', Self.DoubleToJsonValue(Source.vICMSSTDest));
    if Source.pRedBCEfetHasValue then
      Json.ObjAddProp(Result, 'pRedBCEfet', Self.DoubleToJsonValue(Source.pRedBCEfet));
    if Source.vBCEfetHasValue then
      Json.ObjAddProp(Result, 'vBCEfet', Self.DoubleToJsonValue(Source.vBCEfet));
    if Source.pICMSEfetHasValue then
      Json.ObjAddProp(Result, 'pICMSEfet', Self.DoubleToJsonValue(Source.pICMSEfet));
    if Source.vICMSEfetHasValue then
      Json.ObjAddProp(Result, 'vICMSEfet', Self.DoubleToJsonValue(Source.vICMSEfet));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSTToJson(Source: TNfeSefazICMSST): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSSTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSTFromJsonValue(Source: TJSONValue): TNfeSefazICMSST;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSST.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCSTRet', JValue) then
      Result.vBCSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pST', JValue) then
      Result.pST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSubstituto', JValue) then
      Result.vICMSSubstituto := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSTRet', JValue) then
      Result.vICMSSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPSTRet', JValue) then
      Result.vBCFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPSTRet', JValue) then
      Result.pFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPSTRet', JValue) then
      Result.vFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCSTDest', JValue) then
      Result.vBCSTDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSTDest', JValue) then
      Result.vICMSSTDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCEfet', JValue) then
      Result.pRedBCEfet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCEfet', JValue) then
      Result.vBCEfet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSEfet', JValue) then
      Result.pICMSEfet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSEfet', JValue) then
      Result.vICMSEfet := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSTFromJson(Source: string): TNfeSefazICMSST;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSSTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN101ToJsonValue(Source: TNfeSefazICMSSN101): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CSOSN', Self.stringToJsonValue(Source.CSOSN));
    Json.ObjAddProp(Result, 'pCredSN', Self.DoubleToJsonValue(Source.pCredSN));
    Json.ObjAddProp(Result, 'vCredICMSSN', Self.DoubleToJsonValue(Source.vCredICMSSN));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN101ToJson(Source: TNfeSefazICMSSN101): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSSN101ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN101FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN101;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSSN101.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CSOSN', JValue) then
      Result.CSOSN := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pCredSN', JValue) then
      Result.pCredSN := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCredICMSSN', JValue) then
      Result.vCredICMSSN := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN101FromJson(Source: string): TNfeSefazICMSSN101;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSSN101FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN102ToJsonValue(Source: TNfeSefazICMSSN102): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CSOSN', Self.stringToJsonValue(Source.CSOSN));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN102ToJson(Source: TNfeSefazICMSSN102): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSSN102ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN102FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN102;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSSN102.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CSOSN', JValue) then
      Result.CSOSN := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN102FromJson(Source: string): TNfeSefazICMSSN102;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSSN102FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN201ToJsonValue(Source: TNfeSefazICMSSN201): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CSOSN', Self.stringToJsonValue(Source.CSOSN));
    Json.ObjAddProp(Result, 'modBCST', Self.IntegerToJsonValue(Source.modBCST));
    if Source.pMVASTHasValue then
      Json.ObjAddProp(Result, 'pMVAST', Self.DoubleToJsonValue(Source.pMVAST));
    if Source.pRedBCSTHasValue then
      Json.ObjAddProp(Result, 'pRedBCST', Self.DoubleToJsonValue(Source.pRedBCST));
    Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.vBCST));
    Json.ObjAddProp(Result, 'pICMSST', Self.DoubleToJsonValue(Source.pICMSST));
    Json.ObjAddProp(Result, 'vICMSST', Self.DoubleToJsonValue(Source.vICMSST));
    if Source.vBCFCPSTHasValue then
      Json.ObjAddProp(Result, 'vBCFCPST', Self.DoubleToJsonValue(Source.vBCFCPST));
    if Source.pFCPSTHasValue then
      Json.ObjAddProp(Result, 'pFCPST', Self.DoubleToJsonValue(Source.pFCPST));
    if Source.vFCPSTHasValue then
      Json.ObjAddProp(Result, 'vFCPST', Self.DoubleToJsonValue(Source.vFCPST));
    Json.ObjAddProp(Result, 'pCredSN', Self.DoubleToJsonValue(Source.pCredSN));
    Json.ObjAddProp(Result, 'vCredICMSSN', Self.DoubleToJsonValue(Source.vCredICMSSN));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN201ToJson(Source: TNfeSefazICMSSN201): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSSN201ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN201FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN201;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSSN201.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CSOSN', JValue) then
      Result.CSOSN := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBCST', JValue) then
      Result.modBCST := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pMVAST', JValue) then
      Result.pMVAST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCST', JValue) then
      Result.pRedBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.vBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSST', JValue) then
      Result.pICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSST', JValue) then
      Result.vICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPST', JValue) then
      Result.vBCFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPST', JValue) then
      Result.pFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPST', JValue) then
      Result.vFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pCredSN', JValue) then
      Result.pCredSN := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCredICMSSN', JValue) then
      Result.vCredICMSSN := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN201FromJson(Source: string): TNfeSefazICMSSN201;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSSN201FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN202ToJsonValue(Source: TNfeSefazICMSSN202): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CSOSN', Self.stringToJsonValue(Source.CSOSN));
    Json.ObjAddProp(Result, 'modBCST', Self.IntegerToJsonValue(Source.modBCST));
    if Source.pMVASTHasValue then
      Json.ObjAddProp(Result, 'pMVAST', Self.DoubleToJsonValue(Source.pMVAST));
    if Source.pRedBCSTHasValue then
      Json.ObjAddProp(Result, 'pRedBCST', Self.DoubleToJsonValue(Source.pRedBCST));
    Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.vBCST));
    Json.ObjAddProp(Result, 'pICMSST', Self.DoubleToJsonValue(Source.pICMSST));
    Json.ObjAddProp(Result, 'vICMSST', Self.DoubleToJsonValue(Source.vICMSST));
    if Source.vBCFCPSTHasValue then
      Json.ObjAddProp(Result, 'vBCFCPST', Self.DoubleToJsonValue(Source.vBCFCPST));
    if Source.pFCPSTHasValue then
      Json.ObjAddProp(Result, 'pFCPST', Self.DoubleToJsonValue(Source.pFCPST));
    if Source.vFCPSTHasValue then
      Json.ObjAddProp(Result, 'vFCPST', Self.DoubleToJsonValue(Source.vFCPST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN202ToJson(Source: TNfeSefazICMSSN202): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSSN202ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN202FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN202;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSSN202.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CSOSN', JValue) then
      Result.CSOSN := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBCST', JValue) then
      Result.modBCST := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pMVAST', JValue) then
      Result.pMVAST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCST', JValue) then
      Result.pRedBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.vBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSST', JValue) then
      Result.pICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSST', JValue) then
      Result.vICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPST', JValue) then
      Result.vBCFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPST', JValue) then
      Result.pFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPST', JValue) then
      Result.vFCPST := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN202FromJson(Source: string): TNfeSefazICMSSN202;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSSN202FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN500ToJsonValue(Source: TNfeSefazICMSSN500): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CSOSN', Self.stringToJsonValue(Source.CSOSN));
    if Source.vBCSTRetHasValue then
      Json.ObjAddProp(Result, 'vBCSTRet', Self.DoubleToJsonValue(Source.vBCSTRet));
    if Source.pSTHasValue then
      Json.ObjAddProp(Result, 'pST', Self.DoubleToJsonValue(Source.pST));
    if Source.vICMSSubstitutoHasValue then
      Json.ObjAddProp(Result, 'vICMSSubstituto', Self.DoubleToJsonValue(Source.vICMSSubstituto));
    if Source.vICMSSTRetHasValue then
      Json.ObjAddProp(Result, 'vICMSSTRet', Self.DoubleToJsonValue(Source.vICMSSTRet));
    if Source.vBCFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'vBCFCPSTRet', Self.DoubleToJsonValue(Source.vBCFCPSTRet));
    if Source.pFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'pFCPSTRet', Self.DoubleToJsonValue(Source.pFCPSTRet));
    if Source.vFCPSTRetHasValue then
      Json.ObjAddProp(Result, 'vFCPSTRet', Self.DoubleToJsonValue(Source.vFCPSTRet));
    if Source.pRedBCEfetHasValue then
      Json.ObjAddProp(Result, 'pRedBCEfet', Self.DoubleToJsonValue(Source.pRedBCEfet));
    if Source.vBCEfetHasValue then
      Json.ObjAddProp(Result, 'vBCEfet', Self.DoubleToJsonValue(Source.vBCEfet));
    if Source.pICMSEfetHasValue then
      Json.ObjAddProp(Result, 'pICMSEfet', Self.DoubleToJsonValue(Source.pICMSEfet));
    if Source.vICMSEfetHasValue then
      Json.ObjAddProp(Result, 'vICMSEfet', Self.DoubleToJsonValue(Source.vICMSEfet));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN500ToJson(Source: TNfeSefazICMSSN500): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSSN500ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN500FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN500;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSSN500.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CSOSN', JValue) then
      Result.CSOSN := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCSTRet', JValue) then
      Result.vBCSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pST', JValue) then
      Result.pST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSubstituto', JValue) then
      Result.vICMSSubstituto := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSSTRet', JValue) then
      Result.vICMSSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPSTRet', JValue) then
      Result.vBCFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPSTRet', JValue) then
      Result.pFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPSTRet', JValue) then
      Result.vFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCEfet', JValue) then
      Result.pRedBCEfet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCEfet', JValue) then
      Result.vBCEfet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSEfet', JValue) then
      Result.pICMSEfet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSEfet', JValue) then
      Result.vICMSEfet := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN500FromJson(Source: string): TNfeSefazICMSSN500;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSSN500FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN900ToJsonValue(Source: TNfeSefazICMSSN900): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'orig', Self.IntegerToJsonValue(Source.orig));
    Json.ObjAddProp(Result, 'CSOSN', Self.stringToJsonValue(Source.CSOSN));
    if Source.modBCHasValue then
      Json.ObjAddProp(Result, 'modBC', Self.IntegerToJsonValue(Source.modBC));
    if Source.vBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    if Source.pRedBCHasValue then
      Json.ObjAddProp(Result, 'pRedBC', Self.DoubleToJsonValue(Source.pRedBC));
    if Source.pICMSHasValue then
      Json.ObjAddProp(Result, 'pICMS', Self.DoubleToJsonValue(Source.pICMS));
    if Source.vICMSHasValue then
      Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.vICMS));
    if Source.modBCSTHasValue then
      Json.ObjAddProp(Result, 'modBCST', Self.IntegerToJsonValue(Source.modBCST));
    if Source.pMVASTHasValue then
      Json.ObjAddProp(Result, 'pMVAST', Self.DoubleToJsonValue(Source.pMVAST));
    if Source.pRedBCSTHasValue then
      Json.ObjAddProp(Result, 'pRedBCST', Self.DoubleToJsonValue(Source.pRedBCST));
    if Source.vBCSTHasValue then
      Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.vBCST));
    if Source.pICMSSTHasValue then
      Json.ObjAddProp(Result, 'pICMSST', Self.DoubleToJsonValue(Source.pICMSST));
    if Source.vICMSSTHasValue then
      Json.ObjAddProp(Result, 'vICMSST', Self.DoubleToJsonValue(Source.vICMSST));
    if Source.vBCFCPSTHasValue then
      Json.ObjAddProp(Result, 'vBCFCPST', Self.DoubleToJsonValue(Source.vBCFCPST));
    if Source.pFCPSTHasValue then
      Json.ObjAddProp(Result, 'pFCPST', Self.DoubleToJsonValue(Source.pFCPST));
    if Source.vFCPSTHasValue then
      Json.ObjAddProp(Result, 'vFCPST', Self.DoubleToJsonValue(Source.vFCPST));
    if Source.pCredSNHasValue then
      Json.ObjAddProp(Result, 'pCredSN', Self.DoubleToJsonValue(Source.pCredSN));
    if Source.vCredICMSSNHasValue then
      Json.ObjAddProp(Result, 'vCredICMSSN', Self.DoubleToJsonValue(Source.vCredICMSSN));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN900ToJson(Source: TNfeSefazICMSSN900): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSSN900ToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN900FromJsonValue(Source: TJSONValue): TNfeSefazICMSSN900;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSSN900.Create;
  try
    if Json.ObjContains(Source, 'orig', JValue) then
      Result.orig := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CSOSN', JValue) then
      Result.CSOSN := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBC', JValue) then
      Result.modBC := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBC', JValue) then
      Result.pRedBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMS', JValue) then
      Result.pICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.vICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modBCST', JValue) then
      Result.modBCST := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pMVAST', JValue) then
      Result.pMVAST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pRedBCST', JValue) then
      Result.pRedBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.vBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSST', JValue) then
      Result.pICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSST', JValue) then
      Result.vICMSST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPST', JValue) then
      Result.vBCFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPST', JValue) then
      Result.pFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPST', JValue) then
      Result.vFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pCredSN', JValue) then
      Result.pCredSN := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCredICMSSN', JValue) then
      Result.vCredICMSSN := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSSN900FromJson(Source: string): TNfeSefazICMSSN900;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSSN900FromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSToJsonValue(Source: TNfeSefazICMS): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.ICMS00) then
      Json.ObjAddProp(Result, 'ICMS00', Self.TNfeSefazICMS00ToJsonValue(Source.ICMS00));
    if Assigned(Source.ICMS02) then
      Json.ObjAddProp(Result, 'ICMS02', Self.TNfeSefazICMS02ToJsonValue(Source.ICMS02));
    if Assigned(Source.ICMS10) then
      Json.ObjAddProp(Result, 'ICMS10', Self.TNfeSefazICMS10ToJsonValue(Source.ICMS10));
    if Assigned(Source.ICMS15) then
      Json.ObjAddProp(Result, 'ICMS15', Self.TNfeSefazICMS15ToJsonValue(Source.ICMS15));
    if Assigned(Source.ICMS20) then
      Json.ObjAddProp(Result, 'ICMS20', Self.TNfeSefazICMS20ToJsonValue(Source.ICMS20));
    if Assigned(Source.ICMS30) then
      Json.ObjAddProp(Result, 'ICMS30', Self.TNfeSefazICMS30ToJsonValue(Source.ICMS30));
    if Assigned(Source.ICMS40) then
      Json.ObjAddProp(Result, 'ICMS40', Self.TNfeSefazICMS40ToJsonValue(Source.ICMS40));
    if Assigned(Source.ICMS51) then
      Json.ObjAddProp(Result, 'ICMS51', Self.TNfeSefazICMS51ToJsonValue(Source.ICMS51));
    if Assigned(Source.ICMS53) then
      Json.ObjAddProp(Result, 'ICMS53', Self.TNfeSefazICMS53ToJsonValue(Source.ICMS53));
    if Assigned(Source.ICMS60) then
      Json.ObjAddProp(Result, 'ICMS60', Self.TNfeSefazICMS60ToJsonValue(Source.ICMS60));
    if Assigned(Source.ICMS61) then
      Json.ObjAddProp(Result, 'ICMS61', Self.TNfeSefazICMS61ToJsonValue(Source.ICMS61));
    if Assigned(Source.ICMS70) then
      Json.ObjAddProp(Result, 'ICMS70', Self.TNfeSefazICMS70ToJsonValue(Source.ICMS70));
    if Assigned(Source.ICMS90) then
      Json.ObjAddProp(Result, 'ICMS90', Self.TNfeSefazICMS90ToJsonValue(Source.ICMS90));
    if Assigned(Source.ICMSPart) then
      Json.ObjAddProp(Result, 'ICMSPart', Self.TNfeSefazICMSPartToJsonValue(Source.ICMSPart));
    if Assigned(Source.ICMSST) then
      Json.ObjAddProp(Result, 'ICMSST', Self.TNfeSefazICMSSTToJsonValue(Source.ICMSST));
    if Assigned(Source.ICMSSN101) then
      Json.ObjAddProp(Result, 'ICMSSN101', Self.TNfeSefazICMSSN101ToJsonValue(Source.ICMSSN101));
    if Assigned(Source.ICMSSN102) then
      Json.ObjAddProp(Result, 'ICMSSN102', Self.TNfeSefazICMSSN102ToJsonValue(Source.ICMSSN102));
    if Assigned(Source.ICMSSN201) then
      Json.ObjAddProp(Result, 'ICMSSN201', Self.TNfeSefazICMSSN201ToJsonValue(Source.ICMSSN201));
    if Assigned(Source.ICMSSN202) then
      Json.ObjAddProp(Result, 'ICMSSN202', Self.TNfeSefazICMSSN202ToJsonValue(Source.ICMSSN202));
    if Assigned(Source.ICMSSN500) then
      Json.ObjAddProp(Result, 'ICMSSN500', Self.TNfeSefazICMSSN500ToJsonValue(Source.ICMSSN500));
    if Assigned(Source.ICMSSN900) then
      Json.ObjAddProp(Result, 'ICMSSN900', Self.TNfeSefazICMSSN900ToJsonValue(Source.ICMSSN900));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSToJson(Source: TNfeSefazICMS): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSFromJsonValue(Source: TJSONValue): TNfeSefazICMS;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMS.Create;
  try
    if Json.ObjContains(Source, 'ICMS00', JValue) then
      Result.ICMS00 := Self.TNfeSefazICMS00FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS02', JValue) then
      Result.ICMS02 := Self.TNfeSefazICMS02FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS10', JValue) then
      Result.ICMS10 := Self.TNfeSefazICMS10FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS15', JValue) then
      Result.ICMS15 := Self.TNfeSefazICMS15FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS20', JValue) then
      Result.ICMS20 := Self.TNfeSefazICMS20FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS30', JValue) then
      Result.ICMS30 := Self.TNfeSefazICMS30FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS40', JValue) then
      Result.ICMS40 := Self.TNfeSefazICMS40FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS51', JValue) then
      Result.ICMS51 := Self.TNfeSefazICMS51FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS53', JValue) then
      Result.ICMS53 := Self.TNfeSefazICMS53FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS60', JValue) then
      Result.ICMS60 := Self.TNfeSefazICMS60FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS61', JValue) then
      Result.ICMS61 := Self.TNfeSefazICMS61FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS70', JValue) then
      Result.ICMS70 := Self.TNfeSefazICMS70FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS90', JValue) then
      Result.ICMS90 := Self.TNfeSefazICMS90FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSPart', JValue) then
      Result.ICMSPart := Self.TNfeSefazICMSPartFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSST', JValue) then
      Result.ICMSST := Self.TNfeSefazICMSSTFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSSN101', JValue) then
      Result.ICMSSN101 := Self.TNfeSefazICMSSN101FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSSN102', JValue) then
      Result.ICMSSN102 := Self.TNfeSefazICMSSN102FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSSN201', JValue) then
      Result.ICMSSN201 := Self.TNfeSefazICMSSN201FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSSN202', JValue) then
      Result.ICMSSN202 := Self.TNfeSefazICMSSN202FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSSN500', JValue) then
      Result.ICMSSN500 := Self.TNfeSefazICMSSN500FromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSSN900', JValue) then
      Result.ICMSSN900 := Self.TNfeSefazICMSSN900FromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSFromJson(Source: string): TNfeSefazICMS;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIPITribToJsonValue(Source: TNfeSefazIPITrib): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.vBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    if Source.pIPIHasValue then
      Json.ObjAddProp(Result, 'pIPI', Self.DoubleToJsonValue(Source.pIPI));
    if Source.qUnidHasValue then
      Json.ObjAddProp(Result, 'qUnid', Self.DoubleToJsonValue(Source.qUnid));
    if Source.vUnidHasValue then
      Json.ObjAddProp(Result, 'vUnid', Self.DoubleToJsonValue(Source.vUnid));
    Json.ObjAddProp(Result, 'vIPI', Self.DoubleToJsonValue(Source.vIPI));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIPITribToJson(Source: TNfeSefazIPITrib): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazIPITribToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIPITribFromJsonValue(Source: TJSONValue): TNfeSefazIPITrib;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazIPITrib.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pIPI', JValue) then
      Result.pIPI := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qUnid', JValue) then
      Result.qUnid := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vUnid', JValue) then
      Result.vUnid := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vIPI', JValue) then
      Result.vIPI := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIPITribFromJson(Source: string): TNfeSefazIPITrib;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazIPITribFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIPINTToJsonValue(Source: TNfeSefazIPINT): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIPINTToJson(Source: TNfeSefazIPINT): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazIPINTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIPINTFromJsonValue(Source: TJSONValue): TNfeSefazIPINT;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazIPINT.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIPINTFromJson(Source: string): TNfeSefazIPINT;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazIPINTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIpiToJsonValue(Source: TNfeSefazIpi): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJProdHasValue then
      Json.ObjAddProp(Result, 'CNPJProd', Self.stringToJsonValue(Source.CNPJProd));
    if Source.cSeloHasValue then
      Json.ObjAddProp(Result, 'cSelo', Self.stringToJsonValue(Source.cSelo));
    if Source.qSeloHasValue then
      Json.ObjAddProp(Result, 'qSelo', Self.Int64ToJsonValue(Source.qSelo));
    Json.ObjAddProp(Result, 'cEnq', Self.stringToJsonValue(Source.cEnq));
    if Assigned(Source.IPITrib) then
      Json.ObjAddProp(Result, 'IPITrib', Self.TNfeSefazIPITribToJsonValue(Source.IPITrib));
    if Assigned(Source.IPINT) then
      Json.ObjAddProp(Result, 'IPINT', Self.TNfeSefazIPINTToJsonValue(Source.IPINT));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIpiToJson(Source: TNfeSefazIpi): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazIpiToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIpiFromJsonValue(Source: TJSONValue): TNfeSefazIpi;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazIpi.Create;
  try
    if Json.ObjContains(Source, 'CNPJProd', JValue) then
      Result.CNPJProd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cSelo', JValue) then
      Result.cSelo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qSelo', JValue) then
      Result.qSelo := Self.Int64FromJsonValue(JValue);
    if Json.ObjContains(Source, 'cEnq', JValue) then
      Result.cEnq := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IPITrib', JValue) then
      Result.IPITrib := Self.TNfeSefazIPITribFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IPINT', JValue) then
      Result.IPINT := Self.TNfeSefazIPINTFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIpiFromJson(Source: string): TNfeSefazIpi;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazIpiFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIIToJsonValue(Source: TNfeSefazII): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'vDespAdu', Self.DoubleToJsonValue(Source.vDespAdu));
    Json.ObjAddProp(Result, 'vII', Self.DoubleToJsonValue(Source.vII));
    Json.ObjAddProp(Result, 'vIOF', Self.DoubleToJsonValue(Source.vIOF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIIToJson(Source: TNfeSefazII): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazIIToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazIIFromJsonValue(Source: TJSONValue): TNfeSefazII;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazII.Create;
  try
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDespAdu', JValue) then
      Result.vDespAdu := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vII', JValue) then
      Result.vII := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vIOF', JValue) then
      Result.vIOF := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazIIFromJson(Source: string): TNfeSefazII;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazIIFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazISSQNToJsonValue(Source: TNfeSefazISSQN): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'vAliq', Self.DoubleToJsonValue(Source.vAliq));
    Json.ObjAddProp(Result, 'vISSQN', Self.DoubleToJsonValue(Source.vISSQN));
    Json.ObjAddProp(Result, 'cMunFG', Self.stringToJsonValue(Source.cMunFG));
    Json.ObjAddProp(Result, 'cListServ', Self.stringToJsonValue(Source.cListServ));
    if Source.vDeducaoHasValue then
      Json.ObjAddProp(Result, 'vDeducao', Self.DoubleToJsonValue(Source.vDeducao));
    if Source.vOutroHasValue then
      Json.ObjAddProp(Result, 'vOutro', Self.DoubleToJsonValue(Source.vOutro));
    if Source.vDescIncondHasValue then
      Json.ObjAddProp(Result, 'vDescIncond', Self.DoubleToJsonValue(Source.vDescIncond));
    if Source.vDescCondHasValue then
      Json.ObjAddProp(Result, 'vDescCond', Self.DoubleToJsonValue(Source.vDescCond));
    if Source.vISSRetHasValue then
      Json.ObjAddProp(Result, 'vISSRet', Self.DoubleToJsonValue(Source.vISSRet));
    Json.ObjAddProp(Result, 'indISS', Self.IntegerToJsonValue(Source.indISS));
    if Source.cServicoHasValue then
      Json.ObjAddProp(Result, 'cServico', Self.stringToJsonValue(Source.cServico));
    if Source.cMunHasValue then
      Json.ObjAddProp(Result, 'cMun', Self.stringToJsonValue(Source.cMun));
    if Source.cPaisHasValue then
      Json.ObjAddProp(Result, 'cPais', Self.stringToJsonValue(Source.cPais));
    if Source.nProcessoHasValue then
      Json.ObjAddProp(Result, 'nProcesso', Self.stringToJsonValue(Source.nProcesso));
    Json.ObjAddProp(Result, 'indIncentivo', Self.IntegerToJsonValue(Source.indIncentivo));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazISSQNToJson(Source: TNfeSefazISSQN): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazISSQNToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazISSQNFromJsonValue(Source: TJSONValue): TNfeSefazISSQN;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazISSQN.Create;
  try
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAliq', JValue) then
      Result.vAliq := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vISSQN', JValue) then
      Result.vISSQN := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMunFG', JValue) then
      Result.cMunFG := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cListServ', JValue) then
      Result.cListServ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDeducao', JValue) then
      Result.vDeducao := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vOutro', JValue) then
      Result.vOutro := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDescIncond', JValue) then
      Result.vDescIncond := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDescCond', JValue) then
      Result.vDescCond := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vISSRet', JValue) then
      Result.vISSRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indISS', JValue) then
      Result.indISS := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cServico', JValue) then
      Result.cServico := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMun', JValue) then
      Result.cMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cPais', JValue) then
      Result.cPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nProcesso', JValue) then
      Result.nProcesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indIncentivo', JValue) then
      Result.indIncentivo := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazISSQNFromJson(Source: string): TNfeSefazISSQN;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazISSQNFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISAliqToJsonValue(Source: TNfeSefazPISAliq): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'pPIS', Self.DoubleToJsonValue(Source.pPIS));
    Json.ObjAddProp(Result, 'vPIS', Self.DoubleToJsonValue(Source.vPIS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISAliqToJson(Source: TNfeSefazPISAliq): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazPISAliqToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISAliqFromJsonValue(Source: TJSONValue): TNfeSefazPISAliq;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazPISAliq.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pPIS', JValue) then
      Result.pPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPIS', JValue) then
      Result.vPIS := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISAliqFromJson(Source: string): TNfeSefazPISAliq;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazPISAliqFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISQtdeToJsonValue(Source: TNfeSefazPISQtde): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'qBCProd', Self.DoubleToJsonValue(Source.qBCProd));
    Json.ObjAddProp(Result, 'vAliqProd', Self.DoubleToJsonValue(Source.vAliqProd));
    Json.ObjAddProp(Result, 'vPIS', Self.DoubleToJsonValue(Source.vPIS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISQtdeToJson(Source: TNfeSefazPISQtde): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazPISQtdeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISQtdeFromJsonValue(Source: TJSONValue): TNfeSefazPISQtde;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazPISQtde.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCProd', JValue) then
      Result.qBCProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAliqProd', JValue) then
      Result.vAliqProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPIS', JValue) then
      Result.vPIS := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISQtdeFromJson(Source: string): TNfeSefazPISQtde;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazPISQtdeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISNTToJsonValue(Source: TNfeSefazPISNT): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISNTToJson(Source: TNfeSefazPISNT): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazPISNTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISNTFromJsonValue(Source: TJSONValue): TNfeSefazPISNT;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazPISNT.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISNTFromJson(Source: string): TNfeSefazPISNT;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazPISNTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISOutrToJsonValue(Source: TNfeSefazPISOutr): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.vBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    if Source.pPISHasValue then
      Json.ObjAddProp(Result, 'pPIS', Self.DoubleToJsonValue(Source.pPIS));
    if Source.qBCProdHasValue then
      Json.ObjAddProp(Result, 'qBCProd', Self.DoubleToJsonValue(Source.qBCProd));
    if Source.vAliqProdHasValue then
      Json.ObjAddProp(Result, 'vAliqProd', Self.DoubleToJsonValue(Source.vAliqProd));
    Json.ObjAddProp(Result, 'vPIS', Self.DoubleToJsonValue(Source.vPIS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISOutrToJson(Source: TNfeSefazPISOutr): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazPISOutrToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISOutrFromJsonValue(Source: TJSONValue): TNfeSefazPISOutr;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazPISOutr.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pPIS', JValue) then
      Result.pPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCProd', JValue) then
      Result.qBCProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAliqProd', JValue) then
      Result.vAliqProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPIS', JValue) then
      Result.vPIS := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISOutrFromJson(Source: string): TNfeSefazPISOutr;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazPISOutrFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISToJsonValue(Source: TNfeSefazPIS): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.PISAliq) then
      Json.ObjAddProp(Result, 'PISAliq', Self.TNfeSefazPISAliqToJsonValue(Source.PISAliq));
    if Assigned(Source.PISQtde) then
      Json.ObjAddProp(Result, 'PISQtde', Self.TNfeSefazPISQtdeToJsonValue(Source.PISQtde));
    if Assigned(Source.PISNT) then
      Json.ObjAddProp(Result, 'PISNT', Self.TNfeSefazPISNTToJsonValue(Source.PISNT));
    if Assigned(Source.PISOutr) then
      Json.ObjAddProp(Result, 'PISOutr', Self.TNfeSefazPISOutrToJsonValue(Source.PISOutr));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISToJson(Source: TNfeSefazPIS): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazPISToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISFromJsonValue(Source: TJSONValue): TNfeSefazPIS;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazPIS.Create;
  try
    if Json.ObjContains(Source, 'PISAliq', JValue) then
      Result.PISAliq := Self.TNfeSefazPISAliqFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PISQtde', JValue) then
      Result.PISQtde := Self.TNfeSefazPISQtdeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PISNT', JValue) then
      Result.PISNT := Self.TNfeSefazPISNTFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PISOutr', JValue) then
      Result.PISOutr := Self.TNfeSefazPISOutrFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISFromJson(Source: string): TNfeSefazPIS;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazPISFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISSTToJsonValue(Source: TNfeSefazPISST): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.vBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    if Source.pPISHasValue then
      Json.ObjAddProp(Result, 'pPIS', Self.DoubleToJsonValue(Source.pPIS));
    if Source.qBCProdHasValue then
      Json.ObjAddProp(Result, 'qBCProd', Self.DoubleToJsonValue(Source.qBCProd));
    if Source.vAliqProdHasValue then
      Json.ObjAddProp(Result, 'vAliqProd', Self.DoubleToJsonValue(Source.vAliqProd));
    Json.ObjAddProp(Result, 'vPIS', Self.DoubleToJsonValue(Source.vPIS));
    if Source.indSomaPISSTHasValue then
      Json.ObjAddProp(Result, 'indSomaPISST', Self.IntegerToJsonValue(Source.indSomaPISST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISSTToJson(Source: TNfeSefazPISST): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazPISSTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPISSTFromJsonValue(Source: TJSONValue): TNfeSefazPISST;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazPISST.Create;
  try
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pPIS', JValue) then
      Result.pPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCProd', JValue) then
      Result.qBCProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAliqProd', JValue) then
      Result.vAliqProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPIS', JValue) then
      Result.vPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indSomaPISST', JValue) then
      Result.indSomaPISST := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPISSTFromJson(Source: string): TNfeSefazPISST;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazPISSTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSAliqToJsonValue(Source: TNfeSefazCOFINSAliq): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'pCOFINS', Self.DoubleToJsonValue(Source.pCOFINS));
    Json.ObjAddProp(Result, 'vCOFINS', Self.DoubleToJsonValue(Source.vCOFINS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSAliqToJson(Source: TNfeSefazCOFINSAliq): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCOFINSAliqToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSAliqFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSAliq;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCOFINSAliq.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pCOFINS', JValue) then
      Result.pCOFINS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCOFINS', JValue) then
      Result.vCOFINS := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSAliqFromJson(Source: string): TNfeSefazCOFINSAliq;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCOFINSAliqFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSQtdeToJsonValue(Source: TNfeSefazCOFINSQtde): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    Json.ObjAddProp(Result, 'qBCProd', Self.DoubleToJsonValue(Source.qBCProd));
    Json.ObjAddProp(Result, 'vAliqProd', Self.DoubleToJsonValue(Source.vAliqProd));
    Json.ObjAddProp(Result, 'vCOFINS', Self.DoubleToJsonValue(Source.vCOFINS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSQtdeToJson(Source: TNfeSefazCOFINSQtde): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCOFINSQtdeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSQtdeFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSQtde;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCOFINSQtde.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCProd', JValue) then
      Result.qBCProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAliqProd', JValue) then
      Result.vAliqProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCOFINS', JValue) then
      Result.vCOFINS := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSQtdeFromJson(Source: string): TNfeSefazCOFINSQtde;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCOFINSQtdeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSNTToJsonValue(Source: TNfeSefazCOFINSNT): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSNTToJson(Source: TNfeSefazCOFINSNT): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCOFINSNTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSNTFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSNT;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCOFINSNT.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSNTFromJson(Source: string): TNfeSefazCOFINSNT;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCOFINSNTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSOutrToJsonValue(Source: TNfeSefazCOFINSOutr): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CST', Self.stringToJsonValue(Source.CST));
    if Source.vBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    if Source.pCOFINSHasValue then
      Json.ObjAddProp(Result, 'pCOFINS', Self.DoubleToJsonValue(Source.pCOFINS));
    if Source.qBCProdHasValue then
      Json.ObjAddProp(Result, 'qBCProd', Self.DoubleToJsonValue(Source.qBCProd));
    if Source.vAliqProdHasValue then
      Json.ObjAddProp(Result, 'vAliqProd', Self.DoubleToJsonValue(Source.vAliqProd));
    Json.ObjAddProp(Result, 'vCOFINS', Self.DoubleToJsonValue(Source.vCOFINS));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSOutrToJson(Source: TNfeSefazCOFINSOutr): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCOFINSOutrToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSOutrFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSOutr;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCOFINSOutr.Create;
  try
    if Json.ObjContains(Source, 'CST', JValue) then
      Result.CST := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pCOFINS', JValue) then
      Result.pCOFINS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCProd', JValue) then
      Result.qBCProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAliqProd', JValue) then
      Result.vAliqProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCOFINS', JValue) then
      Result.vCOFINS := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSOutrFromJson(Source: string): TNfeSefazCOFINSOutr;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCOFINSOutrFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSToJsonValue(Source: TNfeSefazCOFINS): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.COFINSAliq) then
      Json.ObjAddProp(Result, 'COFINSAliq', Self.TNfeSefazCOFINSAliqToJsonValue(Source.COFINSAliq));
    if Assigned(Source.COFINSQtde) then
      Json.ObjAddProp(Result, 'COFINSQtde', Self.TNfeSefazCOFINSQtdeToJsonValue(Source.COFINSQtde));
    if Assigned(Source.COFINSNT) then
      Json.ObjAddProp(Result, 'COFINSNT', Self.TNfeSefazCOFINSNTToJsonValue(Source.COFINSNT));
    if Assigned(Source.COFINSOutr) then
      Json.ObjAddProp(Result, 'COFINSOutr', Self.TNfeSefazCOFINSOutrToJsonValue(Source.COFINSOutr));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSToJson(Source: TNfeSefazCOFINS): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCOFINSToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSFromJsonValue(Source: TJSONValue): TNfeSefazCOFINS;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCOFINS.Create;
  try
    if Json.ObjContains(Source, 'COFINSAliq', JValue) then
      Result.COFINSAliq := Self.TNfeSefazCOFINSAliqFromJsonValue(JValue);
    if Json.ObjContains(Source, 'COFINSQtde', JValue) then
      Result.COFINSQtde := Self.TNfeSefazCOFINSQtdeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'COFINSNT', JValue) then
      Result.COFINSNT := Self.TNfeSefazCOFINSNTFromJsonValue(JValue);
    if Json.ObjContains(Source, 'COFINSOutr', JValue) then
      Result.COFINSOutr := Self.TNfeSefazCOFINSOutrFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSFromJson(Source: string): TNfeSefazCOFINS;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCOFINSFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSSTToJsonValue(Source: TNfeSefazCOFINSST): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.vBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    if Source.pCOFINSHasValue then
      Json.ObjAddProp(Result, 'pCOFINS', Self.DoubleToJsonValue(Source.pCOFINS));
    if Source.qBCProdHasValue then
      Json.ObjAddProp(Result, 'qBCProd', Self.DoubleToJsonValue(Source.qBCProd));
    if Source.vAliqProdHasValue then
      Json.ObjAddProp(Result, 'vAliqProd', Self.DoubleToJsonValue(Source.vAliqProd));
    Json.ObjAddProp(Result, 'vCOFINS', Self.DoubleToJsonValue(Source.vCOFINS));
    if Source.indSomaCOFINSSTHasValue then
      Json.ObjAddProp(Result, 'indSomaCOFINSST', Self.IntegerToJsonValue(Source.indSomaCOFINSST));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSSTToJson(Source: TNfeSefazCOFINSST): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCOFINSSTToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSSTFromJsonValue(Source: TJSONValue): TNfeSefazCOFINSST;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCOFINSST.Create;
  try
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pCOFINS', JValue) then
      Result.pCOFINS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCProd', JValue) then
      Result.qBCProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vAliqProd', JValue) then
      Result.vAliqProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCOFINS', JValue) then
      Result.vCOFINS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indSomaCOFINSST', JValue) then
      Result.indSomaCOFINSST := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCOFINSSTFromJson(Source: string): TNfeSefazCOFINSST;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCOFINSSTFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSUFDestToJsonValue(Source: TNfeSefazICMSUFDest): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vBCUFDest', Self.DoubleToJsonValue(Source.vBCUFDest));
    if Source.vBCFCPUFDestHasValue then
      Json.ObjAddProp(Result, 'vBCFCPUFDest', Self.DoubleToJsonValue(Source.vBCFCPUFDest));
    if Source.pFCPUFDestHasValue then
      Json.ObjAddProp(Result, 'pFCPUFDest', Self.DoubleToJsonValue(Source.pFCPUFDest));
    Json.ObjAddProp(Result, 'pICMSUFDest', Self.DoubleToJsonValue(Source.pICMSUFDest));
    Json.ObjAddProp(Result, 'pICMSInter', Self.DoubleToJsonValue(Source.pICMSInter));
    Json.ObjAddProp(Result, 'pICMSInterPart', Self.DoubleToJsonValue(Source.pICMSInterPart));
    if Source.vFCPUFDestHasValue then
      Json.ObjAddProp(Result, 'vFCPUFDest', Self.DoubleToJsonValue(Source.vFCPUFDest));
    Json.ObjAddProp(Result, 'vICMSUFDest', Self.DoubleToJsonValue(Source.vICMSUFDest));
    Json.ObjAddProp(Result, 'vICMSUFRemet', Self.DoubleToJsonValue(Source.vICMSUFRemet));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSUFDestToJson(Source: TNfeSefazICMSUFDest): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSUFDestToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSUFDestFromJsonValue(Source: TJSONValue): TNfeSefazICMSUFDest;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSUFDest.Create;
  try
    if Json.ObjContains(Source, 'vBCUFDest', JValue) then
      Result.vBCUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCFCPUFDest', JValue) then
      Result.vBCFCPUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pFCPUFDest', JValue) then
      Result.pFCPUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSUFDest', JValue) then
      Result.pICMSUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSInter', JValue) then
      Result.pICMSInter := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSInterPart', JValue) then
      Result.pICMSInterPart := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPUFDest', JValue) then
      Result.vFCPUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSUFDest', JValue) then
      Result.vICMSUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSUFRemet', JValue) then
      Result.vICMSUFRemet := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSUFDestFromJson(Source: string): TNfeSefazICMSUFDest;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSUFDestFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazImpostoToJsonValue(Source: TNfeSefazImposto): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.vTotTribHasValue then
      Json.ObjAddProp(Result, 'vTotTrib', Self.DoubleToJsonValue(Source.vTotTrib));
    if Assigned(Source.ICMS) then
      Json.ObjAddProp(Result, 'ICMS', Self.TNfeSefazICMSToJsonValue(Source.ICMS));
    if Assigned(Source.IPI) then
      Json.ObjAddProp(Result, 'IPI', Self.TNfeSefazIpiToJsonValue(Source.IPI));
    if Assigned(Source.II) then
      Json.ObjAddProp(Result, 'II', Self.TNfeSefazIIToJsonValue(Source.II));
    if Assigned(Source.ISSQN) then
      Json.ObjAddProp(Result, 'ISSQN', Self.TNfeSefazISSQNToJsonValue(Source.ISSQN));
    if Assigned(Source.PIS) then
      Json.ObjAddProp(Result, 'PIS', Self.TNfeSefazPISToJsonValue(Source.PIS));
    if Assigned(Source.PISST) then
      Json.ObjAddProp(Result, 'PISST', Self.TNfeSefazPISSTToJsonValue(Source.PISST));
    if Assigned(Source.COFINS) then
      Json.ObjAddProp(Result, 'COFINS', Self.TNfeSefazCOFINSToJsonValue(Source.COFINS));
    if Assigned(Source.COFINSST) then
      Json.ObjAddProp(Result, 'COFINSST', Self.TNfeSefazCOFINSSTToJsonValue(Source.COFINSST));
    if Assigned(Source.ICMSUFDest) then
      Json.ObjAddProp(Result, 'ICMSUFDest', Self.TNfeSefazICMSUFDestToJsonValue(Source.ICMSUFDest));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazImpostoToJson(Source: TNfeSefazImposto): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazImpostoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazImpostoFromJsonValue(Source: TJSONValue): TNfeSefazImposto;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazImposto.Create;
  try
    if Json.ObjContains(Source, 'vTotTrib', JValue) then
      Result.vTotTrib := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMS', JValue) then
      Result.ICMS := Self.TNfeSefazICMSFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IPI', JValue) then
      Result.IPI := Self.TNfeSefazIpiFromJsonValue(JValue);
    if Json.ObjContains(Source, 'II', JValue) then
      Result.II := Self.TNfeSefazIIFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ISSQN', JValue) then
      Result.ISSQN := Self.TNfeSefazISSQNFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PIS', JValue) then
      Result.PIS := Self.TNfeSefazPISFromJsonValue(JValue);
    if Json.ObjContains(Source, 'PISST', JValue) then
      Result.PISST := Self.TNfeSefazPISSTFromJsonValue(JValue);
    if Json.ObjContains(Source, 'COFINS', JValue) then
      Result.COFINS := Self.TNfeSefazCOFINSFromJsonValue(JValue);
    if Json.ObjContains(Source, 'COFINSST', JValue) then
      Result.COFINSST := Self.TNfeSefazCOFINSSTFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ICMSUFDest', JValue) then
      Result.ICMSUFDest := Self.TNfeSefazICMSUFDestFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazImpostoFromJson(Source: string): TNfeSefazImposto;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazImpostoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazImpostoDevolIPIToJsonValue(Source: TNfeSefazImpostoDevolIPI): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vIPIDevol', Self.DoubleToJsonValue(Source.vIPIDevol));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazImpostoDevolIPIToJson(Source: TNfeSefazImpostoDevolIPI): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazImpostoDevolIPIToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazImpostoDevolIPIFromJsonValue(Source: TJSONValue): TNfeSefazImpostoDevolIPI;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazImpostoDevolIPI.Create;
  try
    if Json.ObjContains(Source, 'vIPIDevol', JValue) then
      Result.vIPIDevol := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazImpostoDevolIPIFromJson(Source: string): TNfeSefazImpostoDevolIPI;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazImpostoDevolIPIFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazImpostoDevolToJsonValue(Source: TNfeSefazImpostoDevol): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'pDevol', Self.DoubleToJsonValue(Source.pDevol));
    Json.ObjAddProp(Result, 'IPI', Self.TNfeSefazImpostoDevolIPIToJsonValue(Source.IPI));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazImpostoDevolToJson(Source: TNfeSefazImpostoDevol): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazImpostoDevolToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazImpostoDevolFromJsonValue(Source: TJSONValue): TNfeSefazImpostoDevol;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazImpostoDevol.Create;
  try
    if Json.ObjContains(Source, 'pDevol', JValue) then
      Result.pDevol := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IPI', JValue) then
      Result.IPI := Self.TNfeSefazImpostoDevolIPIFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazImpostoDevolFromJson(Source: string): TNfeSefazImpostoDevol;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazImpostoDevolFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazObsContToJsonValue(Source: TNfeSefazObsCont): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xCampoHasValue then
      Json.ObjAddProp(Result, 'xCampo', Self.stringToJsonValue(Source.xCampo));
    if Source.xTextoHasValue then
      Json.ObjAddProp(Result, 'xTexto', Self.stringToJsonValue(Source.xTexto));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazObsContToJson(Source: TNfeSefazObsCont): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazObsContToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazObsContFromJsonValue(Source: TJSONValue): TNfeSefazObsCont;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazObsCont.Create;
  try
    if Json.ObjContains(Source, 'xCampo', JValue) then
      Result.xCampo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xTexto', JValue) then
      Result.xTexto := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazObsContFromJson(Source: string): TNfeSefazObsCont;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazObsContFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazObsFiscoToJsonValue(Source: TNfeSefazObsFisco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xCampoHasValue then
      Json.ObjAddProp(Result, 'xCampo', Self.stringToJsonValue(Source.xCampo));
    if Source.xTextoHasValue then
      Json.ObjAddProp(Result, 'xTexto', Self.stringToJsonValue(Source.xTexto));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazObsFiscoToJson(Source: TNfeSefazObsFisco): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazObsFiscoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazObsFiscoFromJsonValue(Source: TJSONValue): TNfeSefazObsFisco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazObsFisco.Create;
  try
    if Json.ObjContains(Source, 'xCampo', JValue) then
      Result.xCampo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xTexto', JValue) then
      Result.xTexto := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazObsFiscoFromJson(Source: string): TNfeSefazObsFisco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazObsFiscoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazObsItemToJsonValue(Source: TNfeSefazObsItem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.obsCont) then
      Json.ObjAddProp(Result, 'obsCont', Self.TNfeSefazObsContToJsonValue(Source.obsCont));
    if Assigned(Source.obsFisco) then
      Json.ObjAddProp(Result, 'obsFisco', Self.TNfeSefazObsFiscoToJsonValue(Source.obsFisco));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazObsItemToJson(Source: TNfeSefazObsItem): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazObsItemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazObsItemFromJsonValue(Source: TJSONValue): TNfeSefazObsItem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazObsItem.Create;
  try
    if Json.ObjContains(Source, 'obsCont', JValue) then
      Result.obsCont := Self.TNfeSefazObsContFromJsonValue(JValue);
    if Json.ObjContains(Source, 'obsFisco', JValue) then
      Result.obsFisco := Self.TNfeSefazObsFiscoFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazObsItemFromJson(Source: string): TNfeSefazObsItem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazObsItemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetToJsonValue(Source: TNfeSefazDet): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nItem', Self.IntegerToJsonValue(Source.nItem));
    Json.ObjAddProp(Result, 'prod', Self.TNfeSefazProdToJsonValue(Source.prod));
    Json.ObjAddProp(Result, 'imposto', Self.TNfeSefazImpostoToJsonValue(Source.imposto));
    if Assigned(Source.impostoDevol) then
      Json.ObjAddProp(Result, 'impostoDevol', Self.TNfeSefazImpostoDevolToJsonValue(Source.impostoDevol));
    if Source.infAdProdHasValue then
      Json.ObjAddProp(Result, 'infAdProd', Self.stringToJsonValue(Source.infAdProd));
    if Assigned(Source.obsItem) then
      Json.ObjAddProp(Result, 'obsItem', Self.TNfeSefazObsItemToJsonValue(Source.obsItem));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetToJson(Source: TNfeSefazDet): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDetToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetFromJsonValue(Source: TJSONValue): TNfeSefazDet;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDet.Create;
  try
    if Json.ObjContains(Source, 'nItem', JValue) then
      Result.nItem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'prod', JValue) then
      Result.prod := Self.TNfeSefazProdFromJsonValue(JValue);
    if Json.ObjContains(Source, 'imposto', JValue) then
      Result.imposto := Self.TNfeSefazImpostoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'impostoDevol', JValue) then
      Result.impostoDevol := Self.TNfeSefazImpostoDevolFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infAdProd', JValue) then
      Result.infAdProd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'obsItem', JValue) then
      Result.obsItem := Self.TNfeSefazObsItemFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetFromJson(Source: string): TNfeSefazDet;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDetFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetListToJsonValue(Source: TNfeSefazDetList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazDetToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetListToJson(Source: TNfeSefazDetList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDetListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetListFromJsonValue(Source: TJSONValue): TNfeSefazDetList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDetList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazDetFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetListFromJson(Source: string): TNfeSefazDetList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDetListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSTotToJsonValue(Source: TNfeSefazICMSTot): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    Json.ObjAddProp(Result, 'vICMS', Self.DoubleToJsonValue(Source.vICMS));
    Json.ObjAddProp(Result, 'vICMSDeson', Self.DoubleToJsonValue(Source.vICMSDeson));
    if Source.vFCPUFDestHasValue then
      Json.ObjAddProp(Result, 'vFCPUFDest', Self.DoubleToJsonValue(Source.vFCPUFDest));
    if Source.vICMSUFDestHasValue then
      Json.ObjAddProp(Result, 'vICMSUFDest', Self.DoubleToJsonValue(Source.vICMSUFDest));
    if Source.vICMSUFRemetHasValue then
      Json.ObjAddProp(Result, 'vICMSUFRemet', Self.DoubleToJsonValue(Source.vICMSUFRemet));
    Json.ObjAddProp(Result, 'vFCP', Self.DoubleToJsonValue(Source.vFCP));
    Json.ObjAddProp(Result, 'vBCST', Self.DoubleToJsonValue(Source.vBCST));
    Json.ObjAddProp(Result, 'vST', Self.DoubleToJsonValue(Source.vST));
    Json.ObjAddProp(Result, 'vFCPST', Self.DoubleToJsonValue(Source.vFCPST));
    Json.ObjAddProp(Result, 'vFCPSTRet', Self.DoubleToJsonValue(Source.vFCPSTRet));
    if Source.qBCMonoHasValue then
      Json.ObjAddProp(Result, 'qBCMono', Self.DoubleToJsonValue(Source.qBCMono));
    if Source.vICMSMonoHasValue then
      Json.ObjAddProp(Result, 'vICMSMono', Self.DoubleToJsonValue(Source.vICMSMono));
    if Source.qBCMonoRetenHasValue then
      Json.ObjAddProp(Result, 'qBCMonoReten', Self.DoubleToJsonValue(Source.qBCMonoReten));
    if Source.vICMSMonoRetenHasValue then
      Json.ObjAddProp(Result, 'vICMSMonoReten', Self.DoubleToJsonValue(Source.vICMSMonoReten));
    if Source.qBCMonoRetHasValue then
      Json.ObjAddProp(Result, 'qBCMonoRet', Self.DoubleToJsonValue(Source.qBCMonoRet));
    if Source.vICMSMonoRetHasValue then
      Json.ObjAddProp(Result, 'vICMSMonoRet', Self.DoubleToJsonValue(Source.vICMSMonoRet));
    Json.ObjAddProp(Result, 'vProd', Self.DoubleToJsonValue(Source.vProd));
    Json.ObjAddProp(Result, 'vFrete', Self.DoubleToJsonValue(Source.vFrete));
    Json.ObjAddProp(Result, 'vSeg', Self.DoubleToJsonValue(Source.vSeg));
    Json.ObjAddProp(Result, 'vDesc', Self.DoubleToJsonValue(Source.vDesc));
    Json.ObjAddProp(Result, 'vII', Self.DoubleToJsonValue(Source.vII));
    Json.ObjAddProp(Result, 'vIPI', Self.DoubleToJsonValue(Source.vIPI));
    Json.ObjAddProp(Result, 'vIPIDevol', Self.DoubleToJsonValue(Source.vIPIDevol));
    Json.ObjAddProp(Result, 'vPIS', Self.DoubleToJsonValue(Source.vPIS));
    Json.ObjAddProp(Result, 'vCOFINS', Self.DoubleToJsonValue(Source.vCOFINS));
    Json.ObjAddProp(Result, 'vOutro', Self.DoubleToJsonValue(Source.vOutro));
    Json.ObjAddProp(Result, 'vNF', Self.DoubleToJsonValue(Source.vNF));
    if Source.vTotTribHasValue then
      Json.ObjAddProp(Result, 'vTotTrib', Self.DoubleToJsonValue(Source.vTotTrib));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSTotToJson(Source: TNfeSefazICMSTot): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazICMSTotToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazICMSTotFromJsonValue(Source: TJSONValue): TNfeSefazICMSTot;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazICMSTot.Create;
  try
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMS', JValue) then
      Result.vICMS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSDeson', JValue) then
      Result.vICMSDeson := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPUFDest', JValue) then
      Result.vFCPUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSUFDest', JValue) then
      Result.vICMSUFDest := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSUFRemet', JValue) then
      Result.vICMSUFRemet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCP', JValue) then
      Result.vFCP := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCST', JValue) then
      Result.vBCST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vST', JValue) then
      Result.vST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPST', JValue) then
      Result.vFCPST := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFCPSTRet', JValue) then
      Result.vFCPSTRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCMono', JValue) then
      Result.qBCMono := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSMono', JValue) then
      Result.vICMSMono := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCMonoReten', JValue) then
      Result.qBCMonoReten := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSMonoReten', JValue) then
      Result.vICMSMonoReten := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qBCMonoRet', JValue) then
      Result.qBCMonoRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSMonoRet', JValue) then
      Result.vICMSMonoRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vProd', JValue) then
      Result.vProd := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFrete', JValue) then
      Result.vFrete := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vSeg', JValue) then
      Result.vSeg := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDesc', JValue) then
      Result.vDesc := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vII', JValue) then
      Result.vII := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vIPI', JValue) then
      Result.vIPI := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vIPIDevol', JValue) then
      Result.vIPIDevol := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPIS', JValue) then
      Result.vPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCOFINS', JValue) then
      Result.vCOFINS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vOutro', JValue) then
      Result.vOutro := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vNF', JValue) then
      Result.vNF := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vTotTrib', JValue) then
      Result.vTotTrib := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazICMSTotFromJson(Source: string): TNfeSefazICMSTot;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazICMSTotFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazISSQNtotToJsonValue(Source: TNfeSefazISSQNtot): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.vServHasValue then
      Json.ObjAddProp(Result, 'vServ', Self.DoubleToJsonValue(Source.vServ));
    if Source.vBCHasValue then
      Json.ObjAddProp(Result, 'vBC', Self.DoubleToJsonValue(Source.vBC));
    if Source.vISSHasValue then
      Json.ObjAddProp(Result, 'vISS', Self.DoubleToJsonValue(Source.vISS));
    if Source.vPISHasValue then
      Json.ObjAddProp(Result, 'vPIS', Self.DoubleToJsonValue(Source.vPIS));
    if Source.vCOFINSHasValue then
      Json.ObjAddProp(Result, 'vCOFINS', Self.DoubleToJsonValue(Source.vCOFINS));
    Json.ObjAddProp(Result, 'dCompet', Self.TDateToJsonValue(Source.dCompet));
    if Source.vDeducaoHasValue then
      Json.ObjAddProp(Result, 'vDeducao', Self.DoubleToJsonValue(Source.vDeducao));
    if Source.vOutroHasValue then
      Json.ObjAddProp(Result, 'vOutro', Self.DoubleToJsonValue(Source.vOutro));
    if Source.vDescIncondHasValue then
      Json.ObjAddProp(Result, 'vDescIncond', Self.DoubleToJsonValue(Source.vDescIncond));
    if Source.vDescCondHasValue then
      Json.ObjAddProp(Result, 'vDescCond', Self.DoubleToJsonValue(Source.vDescCond));
    if Source.vISSRetHasValue then
      Json.ObjAddProp(Result, 'vISSRet', Self.DoubleToJsonValue(Source.vISSRet));
    if Source.cRegTribHasValue then
      Json.ObjAddProp(Result, 'cRegTrib', Self.IntegerToJsonValue(Source.cRegTrib));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazISSQNtotToJson(Source: TNfeSefazISSQNtot): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazISSQNtotToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazISSQNtotFromJsonValue(Source: TJSONValue): TNfeSefazISSQNtot;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazISSQNtot.Create;
  try
    if Json.ObjContains(Source, 'vServ', JValue) then
      Result.vServ := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBC', JValue) then
      Result.vBC := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vISS', JValue) then
      Result.vISS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPIS', JValue) then
      Result.vPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vCOFINS', JValue) then
      Result.vCOFINS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dCompet', JValue) then
      Result.dCompet := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDeducao', JValue) then
      Result.vDeducao := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vOutro', JValue) then
      Result.vOutro := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDescIncond', JValue) then
      Result.vDescIncond := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDescCond', JValue) then
      Result.vDescCond := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vISSRet', JValue) then
      Result.vISSRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cRegTrib', JValue) then
      Result.cRegTrib := Self.IntegerFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazISSQNtotFromJson(Source: string): TNfeSefazISSQNtot;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazISSQNtotFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRetTribToJsonValue(Source: TNfeSefazRetTrib): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.vRetPISHasValue then
      Json.ObjAddProp(Result, 'vRetPIS', Self.DoubleToJsonValue(Source.vRetPIS));
    if Source.vRetCOFINSHasValue then
      Json.ObjAddProp(Result, 'vRetCOFINS', Self.DoubleToJsonValue(Source.vRetCOFINS));
    if Source.vRetCSLLHasValue then
      Json.ObjAddProp(Result, 'vRetCSLL', Self.DoubleToJsonValue(Source.vRetCSLL));
    if Source.vBCIRRFHasValue then
      Json.ObjAddProp(Result, 'vBCIRRF', Self.DoubleToJsonValue(Source.vBCIRRF));
    if Source.vIRRFHasValue then
      Json.ObjAddProp(Result, 'vIRRF', Self.DoubleToJsonValue(Source.vIRRF));
    if Source.vBCRetPrevHasValue then
      Json.ObjAddProp(Result, 'vBCRetPrev', Self.DoubleToJsonValue(Source.vBCRetPrev));
    if Source.vRetPrevHasValue then
      Json.ObjAddProp(Result, 'vRetPrev', Self.DoubleToJsonValue(Source.vRetPrev));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRetTribToJson(Source: TNfeSefazRetTrib): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazRetTribToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRetTribFromJsonValue(Source: TJSONValue): TNfeSefazRetTrib;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazRetTrib.Create;
  try
    if Json.ObjContains(Source, 'vRetPIS', JValue) then
      Result.vRetPIS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vRetCOFINS', JValue) then
      Result.vRetCOFINS := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vRetCSLL', JValue) then
      Result.vRetCSLL := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCIRRF', JValue) then
      Result.vBCIRRF := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vIRRF', JValue) then
      Result.vIRRF := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCRetPrev', JValue) then
      Result.vBCRetPrev := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vRetPrev', JValue) then
      Result.vRetPrev := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRetTribFromJson(Source: string): TNfeSefazRetTrib;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazRetTribFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazTotalToJsonValue(Source: TNfeSefazTotal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'ICMSTot', Self.TNfeSefazICMSTotToJsonValue(Source.ICMSTot));
    if Assigned(Source.ISSQNtot) then
      Json.ObjAddProp(Result, 'ISSQNtot', Self.TNfeSefazISSQNtotToJsonValue(Source.ISSQNtot));
    if Assigned(Source.retTrib) then
      Json.ObjAddProp(Result, 'retTrib', Self.TNfeSefazRetTribToJsonValue(Source.retTrib));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazTotalToJson(Source: TNfeSefazTotal): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazTotalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazTotalFromJsonValue(Source: TJSONValue): TNfeSefazTotal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazTotal.Create;
  try
    if Json.ObjContains(Source, 'ICMSTot', JValue) then
      Result.ICMSTot := Self.TNfeSefazICMSTotFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ISSQNtot', JValue) then
      Result.ISSQNtot := Self.TNfeSefazISSQNtotFromJsonValue(JValue);
    if Json.ObjContains(Source, 'retTrib', JValue) then
      Result.retTrib := Self.TNfeSefazRetTribFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazTotalFromJson(Source: string): TNfeSefazTotal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazTotalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazTransportaToJsonValue(Source: TNfeSefazTransporta): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.CPFHasValue then
      Json.ObjAddProp(Result, 'CPF', Self.stringToJsonValue(Source.CPF));
    if Source.xNomeHasValue then
      Json.ObjAddProp(Result, 'xNome', Self.stringToJsonValue(Source.xNome));
    if Source.IEHasValue then
      Json.ObjAddProp(Result, 'IE', Self.stringToJsonValue(Source.IE));
    if Source.xEnderHasValue then
      Json.ObjAddProp(Result, 'xEnder', Self.stringToJsonValue(Source.xEnder));
    if Source.xMunHasValue then
      Json.ObjAddProp(Result, 'xMun', Self.stringToJsonValue(Source.xMun));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazTransportaToJson(Source: TNfeSefazTransporta): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazTransportaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazTransportaFromJsonValue(Source: TJSONValue): TNfeSefazTransporta;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazTransporta.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPF', JValue) then
      Result.CPF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xNome', JValue) then
      Result.xNome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'IE', JValue) then
      Result.IE := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xEnder', JValue) then
      Result.xEnder := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xMun', JValue) then
      Result.xMun := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazTransportaFromJson(Source: string): TNfeSefazTransporta;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazTransportaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRetTranspToJsonValue(Source: TNfeSefazRetTransp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'vServ', Self.DoubleToJsonValue(Source.vServ));
    Json.ObjAddProp(Result, 'vBCRet', Self.DoubleToJsonValue(Source.vBCRet));
    Json.ObjAddProp(Result, 'pICMSRet', Self.DoubleToJsonValue(Source.pICMSRet));
    Json.ObjAddProp(Result, 'vICMSRet', Self.DoubleToJsonValue(Source.vICMSRet));
    Json.ObjAddProp(Result, 'CFOP', Self.stringToJsonValue(Source.CFOP));
    Json.ObjAddProp(Result, 'cMunFG', Self.stringToJsonValue(Source.cMunFG));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRetTranspToJson(Source: TNfeSefazRetTransp): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazRetTranspToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazRetTranspFromJsonValue(Source: TJSONValue): TNfeSefazRetTransp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazRetTransp.Create;
  try
    if Json.ObjContains(Source, 'vServ', JValue) then
      Result.vServ := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vBCRet', JValue) then
      Result.vBCRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pICMSRet', JValue) then
      Result.pICMSRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vICMSRet', JValue) then
      Result.vICMSRet := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CFOP', JValue) then
      Result.CFOP := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cMunFG', JValue) then
      Result.cMunFG := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazRetTranspFromJson(Source: string): TNfeSefazRetTransp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazRetTranspFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVeiculoToJsonValue(Source: TNfeSefazVeiculo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'placa', Self.stringToJsonValue(Source.placa));
    if Source.UFHasValue then
      Json.ObjAddProp(Result, 'UF', Self.stringToJsonValue(Source.UF));
    if Source.RNTCHasValue then
      Json.ObjAddProp(Result, 'RNTC', Self.stringToJsonValue(Source.RNTC));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVeiculoToJson(Source: TNfeSefazVeiculo): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazVeiculoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVeiculoFromJsonValue(Source: TJSONValue): TNfeSefazVeiculo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazVeiculo.Create;
  try
    if Json.ObjContains(Source, 'placa', JValue) then
      Result.placa := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UF', JValue) then
      Result.UF := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'RNTC', JValue) then
      Result.RNTC := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVeiculoFromJson(Source: string): TNfeSefazVeiculo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazVeiculoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVeiculoListToJsonValue(Source: TNfeSefazVeiculoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazVeiculoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVeiculoListToJson(Source: TNfeSefazVeiculoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazVeiculoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVeiculoListFromJsonValue(Source: TJSONValue): TNfeSefazVeiculoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazVeiculoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazVeiculoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVeiculoListFromJson(Source: string): TNfeSefazVeiculoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazVeiculoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazLacresToJsonValue(Source: TNfeSefazLacres): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nLacre', Self.stringToJsonValue(Source.nLacre));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazLacresToJson(Source: TNfeSefazLacres): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazLacresToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazLacresFromJsonValue(Source: TJSONValue): TNfeSefazLacres;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazLacres.Create;
  try
    if Json.ObjContains(Source, 'nLacre', JValue) then
      Result.nLacre := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazLacresFromJson(Source: string): TNfeSefazLacres;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazLacresFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazLacresListToJsonValue(Source: TNfeSefazLacresList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazLacresToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazLacresListToJson(Source: TNfeSefazLacresList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazLacresListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazLacresListFromJsonValue(Source: TJSONValue): TNfeSefazLacresList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazLacresList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazLacresFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazLacresListFromJson(Source: string): TNfeSefazLacresList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazLacresListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVolToJsonValue(Source: TNfeSefazVol): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.qVolHasValue then
      Json.ObjAddProp(Result, 'qVol', Self.Int64ToJsonValue(Source.qVol));
    if Source.espHasValue then
      Json.ObjAddProp(Result, 'esp', Self.stringToJsonValue(Source.esp));
    if Source.marcaHasValue then
      Json.ObjAddProp(Result, 'marca', Self.stringToJsonValue(Source.marca));
    if Source.nVolHasValue then
      Json.ObjAddProp(Result, 'nVol', Self.stringToJsonValue(Source.nVol));
    if Source.pesoLHasValue then
      Json.ObjAddProp(Result, 'pesoL', Self.DoubleToJsonValue(Source.pesoL));
    if Source.pesoBHasValue then
      Json.ObjAddProp(Result, 'pesoB', Self.DoubleToJsonValue(Source.pesoB));
    if Assigned(Source.lacres) then
      Json.ObjAddProp(Result, 'lacres', Self.TNfeSefazLacresListToJsonValue(Source.lacres));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVolToJson(Source: TNfeSefazVol): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazVolToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVolFromJsonValue(Source: TJSONValue): TNfeSefazVol;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazVol.Create;
  try
    if Json.ObjContains(Source, 'qVol', JValue) then
      Result.qVol := Self.Int64FromJsonValue(JValue);
    if Json.ObjContains(Source, 'esp', JValue) then
      Result.esp := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'marca', JValue) then
      Result.marca := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nVol', JValue) then
      Result.nVol := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pesoL', JValue) then
      Result.pesoL := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pesoB', JValue) then
      Result.pesoB := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'lacres', JValue) then
      Result.lacres := Self.TNfeSefazLacresListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVolFromJson(Source: string): TNfeSefazVol;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazVolFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVolListToJsonValue(Source: TNfeSefazVolList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazVolToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVolListToJson(Source: TNfeSefazVolList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazVolListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazVolListFromJsonValue(Source: TJSONValue): TNfeSefazVolList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazVolList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazVolFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazVolListFromJson(Source: string): TNfeSefazVolList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazVolListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazTranspToJsonValue(Source: TNfeSefazTransp): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'modFrete', Self.IntegerToJsonValue(Source.modFrete));
    if Assigned(Source.transporta) then
      Json.ObjAddProp(Result, 'transporta', Self.TNfeSefazTransportaToJsonValue(Source.transporta));
    if Assigned(Source.retTransp) then
      Json.ObjAddProp(Result, 'retTransp', Self.TNfeSefazRetTranspToJsonValue(Source.retTransp));
    if Assigned(Source.veicTransp) then
      Json.ObjAddProp(Result, 'veicTransp', Self.TNfeSefazVeiculoToJsonValue(Source.veicTransp));
    if Assigned(Source.reboque) then
      Json.ObjAddProp(Result, 'reboque', Self.TNfeSefazVeiculoListToJsonValue(Source.reboque));
    if Source.vagaoHasValue then
      Json.ObjAddProp(Result, 'vagao', Self.stringToJsonValue(Source.vagao));
    if Source.balsaHasValue then
      Json.ObjAddProp(Result, 'balsa', Self.stringToJsonValue(Source.balsa));
    if Assigned(Source.vol) then
      Json.ObjAddProp(Result, 'vol', Self.TNfeSefazVolListToJsonValue(Source.vol));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazTranspToJson(Source: TNfeSefazTransp): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazTranspToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazTranspFromJsonValue(Source: TJSONValue): TNfeSefazTransp;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazTransp.Create;
  try
    if Json.ObjContains(Source, 'modFrete', JValue) then
      Result.modFrete := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'transporta', JValue) then
      Result.transporta := Self.TNfeSefazTransportaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'retTransp', JValue) then
      Result.retTransp := Self.TNfeSefazRetTranspFromJsonValue(JValue);
    if Json.ObjContains(Source, 'veicTransp', JValue) then
      Result.veicTransp := Self.TNfeSefazVeiculoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'reboque', JValue) then
      Result.reboque := Self.TNfeSefazVeiculoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vagao', JValue) then
      Result.vagao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'balsa', JValue) then
      Result.balsa := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vol', JValue) then
      Result.vol := Self.TNfeSefazVolListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazTranspFromJson(Source: string): TNfeSefazTransp;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazTranspFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazFatToJsonValue(Source: TNfeSefazFat): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.nFatHasValue then
      Json.ObjAddProp(Result, 'nFat', Self.stringToJsonValue(Source.nFat));
    if Source.vOrigHasValue then
      Json.ObjAddProp(Result, 'vOrig', Self.DoubleToJsonValue(Source.vOrig));
    if Source.vDescHasValue then
      Json.ObjAddProp(Result, 'vDesc', Self.DoubleToJsonValue(Source.vDesc));
    if Source.vLiqHasValue then
      Json.ObjAddProp(Result, 'vLiq', Self.DoubleToJsonValue(Source.vLiq));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazFatToJson(Source: TNfeSefazFat): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazFatToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazFatFromJsonValue(Source: TJSONValue): TNfeSefazFat;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazFat.Create;
  try
    if Json.ObjContains(Source, 'nFat', JValue) then
      Result.nFat := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vOrig', JValue) then
      Result.vOrig := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDesc', JValue) then
      Result.vDesc := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vLiq', JValue) then
      Result.vLiq := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazFatFromJson(Source: string): TNfeSefazFat;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazFatFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDupToJsonValue(Source: TNfeSefazDup): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.nDupHasValue then
      Json.ObjAddProp(Result, 'nDup', Self.stringToJsonValue(Source.nDup));
    if Source.dVencHasValue then
      Json.ObjAddProp(Result, 'dVenc', Self.TDateToJsonValue(Source.dVenc));
    Json.ObjAddProp(Result, 'vDup', Self.DoubleToJsonValue(Source.vDup));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDupToJson(Source: TNfeSefazDup): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDupToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDupFromJsonValue(Source: TJSONValue): TNfeSefazDup;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDup.Create;
  try
    if Json.ObjContains(Source, 'nDup', JValue) then
      Result.nDup := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dVenc', JValue) then
      Result.dVenc := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDup', JValue) then
      Result.vDup := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDupFromJson(Source: string): TNfeSefazDup;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDupFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDupListToJsonValue(Source: TNfeSefazDupList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazDupToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDupListToJson(Source: TNfeSefazDupList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDupListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDupListFromJsonValue(Source: TJSONValue): TNfeSefazDupList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDupList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazDupFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDupListFromJson(Source: string): TNfeSefazDupList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDupListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCobrToJsonValue(Source: TNfeSefazCobr): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.fat) then
      Json.ObjAddProp(Result, 'fat', Self.TNfeSefazFatToJsonValue(Source.fat));
    if Assigned(Source.dup) then
      Json.ObjAddProp(Result, 'dup', Self.TNfeSefazDupListToJsonValue(Source.dup));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCobrToJson(Source: TNfeSefazCobr): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCobrToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCobrFromJsonValue(Source: TJSONValue): TNfeSefazCobr;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCobr.Create;
  try
    if Json.ObjContains(Source, 'fat', JValue) then
      Result.fat := Self.TNfeSefazFatFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dup', JValue) then
      Result.dup := Self.TNfeSefazDupListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCobrFromJson(Source: string): TNfeSefazCobr;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCobrFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCardToJsonValue(Source: TNfeSefazCard): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpIntegra', Self.IntegerToJsonValue(Source.tpIntegra));
    if Source.CNPJHasValue then
      Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    if Source.tBandHasValue then
      Json.ObjAddProp(Result, 'tBand', Self.stringToJsonValue(Source.tBand));
    if Source.cAutHasValue then
      Json.ObjAddProp(Result, 'cAut', Self.stringToJsonValue(Source.cAut));
    if Source.CNPJRecebHasValue then
      Json.ObjAddProp(Result, 'CNPJReceb', Self.stringToJsonValue(Source.CNPJReceb));
    if Source.idTermPagHasValue then
      Json.ObjAddProp(Result, 'idTermPag', Self.stringToJsonValue(Source.idTermPag));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCardToJson(Source: TNfeSefazCard): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCardToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCardFromJsonValue(Source: TJSONValue): TNfeSefazCard;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCard.Create;
  try
    if Json.ObjContains(Source, 'tpIntegra', JValue) then
      Result.tpIntegra := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tBand', JValue) then
      Result.tBand := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cAut', JValue) then
      Result.cAut := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJReceb', JValue) then
      Result.CNPJReceb := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idTermPag', JValue) then
      Result.idTermPag := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCardFromJson(Source: string): TNfeSefazCard;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCardFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetPagToJsonValue(Source: TNfeSefazDetPag): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.indPagHasValue then
      Json.ObjAddProp(Result, 'indPag', Self.IntegerToJsonValue(Source.indPag));
    Json.ObjAddProp(Result, 'tPag', Self.stringToJsonValue(Source.tPag));
    if Source.xPagHasValue then
      Json.ObjAddProp(Result, 'xPag', Self.stringToJsonValue(Source.xPag));
    Json.ObjAddProp(Result, 'vPag', Self.DoubleToJsonValue(Source.vPag));
    if Source.dPagHasValue then
      Json.ObjAddProp(Result, 'dPag', Self.TDateToJsonValue(Source.dPag));
    if Source.CNPJPagHasValue then
      Json.ObjAddProp(Result, 'CNPJPag', Self.stringToJsonValue(Source.CNPJPag));
    if Source.UFPagHasValue then
      Json.ObjAddProp(Result, 'UFPag', Self.stringToJsonValue(Source.UFPag));
    if Assigned(Source.card) then
      Json.ObjAddProp(Result, 'card', Self.TNfeSefazCardToJsonValue(Source.card));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetPagToJson(Source: TNfeSefazDetPag): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDetPagToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetPagFromJsonValue(Source: TJSONValue): TNfeSefazDetPag;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDetPag.Create;
  try
    if Json.ObjContains(Source, 'indPag', JValue) then
      Result.indPag := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tPag', JValue) then
      Result.tPag := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xPag', JValue) then
      Result.xPag := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vPag', JValue) then
      Result.vPag := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dPag', JValue) then
      Result.dPag := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CNPJPag', JValue) then
      Result.CNPJPag := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFPag', JValue) then
      Result.UFPag := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'card', JValue) then
      Result.card := Self.TNfeSefazCardFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetPagFromJson(Source: string): TNfeSefazDetPag;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDetPagFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetPagListToJsonValue(Source: TNfeSefazDetPagList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazDetPagToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetPagListToJson(Source: TNfeSefazDetPagList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDetPagListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDetPagListFromJsonValue(Source: TJSONValue): TNfeSefazDetPagList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDetPagList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazDetPagFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDetPagListFromJson(Source: string): TNfeSefazDetPagList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDetPagListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPagToJsonValue(Source: TNfeSefazPag): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'detPag', Self.TNfeSefazDetPagListToJsonValue(Source.detPag));
    if Source.vTrocoHasValue then
      Json.ObjAddProp(Result, 'vTroco', Self.DoubleToJsonValue(Source.vTroco));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPagToJson(Source: TNfeSefazPag): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazPagToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazPagFromJsonValue(Source: TJSONValue): TNfeSefazPag;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazPag.Create;
  try
    if Json.ObjContains(Source, 'detPag', JValue) then
      Result.detPag := Self.TNfeSefazDetPagListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vTroco', JValue) then
      Result.vTroco := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazPagFromJson(Source: string): TNfeSefazPag;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazPagFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfIntermedToJsonValue(Source: TNfeSefazInfIntermed): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    Json.ObjAddProp(Result, 'idCadIntTran', Self.stringToJsonValue(Source.idCadIntTran));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfIntermedToJson(Source: TNfeSefazInfIntermed): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfIntermedToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfIntermedFromJsonValue(Source: TJSONValue): TNfeSefazInfIntermed;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfIntermed.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idCadIntTran', JValue) then
      Result.idCadIntTran := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfIntermedFromJson(Source: string): TNfeSefazInfIntermed;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfIntermedFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicObsContToJsonValue(Source: TNfeSefazInfAdicObsCont): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xCampoHasValue then
      Json.ObjAddProp(Result, 'xCampo', Self.stringToJsonValue(Source.xCampo));
    if Source.xTextoHasValue then
      Json.ObjAddProp(Result, 'xTexto', Self.stringToJsonValue(Source.xTexto));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicObsContToJson(Source: TNfeSefazInfAdicObsCont): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfAdicObsContToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicObsContFromJsonValue(Source: TJSONValue): TNfeSefazInfAdicObsCont;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfAdicObsCont.Create;
  try
    if Json.ObjContains(Source, 'xCampo', JValue) then
      Result.xCampo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xTexto', JValue) then
      Result.xTexto := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicObsContFromJson(Source: string): TNfeSefazInfAdicObsCont;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfAdicObsContFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicObsContListToJsonValue(Source: TNfeSefazInfAdicObsContList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazInfAdicObsContToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicObsContListToJson(Source: TNfeSefazInfAdicObsContList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfAdicObsContListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicObsContListFromJsonValue(Source: TJSONValue): TNfeSefazInfAdicObsContList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfAdicObsContList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazInfAdicObsContFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicObsContListFromJson(Source: string): TNfeSefazInfAdicObsContList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfAdicObsContListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicObsFiscoToJsonValue(Source: TNfeSefazInfAdicObsFisco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xCampoHasValue then
      Json.ObjAddProp(Result, 'xCampo', Self.stringToJsonValue(Source.xCampo));
    if Source.xTextoHasValue then
      Json.ObjAddProp(Result, 'xTexto', Self.stringToJsonValue(Source.xTexto));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicObsFiscoToJson(Source: TNfeSefazInfAdicObsFisco): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfAdicObsFiscoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicObsFiscoFromJsonValue(Source: TJSONValue): TNfeSefazInfAdicObsFisco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfAdicObsFisco.Create;
  try
    if Json.ObjContains(Source, 'xCampo', JValue) then
      Result.xCampo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xTexto', JValue) then
      Result.xTexto := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicObsFiscoFromJson(Source: string): TNfeSefazInfAdicObsFisco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfAdicObsFiscoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicObsFiscoListToJsonValue(Source: TNfeSefazInfAdicObsFiscoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazInfAdicObsFiscoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicObsFiscoListToJson(Source: TNfeSefazInfAdicObsFiscoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfAdicObsFiscoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicObsFiscoListFromJsonValue(Source: TJSONValue): TNfeSefazInfAdicObsFiscoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfAdicObsFiscoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazInfAdicObsFiscoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicObsFiscoListFromJson(Source: string): TNfeSefazInfAdicObsFiscoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfAdicObsFiscoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazProcRefToJsonValue(Source: TNfeSefazProcRef): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nProc', Self.stringToJsonValue(Source.nProc));
    Json.ObjAddProp(Result, 'indProc', Self.IntegerToJsonValue(Source.indProc));
    if Source.tpAtoHasValue then
      Json.ObjAddProp(Result, 'tpAto', Self.stringToJsonValue(Source.tpAto));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazProcRefToJson(Source: TNfeSefazProcRef): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazProcRefToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazProcRefFromJsonValue(Source: TJSONValue): TNfeSefazProcRef;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazProcRef.Create;
  try
    if Json.ObjContains(Source, 'nProc', JValue) then
      Result.nProc := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'indProc', JValue) then
      Result.indProc := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tpAto', JValue) then
      Result.tpAto := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazProcRefFromJson(Source: string): TNfeSefazProcRef;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazProcRefFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazProcRefListToJsonValue(Source: TNfeSefazProcRefList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazProcRefToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazProcRefListToJson(Source: TNfeSefazProcRefList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazProcRefListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazProcRefListFromJsonValue(Source: TJSONValue): TNfeSefazProcRefList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazProcRefList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazProcRefFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazProcRefListFromJson(Source: string): TNfeSefazProcRefList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazProcRefListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicToJsonValue(Source: TNfeSefazInfAdic): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.infAdFiscoHasValue then
      Json.ObjAddProp(Result, 'infAdFisco', Self.stringToJsonValue(Source.infAdFisco));
    if Source.infCplHasValue then
      Json.ObjAddProp(Result, 'infCpl', Self.stringToJsonValue(Source.infCpl));
    if Assigned(Source.obsCont) then
      Json.ObjAddProp(Result, 'obsCont', Self.TNfeSefazInfAdicObsContListToJsonValue(Source.obsCont));
    if Assigned(Source.obsFisco) then
      Json.ObjAddProp(Result, 'obsFisco', Self.TNfeSefazInfAdicObsFiscoListToJsonValue(Source.obsFisco));
    if Assigned(Source.procRef) then
      Json.ObjAddProp(Result, 'procRef', Self.TNfeSefazProcRefListToJsonValue(Source.procRef));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicToJson(Source: TNfeSefazInfAdic): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfAdicToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicFromJsonValue(Source: TJSONValue): TNfeSefazInfAdic;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfAdic.Create;
  try
    if Json.ObjContains(Source, 'infAdFisco', JValue) then
      Result.infAdFisco := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infCpl', JValue) then
      Result.infCpl := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'obsCont', JValue) then
      Result.obsCont := Self.TNfeSefazInfAdicObsContListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'obsFisco', JValue) then
      Result.obsFisco := Self.TNfeSefazInfAdicObsFiscoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'procRef', JValue) then
      Result.procRef := Self.TNfeSefazProcRefListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfAdicFromJson(Source: string): TNfeSefazInfAdic;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfAdicFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazExportaToJsonValue(Source: TNfeSefazExporta): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'UFSaidaPais', Self.stringToJsonValue(Source.UFSaidaPais));
    Json.ObjAddProp(Result, 'xLocExporta', Self.stringToJsonValue(Source.xLocExporta));
    if Source.xLocDespachoHasValue then
      Json.ObjAddProp(Result, 'xLocDespacho', Self.stringToJsonValue(Source.xLocDespacho));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazExportaToJson(Source: TNfeSefazExporta): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazExportaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazExportaFromJsonValue(Source: TJSONValue): TNfeSefazExporta;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazExporta.Create;
  try
    if Json.ObjContains(Source, 'UFSaidaPais', JValue) then
      Result.UFSaidaPais := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xLocExporta', JValue) then
      Result.xLocExporta := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xLocDespacho', JValue) then
      Result.xLocDespacho := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazExportaFromJson(Source: string): TNfeSefazExporta;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazExportaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCompraToJsonValue(Source: TNfeSefazCompra): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.xNEmpHasValue then
      Json.ObjAddProp(Result, 'xNEmp', Self.stringToJsonValue(Source.xNEmp));
    if Source.xPedHasValue then
      Json.ObjAddProp(Result, 'xPed', Self.stringToJsonValue(Source.xPed));
    if Source.xContHasValue then
      Json.ObjAddProp(Result, 'xCont', Self.stringToJsonValue(Source.xCont));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCompraToJson(Source: TNfeSefazCompra): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCompraToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCompraFromJsonValue(Source: TJSONValue): TNfeSefazCompra;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCompra.Create;
  try
    if Json.ObjContains(Source, 'xNEmp', JValue) then
      Result.xNEmp := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xPed', JValue) then
      Result.xPed := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xCont', JValue) then
      Result.xCont := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCompraFromJson(Source: string): TNfeSefazCompra;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCompraFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazForDiaToJsonValue(Source: TNfeSefazForDia): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'dia', Self.IntegerToJsonValue(Source.dia));
    Json.ObjAddProp(Result, 'qtde', Self.DoubleToJsonValue(Source.qtde));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazForDiaToJson(Source: TNfeSefazForDia): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazForDiaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazForDiaFromJsonValue(Source: TJSONValue): TNfeSefazForDia;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazForDia.Create;
  try
    if Json.ObjContains(Source, 'dia', JValue) then
      Result.dia := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qtde', JValue) then
      Result.qtde := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazForDiaFromJson(Source: string): TNfeSefazForDia;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazForDiaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazForDiaListToJsonValue(Source: TNfeSefazForDiaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazForDiaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazForDiaListToJson(Source: TNfeSefazForDiaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazForDiaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazForDiaListFromJsonValue(Source: TJSONValue): TNfeSefazForDiaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazForDiaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazForDiaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazForDiaListFromJson(Source: string): TNfeSefazForDiaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazForDiaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDeducToJsonValue(Source: TNfeSefazDeduc): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xDed', Self.stringToJsonValue(Source.xDed));
    Json.ObjAddProp(Result, 'vDed', Self.DoubleToJsonValue(Source.vDed));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDeducToJson(Source: TNfeSefazDeduc): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDeducToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDeducFromJsonValue(Source: TJSONValue): TNfeSefazDeduc;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDeduc.Create;
  try
    if Json.ObjContains(Source, 'xDed', JValue) then
      Result.xDed := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vDed', JValue) then
      Result.vDed := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDeducFromJson(Source: string): TNfeSefazDeduc;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDeducFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDeducListToJsonValue(Source: TNfeSefazDeducList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfeSefazDeducToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDeducListToJson(Source: TNfeSefazDeducList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDeducListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDeducListFromJsonValue(Source: TJSONValue): TNfeSefazDeducList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDeducList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfeSefazDeducFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDeducListFromJson(Source: string): TNfeSefazDeducList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDeducListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCanaToJsonValue(Source: TNfeSefazCana): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'safra', Self.stringToJsonValue(Source.safra));
    Json.ObjAddProp(Result, 'ref', Self.stringToJsonValue(Source.ref));
    Json.ObjAddProp(Result, 'forDia', Self.TNfeSefazForDiaListToJsonValue(Source.forDia));
    Json.ObjAddProp(Result, 'qTotMes', Self.DoubleToJsonValue(Source.qTotMes));
    Json.ObjAddProp(Result, 'qTotAnt', Self.DoubleToJsonValue(Source.qTotAnt));
    Json.ObjAddProp(Result, 'qTotGer', Self.DoubleToJsonValue(Source.qTotGer));
    if Assigned(Source.deduc) then
      Json.ObjAddProp(Result, 'deduc', Self.TNfeSefazDeducListToJsonValue(Source.deduc));
    Json.ObjAddProp(Result, 'vFor', Self.DoubleToJsonValue(Source.vFor));
    Json.ObjAddProp(Result, 'vTotDed', Self.DoubleToJsonValue(Source.vTotDed));
    Json.ObjAddProp(Result, 'vLiqFor', Self.DoubleToJsonValue(Source.vLiqFor));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCanaToJson(Source: TNfeSefazCana): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazCanaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazCanaFromJsonValue(Source: TJSONValue): TNfeSefazCana;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazCana.Create;
  try
    if Json.ObjContains(Source, 'safra', JValue) then
      Result.safra := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ref', JValue) then
      Result.ref := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'forDia', JValue) then
      Result.forDia := Self.TNfeSefazForDiaListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qTotMes', JValue) then
      Result.qTotMes := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qTotAnt', JValue) then
      Result.qTotAnt := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qTotGer', JValue) then
      Result.qTotGer := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'deduc', JValue) then
      Result.deduc := Self.TNfeSefazDeducListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vFor', JValue) then
      Result.vFor := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vTotDed', JValue) then
      Result.vTotDed := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'vLiqFor', JValue) then
      Result.vLiqFor := Self.DoubleFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazCanaFromJson(Source: string): TNfeSefazCana;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazCanaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfRespTecToJsonValue(Source: TNfeSefazInfRespTec): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'CNPJ', Self.stringToJsonValue(Source.CNPJ));
    Json.ObjAddProp(Result, 'xContato', Self.stringToJsonValue(Source.xContato));
    Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
    Json.ObjAddProp(Result, 'fone', Self.stringToJsonValue(Source.fone));
    if Source.idCSRTHasValue then
      Json.ObjAddProp(Result, 'idCSRT', Self.IntegerToJsonValue(Source.idCSRT));
    if Source.CSRTHasValue then
      Json.ObjAddProp(Result, 'CSRT', Self.stringToJsonValue(Source.CSRT));
    if Source.hashCSRTHasValue then
      Json.ObjAddProp(Result, 'hashCSRT', Self.stringToJsonValue(Source.hashCSRT));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfRespTecToJson(Source: TNfeSefazInfRespTec): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfRespTecToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfRespTecFromJsonValue(Source: TJSONValue): TNfeSefazInfRespTec;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfRespTec.Create;
  try
    if Json.ObjContains(Source, 'CNPJ', JValue) then
      Result.CNPJ := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'xContato', JValue) then
      Result.xContato := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'fone', JValue) then
      Result.fone := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'idCSRT', JValue) then
      Result.idCSRT := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CSRT', JValue) then
      Result.CSRT := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'hashCSRT', JValue) then
      Result.hashCSRT := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfRespTecFromJson(Source: string): TNfeSefazInfRespTec;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfRespTecFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfSolicNFFToJsonValue(Source: TNfeSefazInfSolicNFF): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'xSolic', Self.stringToJsonValue(Source.xSolic));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfSolicNFFToJson(Source: TNfeSefazInfSolicNFF): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfSolicNFFToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfSolicNFFFromJsonValue(Source: TJSONValue): TNfeSefazInfSolicNFF;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfSolicNFF.Create;
  try
    if Json.ObjContains(Source, 'xSolic', JValue) then
      Result.xSolic := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfSolicNFFFromJson(Source: string): TNfeSefazInfSolicNFF;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfSolicNFFFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDefensivoToJsonValue(Source: TNfeSefazDefensivo): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'nReceituario', Self.stringToJsonValue(Source.nReceituario));
    Json.ObjAddProp(Result, 'CPFRespTec', Self.stringToJsonValue(Source.CPFRespTec));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDefensivoToJson(Source: TNfeSefazDefensivo): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazDefensivoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazDefensivoFromJsonValue(Source: TJSONValue): TNfeSefazDefensivo;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazDefensivo.Create;
  try
    if Json.ObjContains(Source, 'nReceituario', JValue) then
      Result.nReceituario := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'CPFRespTec', JValue) then
      Result.CPFRespTec := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazDefensivoFromJson(Source: string): TNfeSefazDefensivo;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazDefensivoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazGuiaTransitoToJsonValue(Source: TNfeSefazGuiaTransito): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'tpGuia', Self.IntegerToJsonValue(Source.tpGuia));
    if Source.UFGuiaHasValue then
      Json.ObjAddProp(Result, 'UFGuia', Self.stringToJsonValue(Source.UFGuia));
    if Source.serieGuiaHasValue then
      Json.ObjAddProp(Result, 'serieGuia', Self.stringToJsonValue(Source.serieGuia));
    Json.ObjAddProp(Result, 'nGuia', Self.stringToJsonValue(Source.nGuia));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazGuiaTransitoToJson(Source: TNfeSefazGuiaTransito): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazGuiaTransitoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazGuiaTransitoFromJsonValue(Source: TJSONValue): TNfeSefazGuiaTransito;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazGuiaTransito.Create;
  try
    if Json.ObjContains(Source, 'tpGuia', JValue) then
      Result.tpGuia := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'UFGuia', JValue) then
      Result.UFGuia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serieGuia', JValue) then
      Result.serieGuia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nGuia', JValue) then
      Result.nGuia := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazGuiaTransitoFromJson(Source: string): TNfeSefazGuiaTransito;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazGuiaTransitoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAgropecuarioToJsonValue(Source: TNfeSefazAgropecuario): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.defensivo) then
      Json.ObjAddProp(Result, 'defensivo', Self.TNfeSefazDefensivoToJsonValue(Source.defensivo));
    if Assigned(Source.guiaTransito) then
      Json.ObjAddProp(Result, 'guiaTransito', Self.TNfeSefazGuiaTransitoToJsonValue(Source.guiaTransito));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAgropecuarioToJson(Source: TNfeSefazAgropecuario): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazAgropecuarioToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazAgropecuarioFromJsonValue(Source: TJSONValue): TNfeSefazAgropecuario;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazAgropecuario.Create;
  try
    if Json.ObjContains(Source, 'defensivo', JValue) then
      Result.defensivo := Self.TNfeSefazDefensivoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'guiaTransito', JValue) then
      Result.guiaTransito := Self.TNfeSefazGuiaTransitoFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazAgropecuarioFromJson(Source: string): TNfeSefazAgropecuario;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazAgropecuarioFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfNFeToJsonValue(Source: TNfeSefazInfNFe): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'versao', Self.stringToJsonValue(Source.versao));
    if Source.IdHasValue then
      Json.ObjAddProp(Result, 'Id', Self.stringToJsonValue(Source.Id));
    Json.ObjAddProp(Result, 'ide', Self.TNfeSefazIdeToJsonValue(Source.ide));
    Json.ObjAddProp(Result, 'emit', Self.TNfeSefazEmitToJsonValue(Source.emit));
    if Assigned(Source.avulsa) then
      Json.ObjAddProp(Result, 'avulsa', Self.TNfeSefazAvulsaToJsonValue(Source.avulsa));
    if Assigned(Source.dest) then
      Json.ObjAddProp(Result, 'dest', Self.TNfeSefazDestToJsonValue(Source.dest));
    if Assigned(Source.retirada) then
      Json.ObjAddProp(Result, 'retirada', Self.TNfeSefazLocalToJsonValue(Source.retirada));
    if Assigned(Source.entrega) then
      Json.ObjAddProp(Result, 'entrega', Self.TNfeSefazLocalToJsonValue(Source.entrega));
    if Assigned(Source.autXML) then
      Json.ObjAddProp(Result, 'autXML', Self.TNfeSefazAutXMLListToJsonValue(Source.autXML));
    Json.ObjAddProp(Result, 'det', Self.TNfeSefazDetListToJsonValue(Source.det));
    Json.ObjAddProp(Result, 'total', Self.TNfeSefazTotalToJsonValue(Source.total));
    Json.ObjAddProp(Result, 'transp', Self.TNfeSefazTranspToJsonValue(Source.transp));
    if Assigned(Source.cobr) then
      Json.ObjAddProp(Result, 'cobr', Self.TNfeSefazCobrToJsonValue(Source.cobr));
    Json.ObjAddProp(Result, 'pag', Self.TNfeSefazPagToJsonValue(Source.pag));
    if Assigned(Source.infIntermed) then
      Json.ObjAddProp(Result, 'infIntermed', Self.TNfeSefazInfIntermedToJsonValue(Source.infIntermed));
    if Assigned(Source.infAdic) then
      Json.ObjAddProp(Result, 'infAdic', Self.TNfeSefazInfAdicToJsonValue(Source.infAdic));
    if Assigned(Source.exporta) then
      Json.ObjAddProp(Result, 'exporta', Self.TNfeSefazExportaToJsonValue(Source.exporta));
    if Assigned(Source.compra) then
      Json.ObjAddProp(Result, 'compra', Self.TNfeSefazCompraToJsonValue(Source.compra));
    if Assigned(Source.cana) then
      Json.ObjAddProp(Result, 'cana', Self.TNfeSefazCanaToJsonValue(Source.cana));
    if Assigned(Source.infRespTec) then
      Json.ObjAddProp(Result, 'infRespTec', Self.TNfeSefazInfRespTecToJsonValue(Source.infRespTec));
    if Assigned(Source.infSolicNFF) then
      Json.ObjAddProp(Result, 'infSolicNFF', Self.TNfeSefazInfSolicNFFToJsonValue(Source.infSolicNFF));
    if Assigned(Source.agropecuario) then
      Json.ObjAddProp(Result, 'agropecuario', Self.TNfeSefazAgropecuarioToJsonValue(Source.agropecuario));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfNFeToJson(Source: TNfeSefazInfNFe): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfNFeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfNFeFromJsonValue(Source: TJSONValue): TNfeSefazInfNFe;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfNFe.Create;
  try
    if Json.ObjContains(Source, 'versao', JValue) then
      Result.versao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'Id', JValue) then
      Result.Id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ide', JValue) then
      Result.ide := Self.TNfeSefazIdeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'emit', JValue) then
      Result.emit := Self.TNfeSefazEmitFromJsonValue(JValue);
    if Json.ObjContains(Source, 'avulsa', JValue) then
      Result.avulsa := Self.TNfeSefazAvulsaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'dest', JValue) then
      Result.dest := Self.TNfeSefazDestFromJsonValue(JValue);
    if Json.ObjContains(Source, 'retirada', JValue) then
      Result.retirada := Self.TNfeSefazLocalFromJsonValue(JValue);
    if Json.ObjContains(Source, 'entrega', JValue) then
      Result.entrega := Self.TNfeSefazLocalFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autXML', JValue) then
      Result.autXML := Self.TNfeSefazAutXMLListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'det', JValue) then
      Result.det := Self.TNfeSefazDetListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'total', JValue) then
      Result.total := Self.TNfeSefazTotalFromJsonValue(JValue);
    if Json.ObjContains(Source, 'transp', JValue) then
      Result.transp := Self.TNfeSefazTranspFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cobr', JValue) then
      Result.cobr := Self.TNfeSefazCobrFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pag', JValue) then
      Result.pag := Self.TNfeSefazPagFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infIntermed', JValue) then
      Result.infIntermed := Self.TNfeSefazInfIntermedFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infAdic', JValue) then
      Result.infAdic := Self.TNfeSefazInfAdicFromJsonValue(JValue);
    if Json.ObjContains(Source, 'exporta', JValue) then
      Result.exporta := Self.TNfeSefazExportaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'compra', JValue) then
      Result.compra := Self.TNfeSefazCompraFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cana', JValue) then
      Result.cana := Self.TNfeSefazCanaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infRespTec', JValue) then
      Result.infRespTec := Self.TNfeSefazInfRespTecFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infSolicNFF', JValue) then
      Result.infSolicNFF := Self.TNfeSefazInfSolicNFFFromJsonValue(JValue);
    if Json.ObjContains(Source, 'agropecuario', JValue) then
      Result.agropecuario := Self.TNfeSefazAgropecuarioFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfNFeFromJson(Source: string): TNfeSefazInfNFe;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfNFeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfNFeSuplToJsonValue(Source: TNfeSefazInfNFeSupl): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.qrCodeHasValue then
      Json.ObjAddProp(Result, 'qrCode', Self.stringToJsonValue(Source.qrCode));
    if Source.urlChaveHasValue then
      Json.ObjAddProp(Result, 'urlChave', Self.stringToJsonValue(Source.urlChave));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfNFeSuplToJson(Source: TNfeSefazInfNFeSupl): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfeSefazInfNFeSuplToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfeSefazInfNFeSuplFromJsonValue(Source: TJSONValue): TNfeSefazInfNFeSupl;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfeSefazInfNFeSupl.Create;
  try
    if Json.ObjContains(Source, 'qrCode', JValue) then
      Result.qrCode := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'urlChave', JValue) then
      Result.urlChave := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfeSefazInfNFeSuplFromJson(Source: string): TNfeSefazInfNFeSupl;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfeSefazInfNFeSuplFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoToJsonValue(Source: TNfePedidoEmissao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'infNFe', Self.TNfeSefazInfNFeToJsonValue(Source.infNFe));
    if Assigned(Source.infNFeSupl) then
      Json.ObjAddProp(Result, 'infNFeSupl', Self.TNfeSefazInfNFeSuplToJsonValue(Source.infNFeSupl));
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.referenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.referencia));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoToJson(Source: TNfePedidoEmissao): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfePedidoEmissaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoFromJsonValue(Source: TJSONValue): TNfePedidoEmissao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfePedidoEmissao.Create;
  try
    if Json.ObjContains(Source, 'infNFe', JValue) then
      Result.infNFe := Self.TNfeSefazInfNFeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'infNFeSupl', JValue) then
      Result.infNFeSupl := Self.TNfeSefazInfNFeSuplFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.referencia := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoFromJson(Source: string): TNfePedidoEmissao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfePedidoEmissaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoListToJsonValue(Source: TNfePedidoEmissaoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TNfePedidoEmissaoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoListToJson(Source: TNfePedidoEmissaoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfePedidoEmissaoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoListFromJsonValue(Source: TJSONValue): TNfePedidoEmissaoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfePedidoEmissaoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TNfePedidoEmissaoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoListFromJson(Source: string): TNfePedidoEmissaoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfePedidoEmissaoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoLoteToJsonValue(Source: TNfePedidoEmissaoLote): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'documentos', Self.TNfePedidoEmissaoListToJsonValue(Source.documentos));
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.referenciaHasValue then
      Json.ObjAddProp(Result, 'referencia', Self.stringToJsonValue(Source.referencia));
    Json.ObjAddProp(Result, 'id_lote', Self.stringToJsonValue(Source.id_lote));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoLoteToJson(Source: TNfePedidoEmissaoLote): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfePedidoEmissaoLoteToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoLoteFromJsonValue(Source: TJSONValue): TNfePedidoEmissaoLote;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfePedidoEmissaoLote.Create;
  try
    if Json.ObjContains(Source, 'documentos', JValue) then
      Result.documentos := Self.TNfePedidoEmissaoListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'referencia', JValue) then
      Result.referencia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id_lote', JValue) then
      Result.id_lote := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoEmissaoLoteFromJson(Source: string): TNfePedidoEmissaoLote;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfePedidoEmissaoLoteFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEnderecoEmailToJsonValue(Source: TEnderecoEmail): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEnderecoEmailToJson(Source: TEnderecoEmail): string;
var
  JValue: TJSONValue;
begin
  JValue := TEnderecoEmailToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEnderecoEmailFromJsonValue(Source: TJSONValue): TEnderecoEmail;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEnderecoEmail.Create;
  try
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEnderecoEmailFromJson(Source: string): TEnderecoEmail;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEnderecoEmailFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEnderecoEmailListToJsonValue(Source: TEnderecoEmailList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TEnderecoEmailToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEnderecoEmailListToJson(Source: TEnderecoEmailList): string;
var
  JValue: TJSONValue;
begin
  JValue := TEnderecoEmailListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEnderecoEmailListFromJsonValue(Source: TJSONValue): TEnderecoEmailList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEnderecoEmailList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TEnderecoEmailFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEnderecoEmailListFromJson(Source: string): TEnderecoEmailList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEnderecoEmailListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfePedidoEnvioEmailToJsonValue(Source: TDfePedidoEnvioEmail): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.destinatarios) then
      Json.ObjAddProp(Result, 'destinatarios', Self.TEnderecoEmailListToJsonValue(Source.destinatarios));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfePedidoEnvioEmailToJson(Source: TDfePedidoEnvioEmail): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfePedidoEnvioEmailToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfePedidoEnvioEmailFromJsonValue(Source: TJSONValue): TDfePedidoEnvioEmail;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfePedidoEnvioEmail.Create;
  try
    if Json.ObjContains(Source, 'destinatarios', JValue) then
      Result.destinatarios := Self.TEnderecoEmailListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfePedidoEnvioEmailFromJson(Source: string): TDfePedidoEnvioEmail;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfePedidoEnvioEmailFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmailStatusResponseToJsonValue(Source: TEmailStatusResponse): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Source.status_messageHasValue then
      Json.ObjAddProp(Result, 'status_message', Self.stringToJsonValue(Source.status_message));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmailStatusResponseToJson(Source: TEmailStatusResponse): string;
var
  JValue: TJSONValue;
begin
  JValue := TEmailStatusResponseToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TEmailStatusResponseFromJsonValue(Source: TJSONValue): TEmailStatusResponse;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TEmailStatusResponse.Create;
  try
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status_message', JValue) then
      Result.status_message := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TEmailStatusResponseFromJson(Source: string): TEmailStatusResponse;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TEmailStatusResponseFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoCancelamentoToJsonValue(Source: TNfePedidoCancelamento): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.justificativaHasValue then
      Json.ObjAddProp(Result, 'justificativa', Self.stringToJsonValue(Source.justificativa));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoCancelamentoToJson(Source: TNfePedidoCancelamento): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfePedidoCancelamentoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoCancelamentoFromJsonValue(Source: TJSONValue): TNfePedidoCancelamento;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfePedidoCancelamento.Create;
  try
    if Json.ObjContains(Source, 'justificativa', JValue) then
      Result.justificativa := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoCancelamentoFromJson(Source: string): TNfePedidoCancelamento;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfePedidoCancelamentoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoCartaCorrecaoToJsonValue(Source: TNfePedidoCartaCorrecao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.correcaoHasValue then
      Json.ObjAddProp(Result, 'correcao', Self.stringToJsonValue(Source.correcao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoCartaCorrecaoToJson(Source: TNfePedidoCartaCorrecao): string;
var
  JValue: TJSONValue;
begin
  JValue := TNfePedidoCartaCorrecaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TNfePedidoCartaCorrecaoFromJsonValue(Source: TJSONValue): TNfePedidoCartaCorrecao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TNfePedidoCartaCorrecao.Create;
  try
    if Json.ObjContains(Source, 'correcao', JValue) then
      Result.correcao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TNfePedidoCartaCorrecaoFromJson(Source: string): TNfePedidoCartaCorrecao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TNfePedidoCartaCorrecaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeCartaCorrecaoToJsonValue(Source: TDfeCartaCorrecao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.correcaoHasValue then
      Json.ObjAddProp(Result, 'correcao', Self.stringToJsonValue(Source.correcao));
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.ambienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Assigned(Source.autor) then
      Json.ObjAddProp(Result, 'autor', Self.TDfeAutorEventoToJsonValue(Source.autor));
    if Source.chave_acessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.chave_acesso));
    if Source.data_eventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.data_evento));
    if Source.numero_sequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.numero_sequencial));
    if Source.data_recebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.data_recebimento));
    if Source.codigo_statusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.codigo_status));
    if Source.motivo_statusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.motivo_status));
    if Source.numero_protocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.numero_protocolo));
    if Source.codigo_mensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.codigo_mensagem));
    if Source.mensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.mensagem));
    if Source.tipo_eventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.tipo_evento));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeCartaCorrecaoToJson(Source: TDfeCartaCorrecao): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeCartaCorrecaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeCartaCorrecaoFromJsonValue(Source: TJSONValue): TDfeCartaCorrecao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeCartaCorrecao.Create;
  try
    if Json.ObjContains(Source, 'correcao', JValue) then
      Result.correcao := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autor', JValue) then
      Result.autor := Self.TDfeAutorEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.chave_acesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.data_evento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.numero_sequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.data_recebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.codigo_status := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.motivo_status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.numero_protocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.codigo_mensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.mensagem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.tipo_evento := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeCartaCorrecaoFromJson(Source: string): TDfeCartaCorrecao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeCartaCorrecaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfePedidoInutilizacaoToJsonValue(Source: TDfePedidoInutilizacao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    Json.ObjAddProp(Result, 'cnpj', Self.stringToJsonValue(Source.cnpj));
    Json.ObjAddProp(Result, 'ano', Self.IntegerToJsonValue(Source.ano));
    Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.serie));
    Json.ObjAddProp(Result, 'numero_inicial', Self.IntegerToJsonValue(Source.numero_inicial));
    Json.ObjAddProp(Result, 'numero_final', Self.IntegerToJsonValue(Source.numero_final));
    Json.ObjAddProp(Result, 'justificativa', Self.stringToJsonValue(Source.justificativa));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfePedidoInutilizacaoToJson(Source: TDfePedidoInutilizacao): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfePedidoInutilizacaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfePedidoInutilizacaoFromJsonValue(Source: TJSONValue): TDfePedidoInutilizacao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfePedidoInutilizacao.Create;
  try
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cnpj', JValue) then
      Result.cnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ano', JValue) then
      Result.ano := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_inicial', JValue) then
      Result.numero_inicial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_final', JValue) then
      Result.numero_final := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'justificativa', JValue) then
      Result.justificativa := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfePedidoInutilizacaoFromJson(Source: string): TDfePedidoInutilizacao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfePedidoInutilizacaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeInutilizacaoToJsonValue(Source: TDfeInutilizacao): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.cnpjHasValue then
      Json.ObjAddProp(Result, 'cnpj', Self.stringToJsonValue(Source.cnpj));
    if Source.anoHasValue then
      Json.ObjAddProp(Result, 'ano', Self.IntegerToJsonValue(Source.ano));
    if Source.modeloHasValue then
      Json.ObjAddProp(Result, 'modelo', Self.IntegerToJsonValue(Source.modelo));
    if Source.serieHasValue then
      Json.ObjAddProp(Result, 'serie', Self.IntegerToJsonValue(Source.serie));
    if Source.numero_inicialHasValue then
      Json.ObjAddProp(Result, 'numero_inicial', Self.IntegerToJsonValue(Source.numero_inicial));
    if Source.numero_finalHasValue then
      Json.ObjAddProp(Result, 'numero_final', Self.IntegerToJsonValue(Source.numero_final));
    if Source.justificativaHasValue then
      Json.ObjAddProp(Result, 'justificativa', Self.stringToJsonValue(Source.justificativa));
    if Source.idHasValue then
      Json.ObjAddProp(Result, 'id', Self.stringToJsonValue(Source.id));
    if Source.ambienteHasValue then
      Json.ObjAddProp(Result, 'ambiente', Self.stringToJsonValue(Source.ambiente));
    if Source.statusHasValue then
      Json.ObjAddProp(Result, 'status', Self.stringToJsonValue(Source.status));
    if Assigned(Source.autor) then
      Json.ObjAddProp(Result, 'autor', Self.TDfeAutorEventoToJsonValue(Source.autor));
    if Source.chave_acessoHasValue then
      Json.ObjAddProp(Result, 'chave_acesso', Self.stringToJsonValue(Source.chave_acesso));
    if Source.data_eventoHasValue then
      Json.ObjAddProp(Result, 'data_evento', Self.TDateTimeToJsonValue(Source.data_evento));
    if Source.numero_sequencialHasValue then
      Json.ObjAddProp(Result, 'numero_sequencial', Self.IntegerToJsonValue(Source.numero_sequencial));
    if Source.data_recebimentoHasValue then
      Json.ObjAddProp(Result, 'data_recebimento', Self.TDateTimeToJsonValue(Source.data_recebimento));
    if Source.codigo_statusHasValue then
      Json.ObjAddProp(Result, 'codigo_status', Self.IntegerToJsonValue(Source.codigo_status));
    if Source.motivo_statusHasValue then
      Json.ObjAddProp(Result, 'motivo_status', Self.stringToJsonValue(Source.motivo_status));
    if Source.numero_protocoloHasValue then
      Json.ObjAddProp(Result, 'numero_protocolo', Self.stringToJsonValue(Source.numero_protocolo));
    if Source.codigo_mensagemHasValue then
      Json.ObjAddProp(Result, 'codigo_mensagem', Self.IntegerToJsonValue(Source.codigo_mensagem));
    if Source.mensagemHasValue then
      Json.ObjAddProp(Result, 'mensagem', Self.stringToJsonValue(Source.mensagem));
    if Source.tipo_eventoHasValue then
      Json.ObjAddProp(Result, 'tipo_evento', Self.stringToJsonValue(Source.tipo_evento));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeInutilizacaoToJson(Source: TDfeInutilizacao): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeInutilizacaoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeInutilizacaoFromJsonValue(Source: TJSONValue): TDfeInutilizacao;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeInutilizacao.Create;
  try
    if Json.ObjContains(Source, 'cnpj', JValue) then
      Result.cnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ano', JValue) then
      Result.ano := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'modelo', JValue) then
      Result.modelo := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'serie', JValue) then
      Result.serie := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_inicial', JValue) then
      Result.numero_inicial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_final', JValue) then
      Result.numero_final := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'justificativa', JValue) then
      Result.justificativa := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'id', JValue) then
      Result.id := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ambiente', JValue) then
      Result.ambiente := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'status', JValue) then
      Result.status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'autor', JValue) then
      Result.autor := Self.TDfeAutorEventoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'chave_acesso', JValue) then
      Result.chave_acesso := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_evento', JValue) then
      Result.data_evento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_sequencial', JValue) then
      Result.numero_sequencial := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_recebimento', JValue) then
      Result.data_recebimento := Self.TDateTimeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_status', JValue) then
      Result.codigo_status := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_status', JValue) then
      Result.motivo_status := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero_protocolo', JValue) then
      Result.numero_protocolo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_mensagem', JValue) then
      Result.codigo_mensagem := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'mensagem', JValue) then
      Result.mensagem := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_evento', JValue) then
      Result.tipo_evento := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeInutilizacaoFromJson(Source: string): TDfeInutilizacao;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeInutilizacaoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeEventoListToJsonValue(Source: TDfeEventoList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TDfeEventoToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeEventoListToJson(Source: TDfeEventoList): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeEventoListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeEventoListFromJsonValue(Source: TJSONValue): TDfeEventoList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeEventoList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TDfeEventoFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeEventoListFromJson(Source: string): TDfeEventoList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeEventoListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeEventoListagemToJsonValue(Source: TDfeEventoListagem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source._countHasValue then
      Json.ObjAddProp(Result, '@count', Self.IntegerToJsonValue(Source._count));
    if Assigned(Source.data) then
      Json.ObjAddProp(Result, 'data', Self.TDfeEventoListToJsonValue(Source.data));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeEventoListagemToJson(Source: TDfeEventoListagem): string;
var
  JValue: TJSONValue;
begin
  JValue := TDfeEventoListagemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TDfeEventoListagemFromJsonValue(Source: TJSONValue): TDfeEventoListagem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TDfeEventoListagem.Create;
  try
    if Json.ObjContains(Source, '@count', JValue) then
      Result._count := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data', JValue) then
      Result.data := Self.TDfeEventoListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TDfeEventoListagemFromJson(Source: string): TDfeEventoListagem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TDfeEventoListagemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjNaturezaJuridicaToJsonValue(Source: TCnpjNaturezaJuridica): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.codigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.codigo));
    if Source.descricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjNaturezaJuridicaToJson(Source: TCnpjNaturezaJuridica): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjNaturezaJuridicaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjNaturezaJuridicaFromJsonValue(Source: TJSONValue): TCnpjNaturezaJuridica;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjNaturezaJuridica.Create;
  try
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjNaturezaJuridicaFromJson(Source: string): TCnpjNaturezaJuridica;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjNaturezaJuridicaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjPorteEmpresaToJsonValue(Source: TCnpjPorteEmpresa): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.codigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.codigo));
    if Source.descricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjPorteEmpresaToJson(Source: TCnpjPorteEmpresa): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjPorteEmpresaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjPorteEmpresaFromJsonValue(Source: TJSONValue): TCnpjPorteEmpresa;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjPorteEmpresa.Create;
  try
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjPorteEmpresaFromJson(Source: string): TCnpjPorteEmpresa;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjPorteEmpresaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjSituacaoCadastralToJsonValue(Source: TCnpjSituacaoCadastral): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.dataHasValue then
      Json.ObjAddProp(Result, 'data', Self.TDateToJsonValue(Source.data));
    if Source.codigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.codigo));
    if Source.descricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjSituacaoCadastralToJson(Source: TCnpjSituacaoCadastral): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjSituacaoCadastralToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjSituacaoCadastralFromJsonValue(Source: TJSONValue): TCnpjSituacaoCadastral;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjSituacaoCadastral.Create;
  try
    if Json.ObjContains(Source, 'data', JValue) then
      Result.data := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjSituacaoCadastralFromJson(Source: string): TCnpjSituacaoCadastral;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjSituacaoCadastralFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjMotivoSituacaoCadastralToJsonValue(Source: TCnpjMotivoSituacaoCadastral): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.dataHasValue then
      Json.ObjAddProp(Result, 'data', Self.TDateToJsonValue(Source.data));
    if Source.codigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.codigo));
    if Source.descricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjMotivoSituacaoCadastralToJson(Source: TCnpjMotivoSituacaoCadastral): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjMotivoSituacaoCadastralToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjMotivoSituacaoCadastralFromJsonValue(Source: TJSONValue): TCnpjMotivoSituacaoCadastral;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjMotivoSituacaoCadastral.Create;
  try
    if Json.ObjContains(Source, 'data', JValue) then
      Result.data := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjMotivoSituacaoCadastralFromJson(Source: string): TCnpjMotivoSituacaoCadastral;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjMotivoSituacaoCadastralFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjPaisToJsonValue(Source: TCnpjPais): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.codigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.codigo));
    if Source.descricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjPaisToJson(Source: TCnpjPais): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjPaisToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjPaisFromJsonValue(Source: TJSONValue): TCnpjPais;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjPais.Create;
  try
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjPaisFromJson(Source: string): TCnpjPais;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjPaisFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjCnaeToJsonValue(Source: TCnpjCnae): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.codigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.codigo));
    if Source.descricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjCnaeToJson(Source: TCnpjCnae): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjCnaeToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjCnaeFromJsonValue(Source: TJSONValue): TCnpjCnae;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjCnae.Create;
  try
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjCnaeFromJson(Source: string): TCnpjCnae;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjCnaeFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjCnaeSecundarioToJsonValue(Source: TCnpjCnaeSecundario): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.codigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.codigo));
    if Source.descricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjCnaeSecundarioToJson(Source: TCnpjCnaeSecundario): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjCnaeSecundarioToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjCnaeSecundarioFromJsonValue(Source: TJSONValue): TCnpjCnaeSecundario;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjCnaeSecundario.Create;
  try
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjCnaeSecundarioFromJson(Source: string): TCnpjCnaeSecundario;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjCnaeSecundarioFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjCnaeSecundarioListToJsonValue(Source: TCnpjCnaeSecundarioList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCnpjCnaeSecundarioToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjCnaeSecundarioListToJson(Source: TCnpjCnaeSecundarioList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjCnaeSecundarioListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjCnaeSecundarioListFromJsonValue(Source: TJSONValue): TCnpjCnaeSecundarioList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjCnaeSecundarioList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCnpjCnaeSecundarioFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjCnaeSecundarioListFromJson(Source: string): TCnpjCnaeSecundarioList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjCnaeSecundarioListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjMunicipioToJsonValue(Source: TCnpjMunicipio): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.codigo_tomHasValue then
      Json.ObjAddProp(Result, 'codigo_tom', Self.stringToJsonValue(Source.codigo_tom));
    if Source.codigo_ibgeHasValue then
      Json.ObjAddProp(Result, 'codigo_ibge', Self.stringToJsonValue(Source.codigo_ibge));
    if Source.descricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjMunicipioToJson(Source: TCnpjMunicipio): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjMunicipioToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjMunicipioFromJsonValue(Source: TJSONValue): TCnpjMunicipio;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjMunicipio.Create;
  try
    if Json.ObjContains(Source, 'codigo_tom', JValue) then
      Result.codigo_tom := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_ibge', JValue) then
      Result.codigo_ibge := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjMunicipioFromJson(Source: string): TCnpjMunicipio;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjMunicipioFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjEnderecoToJsonValue(Source: TCnpjEndereco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.tipo_logradouroHasValue then
      Json.ObjAddProp(Result, 'tipo_logradouro', Self.stringToJsonValue(Source.tipo_logradouro));
    if Source.logradouroHasValue then
      Json.ObjAddProp(Result, 'logradouro', Self.stringToJsonValue(Source.logradouro));
    if Source.numeroHasValue then
      Json.ObjAddProp(Result, 'numero', Self.stringToJsonValue(Source.numero));
    if Source.complementoHasValue then
      Json.ObjAddProp(Result, 'complemento', Self.stringToJsonValue(Source.complemento));
    if Source.bairroHasValue then
      Json.ObjAddProp(Result, 'bairro', Self.stringToJsonValue(Source.bairro));
    if Source.cepHasValue then
      Json.ObjAddProp(Result, 'cep', Self.stringToJsonValue(Source.cep));
    if Source.ufHasValue then
      Json.ObjAddProp(Result, 'uf', Self.stringToJsonValue(Source.uf));
    if Assigned(Source.municipio) then
      Json.ObjAddProp(Result, 'municipio', Self.TCnpjMunicipioToJsonValue(Source.municipio));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjEnderecoToJson(Source: TCnpjEndereco): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjEnderecoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjEnderecoFromJsonValue(Source: TJSONValue): TCnpjEndereco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjEndereco.Create;
  try
    if Json.ObjContains(Source, 'tipo_logradouro', JValue) then
      Result.tipo_logradouro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'logradouro', JValue) then
      Result.logradouro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.numero := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'complemento', JValue) then
      Result.complemento := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'bairro', JValue) then
      Result.bairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cep', JValue) then
      Result.cep := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uf', JValue) then
      Result.uf := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'municipio', JValue) then
      Result.municipio := Self.TCnpjMunicipioFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjEnderecoFromJson(Source: string): TCnpjEndereco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjEnderecoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjTelefoneToJsonValue(Source: TCnpjTelefone): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.dddHasValue then
      Json.ObjAddProp(Result, 'ddd', Self.stringToJsonValue(Source.ddd));
    if Source.numeroHasValue then
      Json.ObjAddProp(Result, 'numero', Self.stringToJsonValue(Source.numero));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjTelefoneToJson(Source: TCnpjTelefone): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjTelefoneToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjTelefoneFromJsonValue(Source: TJSONValue): TCnpjTelefone;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjTelefone.Create;
  try
    if Json.ObjContains(Source, 'ddd', JValue) then
      Result.ddd := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'numero', JValue) then
      Result.numero := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjTelefoneFromJson(Source: string): TCnpjTelefone;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjTelefoneFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjTelefoneListToJsonValue(Source: TCnpjTelefoneList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCnpjTelefoneToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjTelefoneListToJson(Source: TCnpjTelefoneList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjTelefoneListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjTelefoneListFromJsonValue(Source: TJSONValue): TCnpjTelefoneList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjTelefoneList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCnpjTelefoneFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjTelefoneListFromJson(Source: string): TCnpjTelefoneList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjTelefoneListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjSituacaoEspecialToJsonValue(Source: TCnpjSituacaoEspecial): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.dataHasValue then
      Json.ObjAddProp(Result, 'data', Self.TDateToJsonValue(Source.data));
    if Source.codigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.codigo));
    if Source.descricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjSituacaoEspecialToJson(Source: TCnpjSituacaoEspecial): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjSituacaoEspecialToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjSituacaoEspecialFromJsonValue(Source: TJSONValue): TCnpjSituacaoEspecial;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjSituacaoEspecial.Create;
  try
    if Json.ObjContains(Source, 'data', JValue) then
      Result.data := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjSituacaoEspecialFromJson(Source: string): TCnpjSituacaoEspecial;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjSituacaoEspecialFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjOpcaoSimplesToJsonValue(Source: TCnpjOpcaoSimples): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.optanteHasValue then
      Json.ObjAddProp(Result, 'optante', Self.BooleanToJsonValue(Source.optante));
    if Source.data_opcaoHasValue then
      Json.ObjAddProp(Result, 'data_opcao', Self.TDateToJsonValue(Source.data_opcao));
    if Source.data_exclusaoHasValue then
      Json.ObjAddProp(Result, 'data_exclusao', Self.TDateToJsonValue(Source.data_exclusao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjOpcaoSimplesToJson(Source: TCnpjOpcaoSimples): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjOpcaoSimplesToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjOpcaoSimplesFromJsonValue(Source: TJSONValue): TCnpjOpcaoSimples;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjOpcaoSimples.Create;
  try
    if Json.ObjContains(Source, 'optante', JValue) then
      Result.optante := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_opcao', JValue) then
      Result.data_opcao := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_exclusao', JValue) then
      Result.data_exclusao := Self.TDateFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjOpcaoSimplesFromJson(Source: string): TCnpjOpcaoSimples;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjOpcaoSimplesFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjOpcaoSimeiToJsonValue(Source: TCnpjOpcaoSimei): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.optanteHasValue then
      Json.ObjAddProp(Result, 'optante', Self.BooleanToJsonValue(Source.optante));
    if Source.data_opcaoHasValue then
      Json.ObjAddProp(Result, 'data_opcao', Self.TDateToJsonValue(Source.data_opcao));
    if Source.data_exclusaoHasValue then
      Json.ObjAddProp(Result, 'data_exclusao', Self.TDateToJsonValue(Source.data_exclusao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjOpcaoSimeiToJson(Source: TCnpjOpcaoSimei): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjOpcaoSimeiToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjOpcaoSimeiFromJsonValue(Source: TJSONValue): TCnpjOpcaoSimei;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjOpcaoSimei.Create;
  try
    if Json.ObjContains(Source, 'optante', JValue) then
      Result.optante := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_opcao', JValue) then
      Result.data_opcao := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_exclusao', JValue) then
      Result.data_exclusao := Self.TDateFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjOpcaoSimeiFromJson(Source: string): TCnpjOpcaoSimei;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjOpcaoSimeiFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjIdentificadorSocioToJsonValue(Source: TCnpjIdentificadorSocio): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.codigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.codigo));
    if Source.descricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjIdentificadorSocioToJson(Source: TCnpjIdentificadorSocio): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjIdentificadorSocioToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjIdentificadorSocioFromJsonValue(Source: TJSONValue): TCnpjIdentificadorSocio;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjIdentificadorSocio.Create;
  try
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjIdentificadorSocioFromJson(Source: string): TCnpjIdentificadorSocio;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjIdentificadorSocioFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjQualificacaoSocioToJsonValue(Source: TCnpjQualificacaoSocio): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.codigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.codigo));
    if Source.descricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjQualificacaoSocioToJson(Source: TCnpjQualificacaoSocio): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjQualificacaoSocioToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjQualificacaoSocioFromJsonValue(Source: TJSONValue): TCnpjQualificacaoSocio;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjQualificacaoSocio.Create;
  try
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjQualificacaoSocioFromJson(Source: string): TCnpjQualificacaoSocio;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjQualificacaoSocioFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjRepresentanteLegalToJsonValue(Source: TCnpjRepresentanteLegal): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.cpfHasValue then
      Json.ObjAddProp(Result, 'cpf', Self.stringToJsonValue(Source.cpf));
    if Source.nomeHasValue then
      Json.ObjAddProp(Result, 'nome', Self.stringToJsonValue(Source.nome));
    if Assigned(Source.qualificacao) then
      Json.ObjAddProp(Result, 'qualificacao', Self.TCnpjQualificacaoSocioToJsonValue(Source.qualificacao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjRepresentanteLegalToJson(Source: TCnpjRepresentanteLegal): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjRepresentanteLegalToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjRepresentanteLegalFromJsonValue(Source: TJSONValue): TCnpjRepresentanteLegal;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjRepresentanteLegal.Create;
  try
    if Json.ObjContains(Source, 'cpf', JValue) then
      Result.cpf := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome', JValue) then
      Result.nome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qualificacao', JValue) then
      Result.qualificacao := Self.TCnpjQualificacaoSocioFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjRepresentanteLegalFromJson(Source: string): TCnpjRepresentanteLegal;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjRepresentanteLegalFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjFaixaEtariaToJsonValue(Source: TCnpjFaixaEtaria): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.codigoHasValue then
      Json.ObjAddProp(Result, 'codigo', Self.stringToJsonValue(Source.codigo));
    if Source.descricaoHasValue then
      Json.ObjAddProp(Result, 'descricao', Self.stringToJsonValue(Source.descricao));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjFaixaEtariaToJson(Source: TCnpjFaixaEtaria): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjFaixaEtariaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjFaixaEtariaFromJsonValue(Source: TJSONValue): TCnpjFaixaEtaria;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjFaixaEtaria.Create;
  try
    if Json.ObjContains(Source, 'codigo', JValue) then
      Result.codigo := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'descricao', JValue) then
      Result.descricao := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjFaixaEtariaFromJson(Source: string): TCnpjFaixaEtaria;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjFaixaEtariaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjSocioToJsonValue(Source: TCnpjSocio): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Assigned(Source.identificador_socio) then
      Json.ObjAddProp(Result, 'identificador_socio', Self.TCnpjIdentificadorSocioToJsonValue(Source.identificador_socio));
    if Source.nomeHasValue then
      Json.ObjAddProp(Result, 'nome', Self.stringToJsonValue(Source.nome));
    if Source.cpf_cnpjHasValue then
      Json.ObjAddProp(Result, 'cpf_cnpj', Self.stringToJsonValue(Source.cpf_cnpj));
    if Assigned(Source.qualificacao) then
      Json.ObjAddProp(Result, 'qualificacao', Self.TCnpjQualificacaoSocioToJsonValue(Source.qualificacao));
    if Source.data_entrada_sociedadeHasValue then
      Json.ObjAddProp(Result, 'data_entrada_sociedade', Self.TDateToJsonValue(Source.data_entrada_sociedade));
    if Assigned(Source.pais) then
      Json.ObjAddProp(Result, 'pais', Self.TCnpjPaisToJsonValue(Source.pais));
    if Assigned(Source.representante_legal) then
      Json.ObjAddProp(Result, 'representante_legal', Self.TCnpjRepresentanteLegalToJsonValue(Source.representante_legal));
    if Assigned(Source.faixa_etaria) then
      Json.ObjAddProp(Result, 'faixa_etaria', Self.TCnpjFaixaEtariaToJsonValue(Source.faixa_etaria));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjSocioToJson(Source: TCnpjSocio): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjSocioToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjSocioFromJsonValue(Source: TJSONValue): TCnpjSocio;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjSocio.Create;
  try
    if Json.ObjContains(Source, 'identificador_socio', JValue) then
      Result.identificador_socio := Self.TCnpjIdentificadorSocioFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome', JValue) then
      Result.nome := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cpf_cnpj', JValue) then
      Result.cpf_cnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'qualificacao', JValue) then
      Result.qualificacao := Self.TCnpjQualificacaoSocioFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_entrada_sociedade', JValue) then
      Result.data_entrada_sociedade := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pais', JValue) then
      Result.pais := Self.TCnpjPaisFromJsonValue(JValue);
    if Json.ObjContains(Source, 'representante_legal', JValue) then
      Result.representante_legal := Self.TCnpjRepresentanteLegalFromJsonValue(JValue);
    if Json.ObjContains(Source, 'faixa_etaria', JValue) then
      Result.faixa_etaria := Self.TCnpjFaixaEtariaFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjSocioFromJson(Source: string): TCnpjSocio;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjSocioFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjSocioListToJsonValue(Source: TCnpjSocioList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCnpjSocioToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjSocioListToJson(Source: TCnpjSocioList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjSocioListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjSocioListFromJsonValue(Source: TJSONValue): TCnpjSocioList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjSocioList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCnpjSocioFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjSocioListFromJson(Source: string): TCnpjSocioList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjSocioListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjEmpresaToJsonValue(Source: TCnpjEmpresa): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.cnpjHasValue then
      Json.ObjAddProp(Result, 'cnpj', Self.stringToJsonValue(Source.cnpj));
    if Source.razao_socialHasValue then
      Json.ObjAddProp(Result, 'razao_social', Self.stringToJsonValue(Source.razao_social));
    if Source.nome_fantasiaHasValue then
      Json.ObjAddProp(Result, 'nome_fantasia', Self.stringToJsonValue(Source.nome_fantasia));
    if Source.data_inicio_atividadeHasValue then
      Json.ObjAddProp(Result, 'data_inicio_atividade', Self.TDateToJsonValue(Source.data_inicio_atividade));
    if Source.matrizHasValue then
      Json.ObjAddProp(Result, 'matriz', Self.BooleanToJsonValue(Source.matriz));
    if Assigned(Source.natureza_juridica) then
      Json.ObjAddProp(Result, 'natureza_juridica', Self.TCnpjNaturezaJuridicaToJsonValue(Source.natureza_juridica));
    if Source.capital_socialHasValue then
      Json.ObjAddProp(Result, 'capital_social', Self.DoubleToJsonValue(Source.capital_social));
    if Assigned(Source.porte) then
      Json.ObjAddProp(Result, 'porte', Self.TCnpjPorteEmpresaToJsonValue(Source.porte));
    if Source.ente_federativo_responsavelHasValue then
      Json.ObjAddProp(Result, 'ente_federativo_responsavel', Self.stringToJsonValue(Source.ente_federativo_responsavel));
    if Assigned(Source.situacao_cadastral) then
      Json.ObjAddProp(Result, 'situacao_cadastral', Self.TCnpjSituacaoCadastralToJsonValue(Source.situacao_cadastral));
    if Assigned(Source.motivo_situacao_cadastral) then
      Json.ObjAddProp(Result, 'motivo_situacao_cadastral', Self.TCnpjMotivoSituacaoCadastralToJsonValue(Source.motivo_situacao_cadastral));
    if Source.nome_da_cidade_no_exteriorHasValue then
      Json.ObjAddProp(Result, 'nome_da_cidade_no_exterior', Self.stringToJsonValue(Source.nome_da_cidade_no_exterior));
    if Assigned(Source.pais) then
      Json.ObjAddProp(Result, 'pais', Self.TCnpjPaisToJsonValue(Source.pais));
    if Assigned(Source.atividade_principal) then
      Json.ObjAddProp(Result, 'atividade_principal', Self.TCnpjCnaeToJsonValue(Source.atividade_principal));
    if Assigned(Source.atividades_secundarias) then
      Json.ObjAddProp(Result, 'atividades_secundarias', Self.TCnpjCnaeSecundarioListToJsonValue(Source.atividades_secundarias));
    if Assigned(Source.endereco) then
      Json.ObjAddProp(Result, 'endereco', Self.TCnpjEnderecoToJsonValue(Source.endereco));
    if Assigned(Source.telefones) then
      Json.ObjAddProp(Result, 'telefones', Self.TCnpjTelefoneListToJsonValue(Source.telefones));
    if Source.emailHasValue then
      Json.ObjAddProp(Result, 'email', Self.stringToJsonValue(Source.email));
    if Assigned(Source.situacao_especial) then
      Json.ObjAddProp(Result, 'situacao_especial', Self.TCnpjSituacaoEspecialToJsonValue(Source.situacao_especial));
    if Assigned(Source.simples) then
      Json.ObjAddProp(Result, 'simples', Self.TCnpjOpcaoSimplesToJsonValue(Source.simples));
    if Assigned(Source.simei) then
      Json.ObjAddProp(Result, 'simei', Self.TCnpjOpcaoSimeiToJsonValue(Source.simei));
    if Assigned(Source.socios) then
      Json.ObjAddProp(Result, 'socios', Self.TCnpjSocioListToJsonValue(Source.socios));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjEmpresaToJson(Source: TCnpjEmpresa): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjEmpresaToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjEmpresaFromJsonValue(Source: TJSONValue): TCnpjEmpresa;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjEmpresa.Create;
  try
    if Json.ObjContains(Source, 'cnpj', JValue) then
      Result.cnpj := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'razao_social', JValue) then
      Result.razao_social := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_fantasia', JValue) then
      Result.nome_fantasia := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data_inicio_atividade', JValue) then
      Result.data_inicio_atividade := Self.TDateFromJsonValue(JValue);
    if Json.ObjContains(Source, 'matriz', JValue) then
      Result.matriz := Self.BooleanFromJsonValue(JValue);
    if Json.ObjContains(Source, 'natureza_juridica', JValue) then
      Result.natureza_juridica := Self.TCnpjNaturezaJuridicaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'capital_social', JValue) then
      Result.capital_social := Self.DoubleFromJsonValue(JValue);
    if Json.ObjContains(Source, 'porte', JValue) then
      Result.porte := Self.TCnpjPorteEmpresaFromJsonValue(JValue);
    if Json.ObjContains(Source, 'ente_federativo_responsavel', JValue) then
      Result.ente_federativo_responsavel := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'situacao_cadastral', JValue) then
      Result.situacao_cadastral := Self.TCnpjSituacaoCadastralFromJsonValue(JValue);
    if Json.ObjContains(Source, 'motivo_situacao_cadastral', JValue) then
      Result.motivo_situacao_cadastral := Self.TCnpjMotivoSituacaoCadastralFromJsonValue(JValue);
    if Json.ObjContains(Source, 'nome_da_cidade_no_exterior', JValue) then
      Result.nome_da_cidade_no_exterior := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'pais', JValue) then
      Result.pais := Self.TCnpjPaisFromJsonValue(JValue);
    if Json.ObjContains(Source, 'atividade_principal', JValue) then
      Result.atividade_principal := Self.TCnpjCnaeFromJsonValue(JValue);
    if Json.ObjContains(Source, 'atividades_secundarias', JValue) then
      Result.atividades_secundarias := Self.TCnpjCnaeSecundarioListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'endereco', JValue) then
      Result.endereco := Self.TCnpjEnderecoFromJsonValue(JValue);
    if Json.ObjContains(Source, 'telefones', JValue) then
      Result.telefones := Self.TCnpjTelefoneListFromJsonValue(JValue);
    if Json.ObjContains(Source, 'email', JValue) then
      Result.email := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'situacao_especial', JValue) then
      Result.situacao_especial := Self.TCnpjSituacaoEspecialFromJsonValue(JValue);
    if Json.ObjContains(Source, 'simples', JValue) then
      Result.simples := Self.TCnpjOpcaoSimplesFromJsonValue(JValue);
    if Json.ObjContains(Source, 'simei', JValue) then
      Result.simei := Self.TCnpjOpcaoSimeiFromJsonValue(JValue);
    if Json.ObjContains(Source, 'socios', JValue) then
      Result.socios := Self.TCnpjSocioListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjEmpresaFromJson(Source: string): TCnpjEmpresa;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjEmpresaFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjEmpresaListToJsonValue(Source: TCnpjEmpresaList): TJSONValue;
var
  Index: Integer;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateArray;
  try
    for Index := 0 to Source.Count - 1 do
      Json.ArrayAdd(Result, Self.TCnpjEmpresaToJsonValue(Source[Index]));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjEmpresaListToJson(Source: TCnpjEmpresaList): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjEmpresaListToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjEmpresaListFromJsonValue(Source: TJSONValue): TCnpjEmpresaList;
var
  Index: Integer;
begin
  if not Json.IsArray(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjEmpresaList.Create;
  try
    for Index := 0 to Json.ArrayLength(Source) - 1 do
      Result.Add(Self.TCnpjEmpresaFromJsonValue(Json.ArrayGet(Source, Index)));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjEmpresaListFromJson(Source: string): TCnpjEmpresaList;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjEmpresaListFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjListagemToJsonValue(Source: TCnpjListagem): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source._countHasValue then
      Json.ObjAddProp(Result, '@count', Self.IntegerToJsonValue(Source._count));
    if Assigned(Source.data) then
      Json.ObjAddProp(Result, 'data', Self.TCnpjEmpresaListToJsonValue(Source.data));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjListagemToJson(Source: TCnpjListagem): string;
var
  JValue: TJSONValue;
begin
  JValue := TCnpjListagemToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCnpjListagemFromJsonValue(Source: TJSONValue): TCnpjListagem;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCnpjListagem.Create;
  try
    if Json.ObjContains(Source, '@count', JValue) then
      Result._count := Self.IntegerFromJsonValue(JValue);
    if Json.ObjContains(Source, 'data', JValue) then
      Result.data := Self.TCnpjEmpresaListFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCnpjListagemFromJson(Source: string): TCnpjListagem;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCnpjListagemFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCepEnderecoToJsonValue(Source: TCepEndereco): TJSONValue;
begin
  if not Assigned(Source) then
  begin
    Result := Json.CreateNull;
    Exit;
  end;
  Result := Json.CreateObject;
  try
    if Source.bairroHasValue then
      Json.ObjAddProp(Result, 'bairro', Self.stringToJsonValue(Source.bairro));
    if Source.cepHasValue then
      Json.ObjAddProp(Result, 'cep', Self.stringToJsonValue(Source.cep));
    if Source.codigo_ibgeHasValue then
      Json.ObjAddProp(Result, 'codigo_ibge', Self.stringToJsonValue(Source.codigo_ibge));
    if Source.complementoHasValue then
      Json.ObjAddProp(Result, 'complemento', Self.stringToJsonValue(Source.complemento));
    if Source.logradouroHasValue then
      Json.ObjAddProp(Result, 'logradouro', Self.stringToJsonValue(Source.logradouro));
    if Source.municipioHasValue then
      Json.ObjAddProp(Result, 'municipio', Self.stringToJsonValue(Source.municipio));
    if Source.tipo_logradouroHasValue then
      Json.ObjAddProp(Result, 'tipo_logradouro', Self.stringToJsonValue(Source.tipo_logradouro));
    if Source.ufHasValue then
      Json.ObjAddProp(Result, 'uf', Self.stringToJsonValue(Source.uf));
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCepEnderecoToJson(Source: TCepEndereco): string;
var
  JValue: TJSONValue;
begin
  JValue := TCepEnderecoToJsonValue(Source);
  try
    Result := JsonValueToJson(JValue);
  finally
    JValue.Free;
  end;
end;

function TJsonConverter.TCepEnderecoFromJsonValue(Source: TJSONValue): TCepEndereco;
var
  JValue: TJSONValue;
begin
  if not Json.IsObject(Source) then
  begin
    Result := nil;
    Exit;
  end;
  Result := TCepEndereco.Create;
  try
    if Json.ObjContains(Source, 'bairro', JValue) then
      Result.bairro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'cep', JValue) then
      Result.cep := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'codigo_ibge', JValue) then
      Result.codigo_ibge := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'complemento', JValue) then
      Result.complemento := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'logradouro', JValue) then
      Result.logradouro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'municipio', JValue) then
      Result.municipio := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'tipo_logradouro', JValue) then
      Result.tipo_logradouro := Self.stringFromJsonValue(JValue);
    if Json.ObjContains(Source, 'uf', JValue) then
      Result.uf := Self.stringFromJsonValue(JValue);
  except
    Result.Free;
    raise;
  end;
end;

function TJsonConverter.TCepEnderecoFromJson(Source: string): TCepEndereco;
var
  JValue: TJSONValue;
begin
  JValue := JsonToJsonValue(Source);
  try
    Result := TCepEnderecoFromJsonValue(JValue);
  finally
    JValue.Free;
  end;
end;

end.
